(in-package "ACL2")

(include-book "utilities/flatten-equiv")
(include-book "hifat-to-lofat-inversion")
(include-book "lofat-to-string-inversion")

;  lofat.lisp                                           Mihir Mehta

; This is a stobj model of the FAT32 filesystem.

;; These are some rules from other books which are either interacting badly
;; with the theory I've built up so far, or else causing a lot of unnecessary
;; frames and tries.
(local
 (in-theory (disable take-of-too-many make-list-ac-removal
                     revappend-removal str::hex-digit-listp-of-cons
                     loghead logtail nth-when->=-n-len-l
                     integer-listp)))

(local
 (in-theory (disable nth update-nth ceiling floor mod true-listp take member-equal)))

;; get-clusterchain-alt really should be disabled here if it can!
(local
 (in-theory (e/d (hifat-equiv-of-cons-lemma-5)
                 (non-free-index-list-listp-correctness-1
                  intersectp-member-when-not-member-intersectp
                  no-duplicatesp-of-member
                  free-index-list-listp-correctness-1
                  consp-of-nthcdr car-of-nthcdr
                  count-free-clusters-of-set-indices-in-fa-table-2
                  (:rewrite subsetp-implies-subsetp-cdr)
                  (:rewrite stringp-when-nonempty-stringp)
                  (:rewrite
                   acl2-numberp-of-car-when-acl2-number-listp)
                  (:rewrite
                   rationalp-of-car-when-rational-listp)
                  (:definition acl2-number-listp)
                  (:rewrite
                   flatten-subset-no-duplicatesp-lemma-2)
                  (:definition rational-listp)
                  (:rewrite true-listp-when-string-list)
                  (:rewrite integerp-of-car-when-integer-listp)
                  (:definition string-listp)
                  (:rewrite subseq-of-length-1)
                  (:rewrite assoc-of-car-when-member)
                  (:rewrite characterp-nth)
                  (:rewrite hifat-file-alist-fix-guard-lemma-1)
                  (:rewrite subsetp-member . 2)
                  (:rewrite
                   d-e-list-p-of-cdr-when-d-e-list-p)
                  (:rewrite intersect-with-subset . 8)
                  (:rewrite intersect-with-subset . 1)
                  (:rewrite intersect-with-subset . 3)
                  (:rewrite intersect-with-subset . 4)
                  (:rewrite intersect-with-subset . 2)
                  (:rewrite intersect-with-subset . 7)
                  (:rewrite intersect-with-subset . 10)
                  (:rewrite subsetp-member . 4)
                  (:rewrite natp-of-caar-when-file-table-p)
                  (:rewrite natp-of-caar-when-fd-table-p)
                  (:rewrite
                   fat32-filename-p-of-car-when-fat32-filename-list-p)
                  (:rewrite free-index-listp-correctness-1)
                  (:rewrite
                   consp-of-assoc-of-hifat-file-alist-fix)
                  (:linear hifat-entry-count-when-hifat-subsetp)
                  (:rewrite
                   true-list-listp-of-cdr-when-true-list-listp)
                  (:rewrite not-intersectp-list-when-subsetp-2)
                  (:definition subsetp-equal)
                  (:rewrite
                   not-intersectp-list-of-set-difference$-lemma-2
                   . 1)
                  (:rewrite true-list-listp-when-not-consp)
                  (:rewrite
                   member-intersectp-is-commutative-lemma-2)
                  (:rewrite non-free-index-listp-correctness-5)
                  (:rewrite then-subseq-same-2)))))

;; I'm thinking it would be useful to eliminate a lot of case splits that arise
;; from nfix terms in lemmas using lofat-to-hifat-helper-correctness-4.
(local (in-theory (disable nfix)))

(defund-nx
  eqfat (str1 str2)
  (b*
      (((mv fat32-in-memory1 error-code1)
        (string-to-lofat-nx str1))
       (good1 (and (stringp str1) (equal error-code1 0)))
       ((mv fat32-in-memory2 error-code2)
        (string-to-lofat-nx str2))
       (good2 (and (stringp str2) (equal error-code2 0)))
       ((unless (and good1 good2))
        (and (not good1) (not good2))))
    (lofat-equiv fat32-in-memory1 fat32-in-memory2)))

(defequiv
  eqfat
  :hints (("goal" :in-theory (enable eqfat))))

(defthm
  string-to-lofat-inversion
  (implies
   (and (stringp str)
        (fat32-in-memoryp fat32-in-memory)
        (equal (mv-nth 1 (string-to-lofat fat32-in-memory str))
               0))
   (eqfat (lofat-to-string
           (mv-nth 0
                   (string-to-lofat fat32-in-memory str)))
          str))
  :hints
  (("goal"
    :in-theory (e/d (eqfat)
                    (create-fat32-in-memory
                     (:rewrite lofat-to-string-inversion)))
    :use
    ((:instance
      (:rewrite lofat-to-string-inversion)
      (fat32-in-memory
       (mv-nth 0
               (string-to-lofat (create-fat32-in-memory)
                                str))))
     (:instance
      (:rewrite string-to-lofat-ignore-lemma-14)
      (str
       (lofat-to-string
        (mv-nth 0
                (string-to-lofat (create-fat32-in-memory)
                                 str))))
      (fat32-in-memory
       (mv-nth 0
               (string-to-lofat (create-fat32-in-memory)
                                str))))
     string-to-lofat-ignore-lemma-14))))

(defthm
  hifat-to-string-inversion
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (m1-file-alist-p fs)
        (hifat-bounded-file-alist-p fs)
        (hifat-no-dups-p fs)
        (<= (hifat-entry-count fs)
            (max-entry-count fat32-in-memory)))
   (b*
       (((mv fat32-in-memory error-code)
         (hifat-to-lofat fat32-in-memory fs)))
     (implies
      (zp error-code)
      (hifat-equiv
       (mv-nth
        0
        (lofat-to-hifat
         (mv-nth
          0
          (string-to-lofat
           fat32-in-memory
           (lofat-to-string fat32-in-memory)))))
       fs)))))

(defthm
  string-to-hifat-inversion
  (implies
   (and (stringp str)
        (fat32-in-memoryp fat32-in-memory))
   (b*
       (((mv fat32-in-memory error-code1)
         (string-to-lofat fat32-in-memory str))
        ((mv fs error-code2)
         (lofat-to-hifat fat32-in-memory)))
     (implies
      (and (equal error-code1 0)
           (equal error-code2 0)
           (hifat-bounded-file-alist-p fs)
           (hifat-no-dups-p fs)
           (equal (mv-nth 1 (hifat-to-lofat fat32-in-memory fs))
                  0))
      (eqfat (lofat-to-string
              (mv-nth 0 (hifat-to-lofat fat32-in-memory fs)))
             str))))
  :hints
  (("goal"
    :in-theory (e/d (eqfat)
                    ((:rewrite lofat-to-string-inversion)
                     (:rewrite string-to-lofat-ignore)))
    :use
    ((:instance
      (:rewrite lofat-to-string-inversion)
      (fat32-in-memory
       (mv-nth
        0
        (hifat-to-lofat
         (mv-nth 0 (string-to-lofat-nx str))
         (mv-nth 0
                 (lofat-to-hifat
                  (mv-nth 0 (string-to-lofat-nx str))))))))
     (:instance
      (:rewrite string-to-lofat-ignore)
      (str
       (lofat-to-string
        (mv-nth
         0
         (hifat-to-lofat
          (mv-nth 0 (string-to-lofat-nx str))
          (mv-nth 0
                  (lofat-to-hifat
                   (mv-nth 0 (string-to-lofat-nx str))))))))
      (fat32-in-memory
       (mv-nth
        0
        (hifat-to-lofat
         (mv-nth 0 (string-to-lofat-nx str))
         (mv-nth 0
                 (lofat-to-hifat
                  (mv-nth 0 (string-to-lofat-nx str))))))))
     (:rewrite string-to-lofat-ignore)
     string-to-lofat-ignore-lemma-14
     (:instance
      (:rewrite string-to-lofat-ignore-lemma-14)
      (str
       (lofat-to-string
        (mv-nth
         0
         (hifat-to-lofat
          (mv-nth 0 (string-to-lofat fat32-in-memory str))
          (mv-nth
           0
           (lofat-to-hifat
            (mv-nth 0
                    (string-to-lofat fat32-in-memory str))))))))
      (fat32-in-memory
       (mv-nth
        0
        (hifat-to-lofat
         (mv-nth 0 (string-to-lofat fat32-in-memory str))
         (mv-nth
          0
          (lofat-to-hifat
           (mv-nth 0
                   (string-to-lofat fat32-in-memory str))))))))
     (:instance
      (:rewrite lofat-to-string-inversion)
      (fat32-in-memory
       (mv-nth
        0
        (hifat-to-lofat
         (mv-nth 0 (string-to-lofat fat32-in-memory str))
         (mv-nth
          0
          (lofat-to-hifat
           (mv-nth
            0
            (string-to-lofat fat32-in-memory str))))))))))))

#|
Some (rather awful) testing forms are
(b* (((mv contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*)))
  (get-dir-filenames fat32-in-memory contents *ms-max-dir-size*))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*)))
  (lofat-to-hifat fat32-in-memory))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory)))
  (hifat-open (list "INITRD  IMG") nil nil))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory))
     ((mv fd-table file-table & &)
      (hifat-open (list "INITRD  IMG") nil nil)))
  (hifat-pread 0 6 49 fs fd-table file-table))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory))
     ((mv fd-table file-table & &)
      (hifat-open (list "INITRD  IMG") nil nil)))
  (hifat-pwrite 0 "ornery" 49 fs fd-table file-table))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory))
     ((mv fd-table file-table & &)
      (hifat-open (list "INITRD  IMG") nil nil))
     ((mv fs & &)
      (hifat-pwrite 0 "ornery" 49 fs fd-table file-table))
     ((mv fat32-in-memory d-e-list)
      (hifat-to-lofat-helper fat32-in-memory fs)))
  (mv fat32-in-memory d-e-list))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory))
     ((mv fd-table file-table & &)
      (hifat-open (list "INITRD  IMG") nil nil))
     ((mv fs & &)
      (hifat-pwrite 0 "ornery" 49 fs fd-table file-table)))
  (hifat-to-lofat fat32-in-memory fs))
(time$
 (b*
     ((str (lofat-to-string
            fat32-in-memory))
      ((unless (and (stringp str)
                    (>= (length str) *initialbytcnt*)))
       (mv fat32-in-memory -1))
      ((mv fat32-in-memory error-code)
       (read-reserved-area fat32-in-memory str))
      ((unless (equal error-code 0))
       (mv fat32-in-memory "it was read-reserved-area"))
      (fat-read-size (/ (* (bpb_fatsz32 fat32-in-memory)
                           (bpb_bytspersec fat32-in-memory))
                        4))
      ((unless (integerp fat-read-size))
       (mv fat32-in-memory "it was fat-read-size"))
      (data-byte-count (* (count-of-clusters fat32-in-memory)
                          (cluster-size fat32-in-memory)))
      ((unless (> data-byte-count 0))
       (mv fat32-in-memory "it was data-byte-count"))
      (tmp_bytspersec (bpb_bytspersec fat32-in-memory))
      (tmp_init (* tmp_bytspersec
                   (+ (bpb_rsvdseccnt fat32-in-memory)
                      (* (bpb_numfats fat32-in-memory)
                         (bpb_fatsz32 fat32-in-memory)))))
      ((unless (>= (length str)
                   (+ tmp_init
                      (data-region-length fat32-in-memory))))
       (mv fat32-in-memory "it was (length str)"))
      (fat32-in-memory (resize-fat fat-read-size fat32-in-memory))
      (fat32-in-memory
       (update-fat fat32-in-memory
                   (subseq str
                           (* (bpb_rsvdseccnt fat32-in-memory)
                              (bpb_bytspersec fat32-in-memory))
                           (+ (* (bpb_rsvdseccnt fat32-in-memory)
                                 (bpb_bytspersec fat32-in-memory))
                              (* fat-read-size 4)))
                   fat-read-size))
      (fat32-in-memory
       (resize-data-region data-byte-count fat32-in-memory))
      (data-region-string
       (subseq str tmp_init
               (+ tmp_init
                  (data-region-length fat32-in-memory))))
      (fat32-in-memory
       (update-data-region fat32-in-memory data-region-string
                           (data-region-length fat32-in-memory)
                           0)))
   (mv fat32-in-memory error-code)))
(time$
 (b*
     (((mv channel state)
       (open-output-channel "test/disk2.raw" :character state))
      (state
         (princ$
          (lofat-to-string fat32-in-memory)
          channel state))
      (state
       (close-output-channel channel state)))
   (mv fat32-in-memory state)))
(b* (((mv dir-contents &)
      (get-clusterchain-contents fat32-in-memory 2 *ms-max-dir-size*))
     (fs (lofat-to-hifat fat32-in-memory))
     ((mv fs & &)
      (hifat-mkdir fs (list "" "TMP        "))))
  (hifat-to-lofat fat32-in-memory fs))
|#

(defund lofat-file-contents-p (contents)
  (declare (xargs :guard t))
  (or (and (stringp contents)
           (unsigned-byte-p 32 (length contents)))
      (d-e-list-p contents)))

(defund lofat-file-contents-fix (contents)
  (declare (xargs :guard t))
  (if (lofat-file-contents-p contents)
      contents
    ""))

(defthm
  lofat-file-contents-fix-of-lofat-file-contents-fix
  (equal (lofat-file-contents-fix (lofat-file-contents-fix x))
         (lofat-file-contents-fix x))
  :hints (("goal" :in-theory (enable lofat-file-contents-fix))))

(fty::deffixtype lofat-file-contents
                 :pred lofat-file-contents-p
                 :fix lofat-file-contents-fix
                 :equiv lofat-file-contents-equiv
                 :define t)

(defthm
  lofat-file-contents-p-of-lofat-file-contents-fix
  (lofat-file-contents-p (lofat-file-contents-fix x))
  :hints (("goal" :in-theory (enable lofat-file-contents-fix
                                     lofat-file-contents-p))))

(defthm
  lofat-file-contents-fix-when-lofat-file-contents-p
  (implies (lofat-file-contents-p x)
           (equal (lofat-file-contents-fix x) x))
  :hints (("goal" :in-theory (enable lofat-file-contents-fix
                                     lofat-file-contents-p))))

(defthm
  lofat-file-contents-p-when-stringp
  (implies (stringp contents)
           (equal (lofat-file-contents-p contents)
                  (unsigned-byte-p 32 (length contents))))
  :hints (("goal" :in-theory (enable lofat-file-contents-p))))

(defthm lofat-file-contents-p-when-d-e-listp
  (implies (d-e-list-p contents)
           (lofat-file-contents-p contents))
  :hints (("goal" :in-theory (enable lofat-file-contents-p))))

(fty::defprod
 lofat-file
 ((d-e d-e-p :default (d-e-fix nil))
  (contents lofat-file-contents-p :default (lofat-file-contents-fix nil))))

(defund lofat-regular-file-p (file)
  (declare (xargs :guard t))
  (and (lofat-file-p file)
       (stringp (lofat-file->contents file))
       (unsigned-byte-p 32 (length (lofat-file->contents file)))))

(defund lofat-directory-file-p (file)
  (declare (xargs :guard t))
  (and (lofat-file-p file)
       (d-e-list-p (lofat-file->contents file))))

(defthm
  lofat-regular-file-p-correctness-1
  (implies
   (d-e-list-p contents)
   (not (lofat-regular-file-p (lofat-file d-e contents))))
  :hints (("goal" :in-theory (enable lofat-regular-file-p))))

(defthm
  lofat-regular-file-p-correctness-2
  (implies
   (lofat-regular-file-p file)
   (stringp (lofat-file->contents file)))
  :hints (("goal" :in-theory (enable lofat-regular-file-p))))

(defthm
  lofat-directory-file-p-correctness-1
  (implies
   (stringp contents)
   (not (lofat-directory-file-p (lofat-file d-e contents))))
  :hints (("goal" :in-theory (enable lofat-directory-file-p))))

(defthm
  lofat-directory-file-p-correctness-2
  (implies (lofat-regular-file-p file)
           (not (lofat-directory-file-p file)))
  :hints (("goal" :in-theory (enable lofat-directory-file-p
                                     lofat-regular-file-p))))

(defthm
  lofat-directory-file-p-when-lofat-file-p
  (implies (and (lofat-file-p file)
                (not (lofat-regular-file-p file)))
           (lofat-directory-file-p file))
  :hints (("goal" :in-theory (enable lofat-directory-file-p
                                     lofat-regular-file-p lofat-file-p
                                     lofat-file-contents-p
                                     lofat-file->contents))))

(defun lofat-find-file (fat32-in-memory d-e-list path)
  (declare (xargs :guard (and (lofat-fs-p fat32-in-memory)
                              (fat32-filename-list-p path)
                              (useful-d-e-list-p d-e-list))
                  :measure (acl2-count path)
                  :stobjs fat32-in-memory))
  (b* (((unless (consp path))
        (mv (make-lofat-file) *enoent*))
       (name (fat32-filename-fix (car path)))
       ((mv d-e error-code) (find-d-e d-e-list name))
       ((unless (equal error-code 0))
        (mv (make-lofat-file) error-code))
       (first-cluster (d-e-first-cluster d-e))
       (directory-p
        (d-e-directory-p d-e))
       ((mv contents &)
        (if
            (or (< first-cluster
                   *ms-first-data-cluster*)
                (>=
                 first-cluster
                 (+ (count-of-clusters fat32-in-memory)
                    *ms-first-data-cluster*)))
            (mv "" 0)
          (d-e-clusterchain-contents
           fat32-in-memory d-e)))
       ((unless directory-p)
        (if (consp (cdr path))
            (mv (make-lofat-file) *enotdir*)
          (mv (make-lofat-file :d-e d-e :contents contents) 0)))
       ((when (atom (cdr path)))
        (mv
         (make-lofat-file :d-e d-e
                          :contents (make-d-e-list contents))
         0)))
    (lofat-find-file
     fat32-in-memory (make-d-e-list contents) (cdr path))))

(defthm
  lofat-find-file-correctness-1-lemma-2
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0))
   (equal
    (m1-file->d-e
     (cdr
      (assoc-equal
       name
       (mv-nth 0
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))))
    (mv-nth 0 (find-d-e d-e-list name))))
  :hints (("goal" :in-theory (enable lofat-to-hifat-helper))))

(defthm
  lofat-find-file-correctness-1-lemma-3
  (implies
   (and
    (equal (mv-nth 1 (find-d-e d-e-list name))
           0)
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper
                    fat32-in-memory
                    d-e-list entry-limit))
           0)
    (not (d-e-directory-p
          (mv-nth 0 (find-d-e d-e-list name))))
    (or (< (d-e-first-cluster
            (mv-nth 0 (find-d-e d-e-list name)))
           2)
        (<= (+ 2 (count-of-clusters fat32-in-memory))
            (d-e-first-cluster
             (mv-nth 0 (find-d-e d-e-list name))))))
   (equal
    (cdr (assoc-equal name
                      (mv-nth 0
                              (lofat-to-hifat-helper
                               fat32-in-memory
                               d-e-list entry-limit))))
    (make-m1-file
     :contents ""
     :d-e (mv-nth 0 (find-d-e d-e-list name)))))
  :hints
  (("goal"
    :in-theory (enable lofat-to-hifat-helper))))

(defthm
  lofat-find-file-correctness-1-lemma-4
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper
                        fat32-in-memory
                        d-e-list entry-limit))
               0)
        (not (d-e-directory-p
              (mv-nth 0 (find-d-e d-e-list name))))
        (<= 2
            (d-e-first-cluster
             (mv-nth 0 (find-d-e d-e-list name))))
        (< (d-e-first-cluster
            (mv-nth 0 (find-d-e d-e-list name)))
           (+ 2 (count-of-clusters fat32-in-memory))))
   (equal
    (cdr (assoc-equal name
                      (mv-nth 0
                              (lofat-to-hifat-helper
                               fat32-in-memory
                               d-e-list entry-limit))))
    (make-m1-file
     :contents
     (mv-nth
      0
      (d-e-clusterchain-contents
       fat32-in-memory
       (mv-nth 0 (find-d-e d-e-list name))))
     :d-e (mv-nth 0 (find-d-e d-e-list name)))))
  :hints
  (("goal"
    :in-theory (enable lofat-to-hifat-helper))))

(defthm
  lofat-find-file-correctness-1-lemma-5
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper
                        fat32-in-memory
                        d-e-list entry-limit))
               0))
   (equal
    (m1-directory-file-p
     (cdr
      (assoc-equal name
                   (mv-nth 0
                           (lofat-to-hifat-helper
                            fat32-in-memory
                            d-e-list entry-limit)))))
    (d-e-directory-p
     (mv-nth 0
             (find-d-e d-e-list name)))))
  :hints
  (("goal" :in-theory (enable lofat-to-hifat-helper
                              m1-directory-file-p))))

;; Also general.
(defthm
  lofat-find-file-correctness-1-lemma-6
  (implies
   (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit))
     0)
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit)))
     entry-limit)))
  :hints
  (("goal"
    :induct (mv (mv-nth 3
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit))
                (mv-nth 0 (find-d-e d-e-list name)))
    :in-theory
    (e/d (lofat-to-hifat-helper-correctness-4 lofat-to-hifat-helper)
         ((:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
          (:definition free-index-listp)
          (:rewrite nth-of-effective-fat)
          (:definition no-duplicatesp-equal)))))
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
          (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0))
     (equal
      (mv-nth
       3
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))
      0)))
   (:linear
    :corollary
    (implies
     (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
          (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0))
     (<
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit)))
      entry-limit)))
   (:forward-chaining
    :corollary
    (implies
     (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
          (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0))
     (equal
      (mv-nth
       3
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))
      0))
    :trigger-terms
    ((lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0 (find-d-e d-e-list name)))))
      entry-limit)))))

(defthm
  lofat-find-file-correctness-1-lemma-7
  (implies
   (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0))
   (equal
    (cdr (assoc-equal
          name
          (mv-nth 0
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit))))
    (make-m1-file
     :d-e (mv-nth 0 (find-d-e d-e-list name))
     :contents
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit)))))
  :hints
  (("goal" :in-theory (enable lofat-to-hifat-helper-correctness-4)
    :induct (find-d-e d-e-list name)
    :expand (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))

(defthm
  lofat-find-file-correctness-1-lemma-8
  (implies
   (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0))
   (and
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
       (+ 2
          (count-of-clusters fat32-in-memory)))))
  :hints (("goal" :in-theory (enable lofat-to-hifat-helper-correctness-4)
           :induct (find-d-e d-e-list name)
           :expand ((lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit)
                    (lofat-to-hifat-helper fat32-in-memory
                                           nil (+ -1 entry-limit)))))
  :rule-classes :linear)

(defthm
  lofat-find-file-correctness-1
  (b*
      (((mv file error-code)
        (hifat-find-file
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  d-e-list entry-limit))
         path)))
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper
                      fat32-in-memory
                      d-e-list entry-limit))
             0)
      (lofat-regular-file-p
       (mv-nth
        0
        (lofat-find-file fat32-in-memory
                         d-e-list path))))
     (equal (lofat-find-file
             fat32-in-memory d-e-list path)
            (mv (make-lofat-file :contents (m1-file->contents file)
                                 :d-e (m1-file->d-e file))
                error-code))))
  :hints (("Goal" :in-theory (enable hifat-find-file)) ))

(defthm
  lofat-find-file-correctness-2
  (b*
      (((mv file error-code)
        (hifat-find-file
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  d-e-list entry-limit))
         path)))
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper
                      fat32-in-memory
                      d-e-list entry-limit))
             0)
      (lofat-directory-file-p
       (mv-nth
        0
        (lofat-find-file fat32-in-memory
                         d-e-list path))))
     (and
      (equal
       (lofat-file->d-e
        (mv-nth 0
                (lofat-find-file
                 fat32-in-memory d-e-list path)))
       (m1-file->d-e file))
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (lofat-file->contents
          (mv-nth 0
                  (lofat-find-file
                   fat32-in-memory d-e-list path)))
         entry-limit))
       (m1-file->contents file))
      (equal
       (mv-nth 1
               (lofat-find-file
                fat32-in-memory d-e-list path))
       error-code))))
  :hints
  (("goal" :in-theory (enable hifat-find-file)
    :induct
    (mv (mv-nth 0
                (hifat-find-file
                 (mv-nth 0
                         (lofat-to-hifat-helper
                          fat32-in-memory
                          d-e-list entry-limit))
                 path))
        (mv-nth 0
                (lofat-find-file
                 fat32-in-memory d-e-list path)))
    :expand (lofat-to-hifat-helper
             fat32-in-memory nil entry-limit))))

(defthm
  lofat-find-file-correctness-3
  (and (lofat-file-p
        (mv-nth 0
                (lofat-find-file fat32-in-memory d-e-list path)))
       (natp (mv-nth 1
                     (lofat-find-file fat32-in-memory
                                      d-e-list path))))
  :rule-classes
  ((:type-prescription
    :corollary (natp (mv-nth 1
                             (lofat-find-file fat32-in-memory
                                              d-e-list path))))
   (:rewrite
    :corollary
    (lofat-file-p (mv-nth 0
                          (lofat-find-file fat32-in-memory
                                           d-e-list path))))))

(defun
    place-d-e (d-e-list d-e)
  (declare (xargs :guard (and (d-e-p d-e)
                              (d-e-list-p d-e-list))))
  (b*
      ((d-e (mbe :exec d-e
                     :logic (d-e-fix d-e)))
       ((when (atom d-e-list))
        (list d-e))
       ((when (equal (d-e-filename d-e)
                     (d-e-filename (car d-e-list))))
        (list*
         d-e
         (mbe :exec (cdr d-e-list)
              :logic (d-e-list-fix (cdr d-e-list))))))
    (list* (mbe :logic (d-e-fix (car d-e-list))
                :exec (car d-e-list))
           (place-d-e (cdr d-e-list)
                          d-e))))

(defthm d-e-list-p-of-place-d-e
  (d-e-list-p (place-d-e d-e-list d-e)))

(defthm find-d-e-of-place-d-e
  (implies (d-e-list-p d-e-list)
           (equal (find-d-e (place-d-e d-e-list d-e)
                                filename)
                  (if (equal (d-e-filename d-e)
                             filename)
                      (mv (d-e-fix d-e) 0)
                      (find-d-e d-e-list filename)))))

(defthm
  place-d-e-of-d-e-fix
  (equal (place-d-e d-e-list (d-e-fix d-e))
         (place-d-e d-e-list d-e))
  :hints (("goal" :in-theory (enable place-d-e))))

(defcong d-e-equiv equal
  (place-d-e d-e-list d-e)
  2)

(defthm
  len-of-place-d-e
  (equal
   (len (place-d-e d-e-list d-e))
   (if (zp (mv-nth 1
                   (find-d-e d-e-list
                                 (d-e-filename d-e))))
       (len d-e-list)
       (+ 1 (len d-e-list)))))

(defthm
  useful-d-e-list-p-of-place-d-e
  (implies
   (and (useful-d-e-list-p d-e-list)
        (not (useless-d-e-p (d-e-fix d-e)))
        (fat32-filename-p (d-e-filename d-e)))
   (useful-d-e-list-p (place-d-e d-e-list d-e)))
  :hints (("goal" :in-theory (enable useful-d-e-list-p
                                     fat32-filename-p))))

(defund clear-clusterchain
  (fat32-in-memory masked-current-cluster length)
  (declare
   (xargs :stobjs fat32-in-memory
          :guard (and (lofat-fs-p fat32-in-memory)
                      (fat32-masked-entry-p masked-current-cluster)
                      (natp length)
                      (>= masked-current-cluster
                          *ms-first-data-cluster*)
                      (< masked-current-cluster
                         (+ (count-of-clusters fat32-in-memory)
                            *ms-first-data-cluster*)))))
  (b*
      (((mv dir-clusterchain error-code)
        (get-clusterchain fat32-in-memory masked-current-cluster length))
       ((unless (equal error-code 0))
        (mv fat32-in-memory error-code))
       (fat32-in-memory
        (stobj-set-indices-in-fa-table
         fat32-in-memory dir-clusterchain
         (make-list (len dir-clusterchain)
                    :initial-element 0))))
    (mv fat32-in-memory 0)))

(defthm
  fat-length-of-clear-clusterchain
  (equal
   (fat-length
    (mv-nth 0
            (clear-clusterchain fat32-in-memory
                                masked-current-cluster length)))
   (fat-length fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  count-of-clusters-of-clear-clusterchain
  (equal
   (count-of-clusters
    (mv-nth 0
            (clear-clusterchain fat32-in-memory
                                masked-current-cluster length)))
   (count-of-clusters fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  lofat-fs-p-of-clear-clusterchain
  (implies
   (lofat-fs-p fat32-in-memory)
   (lofat-fs-p
    (mv-nth
     0
     (clear-clusterchain fat32-in-memory
                         masked-current-cluster length))))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  cluster-size-of-clear-clusterchain
  (equal
   (cluster-size
    (mv-nth 0
            (clear-clusterchain fat32-in-memory
                                masked-current-cluster length)))
   (cluster-size fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  max-entry-count-of-clear-clusterchain
  (equal (max-entry-count
          (mv-nth 0
                  (clear-clusterchain fat32-in-memory
                                      masked-current-cluster length)))
         (max-entry-count fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  pseudo-root-d-e-of-clear-clusterchain
  (equal
   (pseudo-root-d-e
    (mv-nth 0
            (clear-clusterchain fat32-in-memory
                                masked-current-cluster length)))
   (pseudo-root-d-e fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

;; This has to be disabled because it's causing fat32-build-index-list to
;; appear where it isn't wanted.
(defthmd
  clear-clusterchain-correctness-1
  (implies
   (<= 2 masked-current-cluster)
   (equal
    (mv-nth 1
            (clear-clusterchain fat32-in-memory
                                masked-current-cluster length))
    (mv-nth 1
            (get-clusterchain-contents
             fat32-in-memory
             masked-current-cluster length))))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthm
  clear-clusterchain-correctness-2
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (non-free-index-listp x (effective-fat fat32-in-memory))
    (not
     (intersectp-equal
      x
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster length
                                      (cluster-size fat32-in-memory))))))
   (non-free-index-listp
    x
    (effective-fat
     (mv-nth 0
             (clear-clusterchain fat32-in-memory
                                 masked-current-cluster length)))))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

(defthmd clear-clusterchain-correctness-3
  (implies
   (not (equal (mv-nth
                1
                (clear-clusterchain
                 fat32-in-memory masked-current-cluster length))
               0))
   (equal (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory masked-current-cluster length))
          fat32-in-memory))
  :hints (("goal" :in-theory (enable clear-clusterchain))))

;; This is general.
(defthm
  clear-clusterchain-reversibility-lemma-1
  (implies
   (equal (mv-nth 1
                  (fat32-build-index-list fa-table masked-current-cluster
                                          length cluster-size))
          0)
   (consp (mv-nth 0
                  (fat32-build-index-list fa-table masked-current-cluster
                                          length cluster-size))))
  :hints (("goal" :in-theory (enable fat32-build-index-list))))

(defthm
  clear-clusterchain-reversibility-lemma-2
  (implies
   (lofat-fs-p fat32-in-memory)
   (equal
    (stobj-set-indices-in-fa-table
     fat32-in-memory
     (mv-nth 0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     masked-current-cluster
                                     length (cluster-size fat32-in-memory)))
     (append
      (cdr
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                masked-current-cluster
                                length (cluster-size fat32-in-memory))))
      (list
       (fat32-entry-mask
        (fati
         (car
          (last
           (mv-nth 0
                   (fat32-build-index-list (effective-fat fat32-in-memory)
                                           masked-current-cluster length
                                           (cluster-size fat32-in-memory)))))
         fat32-in-memory)))))
    fat32-in-memory))
  :hints
  (("goal"
    :in-theory
    (e/d
     (stobj-set-indices-in-fa-table fat32-build-index-list
                                    fat32-update-lower-28-of-fat32-entry-mask
                                    nfix)
     ((:rewrite get-clusterchain-contents-correctness-2)))
    :induct (fat32-build-index-list (effective-fat fat32-in-memory)
                                    masked-current-cluster
                                    length (cluster-size fat32-in-memory))
    :expand
    (fat32-build-index-list
     (effective-fat fat32-in-memory)
     (fat32-entry-mask (fati masked-current-cluster fat32-in-memory))
     (+ length
        (- (cluster-size fat32-in-memory)))
     (cluster-size fat32-in-memory)))))

(defthm
  clear-clusterchain-reversibility
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (fat32-masked-entry-p masked-current-cluster)
        (>= masked-current-cluster
            *ms-first-data-cluster*)
        (< masked-current-cluster
           (+ (count-of-clusters fat32-in-memory)
              *ms-first-data-cluster*)))
   (equal
    (stobj-set-indices-in-fa-table
     (mv-nth 0
             (clear-clusterchain fat32-in-memory
                                 masked-current-cluster length))
     (mv-nth 0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     masked-current-cluster
                                     length (cluster-size fat32-in-memory)))
     (append
      (cdr
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                masked-current-cluster
                                length (cluster-size fat32-in-memory))))
      (list
       (fat32-entry-mask
        (fati
         (car
          (last
           (mv-nth 0
                   (fat32-build-index-list (effective-fat fat32-in-memory)
                                           masked-current-cluster length
                                           (cluster-size fat32-in-memory)))))
         fat32-in-memory)))))
    fat32-in-memory))
  :hints (("goal" :in-theory (e/d (clear-clusterchain)
                                  (clear-clusterchain-reversibility-lemma-2))
           :use clear-clusterchain-reversibility-lemma-2
           :do-not-induct t)))

(encapsulate
  ()

  (local
   (defthm
     fat32-build-index-list-of-effective-fat-of-clear-clusterchain-lemma-1
     (implies
      (and
       (<= (+ 2 (count-of-clusters fat32-in-memory))
           first-cluster)
       (lofat-fs-p fat32-in-memory)
       (fat32-masked-entry-p first-cluster)
       (fat32-masked-entry-p masked-current-cluster)
       (not
        (intersectp-equal
         (mv-nth 0
                 (fat32-build-index-list
                  (effective-fat fat32-in-memory)
                  masked-current-cluster
                  length1 (cluster-size fat32-in-memory)))
         (mv-nth 0
                 (fat32-build-index-list
                  (effective-fat fat32-in-memory)
                  first-cluster length2 (cluster-size fat32-in-memory))))))
      (equal
       (fat32-build-index-list
        (effective-fat
         (mv-nth 0
                 (clear-clusterchain
                  fat32-in-memory first-cluster length2)))
        masked-current-cluster
        length1 (cluster-size fat32-in-memory))
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        masked-current-cluster
        length1 (cluster-size fat32-in-memory))))
     :hints
     (("goal"
       :in-theory (e/d (intersectp-equal clear-clusterchain)
                       (intersectp-is-commutative))
       :expand
       ((fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster length2
                                (cluster-size fat32-in-memory))
        (get-clusterchain-contents
         fat32-in-memory first-cluster length2))
       :use
       (:instance
        (:rewrite intersectp-is-commutative)
        (y
         (mv-nth
          0
          (fat32-build-index-list (effective-fat fat32-in-memory)
                                  first-cluster length2
                                  (cluster-size fat32-in-memory))))
        (x (mv-nth 0
                   (fat32-build-index-list
                    (effective-fat fat32-in-memory)
                    masked-current-cluster length1
                    (cluster-size fat32-in-memory)))))))))

  (defthm
    fat32-build-index-list-of-effective-fat-of-clear-clusterchain
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (fat32-masked-entry-p masked-current-cluster1)
      (fat32-masked-entry-p masked-current-cluster2)
      (<= *ms-first-data-cluster*
          masked-current-cluster1)
      (not
       (intersectp-equal
        (mv-nth '0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        masked-current-cluster1
                                        length1 (cluster-size fat32-in-memory)))
        (mv-nth '0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        masked-current-cluster2 length2
                                        (cluster-size fat32-in-memory)))))
      (equal cluster-size (cluster-size fat32-in-memory)))
     (equal
      (fat32-build-index-list
       (effective-fat
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    masked-current-cluster1 length1)))
       masked-current-cluster2
       length2 cluster-size)
      (fat32-build-index-list (effective-fat fat32-in-memory)
                              masked-current-cluster2 length2
                              cluster-size)))
    :hints (("goal" :cases ((<= (+ 2 (count-of-clusters fat32-in-memory))
                                masked-current-cluster1)))
            ("subgoal 2" :in-theory (enable clear-clusterchain)))))

(defthm
  d-e-clusterchain-of-clear-clusterchain
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p masked-current-cluster)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        masked-current-cluster)
    (not
     (intersectp-equal
      (mv-nth '0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster
                                      length (cluster-size fat32-in-memory)))
      (mv-nth '0
              (d-e-clusterchain fat32-in-memory d-e)))))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       masked-current-cluster length))
           d-e)
          (d-e-clusterchain fat32-in-memory d-e)))
  :hints (("goal" :in-theory (enable d-e-clusterchain))))

(defthm
  effective-fat-of-clear-clusterchain
  (implies
   (lofat-fs-p fat32-in-memory)
   (equal
    (effective-fat
     (mv-nth 0
             (clear-clusterchain fat32-in-memory
                                 masked-current-cluster length)))
    (if
     (equal (mv-nth 1
                    (clear-clusterchain fat32-in-memory
                                        masked-current-cluster length))
            0)
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster
                                      length (cluster-size fat32-in-memory)))
      (make-list-ac
       (len
        (mv-nth
         0
         (fat32-build-index-list (effective-fat fat32-in-memory)
                                 masked-current-cluster
                                 length (cluster-size fat32-in-memory))))
       0 nil))
     (effective-fat fat32-in-memory))))
  :hints (("goal" :in-theory (enable clear-clusterchain)))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (not (d-e-directory-p d-e))
          (equal masked-current-cluster
                 (d-e-first-cluster d-e))
          (equal length (d-e-file-size d-e)))
     (equal
      (effective-fat
       (mv-nth 0
               (clear-clusterchain fat32-in-memory
                                   masked-current-cluster length)))
      (if
       (equal (mv-nth 1
                      (d-e-clusterchain fat32-in-memory d-e))
              0)
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e))
        (make-list-ac
         (len (mv-nth 0
                      (d-e-clusterchain fat32-in-memory d-e)))
         0 nil))
       (effective-fat fat32-in-memory))))
    :hints (("goal" :in-theory (enable d-e-clusterchain
                                       clear-clusterchain))))
   (:rewrite
    :corollary
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (d-e-directory-p d-e)
          (equal masked-current-cluster
                 (d-e-first-cluster d-e))
          (equal length *ms-max-dir-size*))
     (equal
      (effective-fat
       (mv-nth 0
               (clear-clusterchain fat32-in-memory
                                   masked-current-cluster length)))
      (if
       (equal (mv-nth 1
                      (d-e-clusterchain fat32-in-memory d-e))
              0)
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e))
        (make-list-ac
         (len (mv-nth 0
                      (d-e-clusterchain fat32-in-memory d-e)))
         0 nil))
       (effective-fat fat32-in-memory))))
    :hints (("goal" :in-theory (enable d-e-clusterchain
                                       clear-clusterchain))))))

;; This is needed, to avoid introducing unwanted fat32-build-index-list terms
;; into proofs.
(in-theory (disable (:rewrite effective-fat-of-clear-clusterchain . 1)))

(encapsulate
  ()

  (local
   (defthm
     get-clusterchain-contents-of-clear-clusterchain-lemma-1
     (implies
      (and
       (<= (+ 2 (count-of-clusters fat32-in-memory))
           first-cluster)
       (lofat-fs-p fat32-in-memory)
       (fat32-masked-entry-p first-cluster)
       (fat32-masked-entry-p masked-current-cluster)
       (not
        (intersectp-equal
         (mv-nth 0
                 (fat32-build-index-list
                  (effective-fat fat32-in-memory)
                  masked-current-cluster
                  length1 (cluster-size fat32-in-memory)))
         (mv-nth 0
                 (fat32-build-index-list
                  (effective-fat fat32-in-memory)
                  first-cluster length2 (cluster-size fat32-in-memory))))))
      (equal
       (get-clusterchain-contents
        (mv-nth 0
                (clear-clusterchain
                 fat32-in-memory first-cluster length2))
        masked-current-cluster length1)
       (get-clusterchain-contents
        fat32-in-memory masked-current-cluster length1)))
     :hints
     (("goal"
       :in-theory (e/d (intersectp-equal clear-clusterchain)
                       (intersectp-is-commutative))
       :expand
       ((fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster length2
                                (cluster-size fat32-in-memory))
        (get-clusterchain-contents
         fat32-in-memory first-cluster length2))
       :use
       (:instance
        (:rewrite intersectp-is-commutative)
        (y
         (mv-nth
          0
          (fat32-build-index-list (effective-fat fat32-in-memory)
                                  first-cluster length2
                                  (cluster-size fat32-in-memory))))
        (x (mv-nth 0
                   (fat32-build-index-list
                    (effective-fat fat32-in-memory)
                    masked-current-cluster length1
                    (cluster-size fat32-in-memory)))))))))

  (defthm
    get-clusterchain-contents-of-clear-clusterchain
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (fat32-masked-entry-p masked-current-cluster1)
      (fat32-masked-entry-p masked-current-cluster2)
      (<= *ms-first-data-cluster*
          masked-current-cluster1)
      (not
       (intersectp-equal
        (mv-nth '0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        masked-current-cluster1
                                        length1 (cluster-size fat32-in-memory)))
        (mv-nth '0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        masked-current-cluster2 length2
                                        (cluster-size fat32-in-memory))))))
     (equal
      (get-clusterchain-contents
       (mv-nth 0
               (clear-clusterchain fat32-in-memory
                                   masked-current-cluster1 length1))
       masked-current-cluster2 length2)
      (get-clusterchain-contents fat32-in-memory
                                 masked-current-cluster2 length2)))
    :hints (("goal" :cases ((<= (+ 2 (count-of-clusters fat32-in-memory))
                                masked-current-cluster1)))
            ("subgoal 2" :in-theory (enable clear-clusterchain)))))

(defthm
  d-e-clusterchain-contents-of-clear-clusterchain
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p masked-current-cluster)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        masked-current-cluster)
    (not
     (intersectp-equal
      (mv-nth '0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster
                                      length (cluster-size fat32-in-memory)))
      (mv-nth '0
              (d-e-clusterchain fat32-in-memory d-e)))))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       masked-current-cluster length))
           d-e)
          (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints (("goal" :in-theory (enable d-e-clusterchain
                                     d-e-clusterchain-contents))))

;; Free variables, are they necessary?
(defthm
  fati-of-clear-clusterchain
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (natp i)
        (fat32-masked-entry-p masked-current-cluster)
        (<= *ms-first-data-cluster*
            masked-current-cluster)
        (< masked-current-cluster
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (< i
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory))))
   (equal
    (fati
     i
     (mv-nth
      0
      (clear-clusterchain fat32-in-memory
                          masked-current-cluster length)))
    (if
     (and
      (equal
       (mv-nth 1
               (fat32-build-index-list
                (effective-fat fat32-in-memory)
                masked-current-cluster
                length (cluster-size fat32-in-memory)))
       0)
      (member-equal
       i
       (mv-nth 0
               (fat32-build-index-list
                (effective-fat fat32-in-memory)
                masked-current-cluster length
                (cluster-size fat32-in-memory)))))
     (fat32-update-lower-28 (fati i fat32-in-memory)
                            0)
     (fati i fat32-in-memory))))
  :hints
  (("goal"
    :in-theory (e/d (clear-clusterchain)
                    ((:rewrite nth-of-effective-fat)))
    :use
    ((:instance
      (:rewrite nth-of-effective-fat)
      (fat32-in-memory
       (stobj-set-indices-in-fa-table
        fat32-in-memory
        (mv-nth 0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 masked-current-cluster
                 length (cluster-size fat32-in-memory)))
        (make-list-ac
         (len
          (mv-nth 0
                  (fat32-build-index-list
                   (effective-fat fat32-in-memory)
                   masked-current-cluster
                   length (cluster-size fat32-in-memory))))
         0 nil)))
      (n i))
     (:instance (:rewrite nth-of-effective-fat)
                (fat32-in-memory fat32-in-memory)
                (n i)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (natp i)
          (fat32-masked-entry-p masked-current-cluster)
          (<= *ms-first-data-cluster*
              masked-current-cluster)
          (< masked-current-cluster
             (+ *ms-first-data-cluster*
                (count-of-clusters fat32-in-memory)))
          (< i
             (+ *ms-first-data-cluster*
                (count-of-clusters fat32-in-memory)))
          (not (d-e-directory-p d-e))
          (equal masked-current-cluster
                 (d-e-first-cluster d-e))
          (equal length (d-e-file-size d-e)))
     (equal
      (fati
       i
       (mv-nth
        0
        (clear-clusterchain fat32-in-memory
                            masked-current-cluster length)))
      (if
       (and
        (equal
         (mv-nth 1
                 (d-e-clusterchain fat32-in-memory d-e))
         0)
        (member-equal
         i
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory d-e))))
       (fat32-update-lower-28 (fati i fat32-in-memory)
                              0)
       (fati i fat32-in-memory))))
    :hints (("goal" :in-theory (enable d-e-clusterchain))))
   (:rewrite
    :corollary
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (natp i)
          (fat32-masked-entry-p masked-current-cluster)
          (<= *ms-first-data-cluster*
              masked-current-cluster)
          (< masked-current-cluster
             (+ *ms-first-data-cluster*
                (count-of-clusters fat32-in-memory)))
          (< i
             (+ *ms-first-data-cluster*
                (count-of-clusters fat32-in-memory)))
          (d-e-directory-p d-e)
          (equal masked-current-cluster
                 (d-e-first-cluster d-e))
          (equal length *ms-max-dir-size*))
     (equal
      (fati
       i
       (mv-nth
        0
        (clear-clusterchain fat32-in-memory
                            masked-current-cluster length)))
      (if
       (and
        (equal
         (mv-nth 1
                 (d-e-clusterchain fat32-in-memory d-e))
         0)
        (member-equal
         i
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory d-e))))
       (fat32-update-lower-28 (fati i fat32-in-memory)
                              0)
       (fati i fat32-in-memory))))
    :hints
    (("goal" :in-theory (enable d-e-clusterchain))))))

(in-theory (disable (:REWRITE FATI-OF-CLEAR-CLUSTERCHAIN . 1)))

;; This function calls place-contents with a meaningless value of d-e,
;; because we know that for a well-formed directory, the contents will be
;; non-empty and so there's no way we're going to be returned a d-e with
;; the first cluster set to 0 (with the mask, of course...) so we don't care
;; about the value of d-e returned.
(defund
  update-dir-contents
  (fat32-in-memory first-cluster dir-contents)
  (declare
   (xargs
    :stobjs fat32-in-memory
    :guard (and (lofat-fs-p fat32-in-memory)
                (fat32-masked-entry-p first-cluster)
                (<= *ms-first-data-cluster* first-cluster)
                (> (+ *ms-first-data-cluster*
                      (count-of-clusters fat32-in-memory))
                   first-cluster)
                (stringp dir-contents))
    :guard-debug t
    :guard-hints
    (("goal"
      :expand (fat32-build-index-list
               (effective-fat fat32-in-memory)
               first-cluster
               2097152 (cluster-size fat32-in-memory))
      :in-theory
      (disable unsigned-byte-p
       bounded-nat-listp-correctness-1
       (:linear non-negativity-of-car-of-last-when-nat-listp))
      :use
      ((:instance
        nat-listp-forward-to-integer-listp
        (x (mv-nth 0
                   (fat32-build-index-list
                    (effective-fat fat32-in-memory)
                    first-cluster *ms-max-dir-size*
                    (cluster-size fat32-in-memory)))))
       (:instance
        (:linear non-negativity-of-car-of-last-when-nat-listp)
        (l (mv-nth 0
                   (fat32-build-index-list
                    (effective-fat fat32-in-memory)
                    first-cluster *ms-max-dir-size*
                    (cluster-size fat32-in-memory))))))))))
  (b* (((mv clusterchain &)
        (get-clusterchain fat32-in-memory
                          first-cluster *ms-max-dir-size*))
       (last-value
        (fat32-entry-mask (fati (car (last clusterchain))
                                fat32-in-memory)))
       ((mv fat32-in-memory error-code)
        (clear-clusterchain fat32-in-memory
                            first-cluster *ms-max-dir-size*))
       ((unless (equal error-code 0))
        (mv fat32-in-memory *eio*))
       (fat32-in-memory
        (update-fati first-cluster
                     (fat32-update-lower-28
                      (fati first-cluster fat32-in-memory)
                      *ms-end-of-clusterchain*)
                     fat32-in-memory))
       ((unless (> (length dir-contents) 0))
        (mv fat32-in-memory 0))
       ((mv fat32-in-memory & error-code &)
        (place-contents fat32-in-memory (d-e-fix nil)
                        dir-contents 0 first-cluster))
       ((when (equal error-code 0))
        (mv fat32-in-memory 0))
       ;; Reversing the effects of clear-clusterchain
       (fat32-in-memory (stobj-set-indices-in-fa-table
                         fat32-in-memory clusterchain
                         (append (cdr clusterchain)
                                 (list last-value)))))
    (mv fat32-in-memory error-code)))

(defthm
  count-of-clusters-of-update-dir-contents
  (equal
   (count-of-clusters
    (mv-nth
     0
     (update-dir-contents fat32-in-memory
                          first-cluster dir-contents)))
   (count-of-clusters fat32-in-memory))
  :hints (("goal" :in-theory (enable update-dir-contents))))

(defthm
  cluster-size-of-update-dir-contents
  (equal
   (cluster-size
    (mv-nth
     0
     (update-dir-contents fat32-in-memory
                          first-cluster dir-contents)))
   (cluster-size fat32-in-memory))
  :hints (("goal" :in-theory (enable update-dir-contents))))

(defthm
  lofat-fs-p-of-update-dir-contents
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (fat32-masked-entry-p first-cluster)
        (<= *ms-first-data-cluster* first-cluster)
        (> (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory))
           first-cluster)
        (stringp dir-contents))
   (lofat-fs-p
    (mv-nth 0
            (update-dir-contents fat32-in-memory
                                 first-cluster dir-contents))))
  :hints (("goal" :in-theory (enable update-dir-contents
                                     clear-clusterchain-correctness-1))))

(defthm
  fat32-build-index-list-of-effective-fat-of-update-dir-contents
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (<= *ms-first-data-cluster* first-cluster)
    (stringp dir-contents)
    (fat32-masked-entry-p masked-current-cluster)
    (<= *ms-first-data-cluster*
        masked-current-cluster)
    (not
     (intersectp-equal
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster
                                      length (cluster-size fat32-in-memory)))
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster *ms-max-dir-size*
                                      (cluster-size fat32-in-memory)))))
    (equal
     (mv-nth 1
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     masked-current-cluster
                                     length (cluster-size fat32-in-memory)))
     0)
    (equal cluster-size (cluster-size fat32-in-memory)))
   (equal
    (fat32-build-index-list
     (effective-fat
      (mv-nth 0
              (update-dir-contents fat32-in-memory
                                   first-cluster dir-contents)))
     masked-current-cluster
     length cluster-size)
    (fat32-build-index-list (effective-fat fat32-in-memory)
                            masked-current-cluster
                            length cluster-size)))
  :hints
  (("goal"
    :in-theory (e/d (update-dir-contents intersectp-equal clear-clusterchain)
                    (intersectp-is-commutative intersect-with-subset))
    :expand
    ((fat32-build-index-list (effective-fat fat32-in-memory)
                             first-cluster *ms-max-dir-size*
                             (cluster-size fat32-in-memory))
     (get-clusterchain-contents fat32-in-memory first-cluster 2097152))
    :use
    (:instance
     (:rewrite intersectp-is-commutative)
     (y (mv-nth 0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        first-cluster 2097152
                                        (cluster-size fat32-in-memory))))
     (x (mv-nth 0
                (fat32-build-index-list (effective-fat fat32-in-memory)
                                        masked-current-cluster length
                                        (cluster-size fat32-in-memory))))))))

(defthm
  d-e-clusterchain-of-update-dir-contents
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (<= *ms-first-data-cluster* first-cluster)
    (stringp dir-contents)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (not
     (intersectp-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory d-e))
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster *ms-max-dir-size*
                                      (cluster-size fat32-in-memory)))))
    (equal (mv-nth 1
                   (d-e-clusterchain fat32-in-memory d-e))
           0))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (update-dir-contents fat32-in-memory
                                        first-cluster dir-contents))
           d-e)
          (d-e-clusterchain fat32-in-memory d-e)))
  :hints (("goal" :in-theory (enable d-e-clusterchain))))

(defthm
  max-entry-count-of-update-dir-contents
  (equal
   (max-entry-count (mv-nth 0
                            (update-dir-contents fat32-in-memory
                                                 first-cluster dir-contents)))
   (max-entry-count fat32-in-memory))
  :hints (("goal" :in-theory (enable update-dir-contents))))

(defthm
  pseudo-root-d-e-of-update-dir-contents
  (equal
   (pseudo-root-d-e
    (mv-nth 0
            (update-dir-contents fat32-in-memory
                                 first-cluster dir-contents)))
   (pseudo-root-d-e fat32-in-memory))
  :hints (("goal" :in-theory (enable update-dir-contents))))

(defthm
  update-dir-contents-correctness-1-lemma-1
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (<
     (+
      -1
      (count-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (fat32-build-index-list (effective-fat fat32-in-memory)
                                 first-cluster
                                 2097152 (cluster-size fat32-in-memory)))
        '(0))))
     (+ -1
        (len (make-clusters dir-contents
                            (cluster-size fat32-in-memory)))))
    (not
     (equal
      (count-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (fat32-build-index-list (effective-fat fat32-in-memory)
                                 first-cluster
                                 2097152 (cluster-size fat32-in-memory)))
        '(0)))
      (len (make-clusters dir-contents
                          (cluster-size fat32-in-memory)))))
    (equal
     (mv-nth 1
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster
                                     2097152 (cluster-size fat32-in-memory)))
     0)
    (not
     (consp
      (cdr
       (mv-nth 0
               (fat32-build-index-list (effective-fat fat32-in-memory)
                                       first-cluster 2097152
                                       (cluster-size fat32-in-memory)))))))
   (equal
    (stobj-set-indices-in-fa-table
     (update-fati
      first-cluster
      (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                             268435455)
      (mv-nth 0
              (clear-clusterchain fat32-in-memory first-cluster 2097152)))
     (mv-nth 0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster
                                     2097152 (cluster-size fat32-in-memory)))
     (list
      (fat32-entry-mask
       (fati
        (car (mv-nth 0
                     (fat32-build-index-list (effective-fat fat32-in-memory)
                                             first-cluster 2097152
                                             (cluster-size fat32-in-memory))))
        fat32-in-memory))))
    fat32-in-memory))
  :hints
  (("goal" :in-theory
    (e/d (clear-clusterchain stobj-set-indices-in-fa-table
                             fat32-update-lower-28-of-fat32-entry-mask)
         (get-clusterchain-contents-correctness-2))
    :expand (fat32-build-index-list (effective-fat fat32-in-memory)
                                    first-cluster 2097152
                                    (cluster-size fat32-in-memory)))))

(defthm
  update-dir-contents-correctness-1-lemma-4
  (implies
   (and (fat32-masked-entry-p first-cluster)
        (< first-cluster
           (+ 2 (count-of-clusters fat32-in-memory))))
   (equal
    (fati
     first-cluster
     (stobj-set-indices-in-fa-table
      fat32-in-memory
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster
                                      2097152 (cluster-size fat32-in-memory)))
      (make-list-ac
       (len (mv-nth 0
                    (fat32-build-index-list (effective-fat fat32-in-memory)
                                            first-cluster 2097152
                                            (cluster-size fat32-in-memory))))
       0 nil)))
    (nth
     first-cluster
     (effective-fat
      (stobj-set-indices-in-fa-table
       fat32-in-memory
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster
                                2097152 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len (mv-nth 0
                     (fat32-build-index-list (effective-fat fat32-in-memory)
                                             first-cluster 2097152
                                             (cluster-size fat32-in-memory))))
        0 nil))))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite nth-of-effective-fat))
    :use
    (:instance
     (:rewrite nth-of-effective-fat)
     (fat32-in-memory
      (stobj-set-indices-in-fa-table
       fat32-in-memory
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster
                                2097152 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len (mv-nth 0
                     (fat32-build-index-list (effective-fat fat32-in-memory)
                                             first-cluster 2097152
                                             (cluster-size fat32-in-memory))))
        0 nil)))
     (n first-cluster)))))

(defthm
  update-dir-contents-correctness-1-lemma-2
  (implies
   (and
    (equal
     (stobj-set-indices-in-fa-table
      (update-fati
       first-cluster
       (fat32-update-lower-28
        (fati
         first-cluster
         (stobj-set-indices-in-fa-table
          fat32-in-memory
          (mv-nth
           0
           (fat32-build-index-list (effective-fat fat32-in-memory)
                                   first-cluster
                                   2097152 (cluster-size fat32-in-memory)))
          (make-list-ac
           (len
            (cdr
             (mv-nth
              0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster 2097152
                                      (cluster-size fat32-in-memory)))))
           0 '(0))))
        268435455)
       (stobj-set-indices-in-fa-table
        fat32-in-memory
        (mv-nth
         0
         (fat32-build-index-list (effective-fat fat32-in-memory)
                                 first-cluster
                                 2097152 (cluster-size fat32-in-memory)))
        (make-list-ac
         (len
          (cdr
           (mv-nth 0
                   (fat32-build-index-list (effective-fat fat32-in-memory)
                                           first-cluster 2097152
                                           (cluster-size fat32-in-memory)))))
         0 '(0))))
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster
                                      2097152 (cluster-size fat32-in-memory)))
      (append
       (cdr (mv-nth 0
                    (fat32-build-index-list (effective-fat fat32-in-memory)
                                            first-cluster 2097152
                                            (cluster-size fat32-in-memory))))
       (list
        (fat32-entry-mask
         (fati
          (car
           (last
            (cdr
             (mv-nth
              0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster 2097152
                                      (cluster-size fat32-in-memory))))))
          fat32-in-memory)))))
     (stobj-set-indices-in-fa-table
      fat32-in-memory
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster
                                      2097152 (cluster-size fat32-in-memory)))
      (append
       (cdr (mv-nth 0
                    (fat32-build-index-list (effective-fat fat32-in-memory)
                                            first-cluster 2097152
                                            (cluster-size fat32-in-memory))))
       (list
        (fat32-entry-mask
         (fati
          (car
           (last
            (cdr
             (mv-nth
              0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster 2097152
                                      (cluster-size fat32-in-memory))))))
          fat32-in-memory))))))
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (< first-cluster
       (+ 2 (count-of-clusters fat32-in-memory)))
    (consp
     (cdr (mv-nth 0
                  (fat32-build-index-list (effective-fat fat32-in-memory)
                                          first-cluster 2097152
                                          (cluster-size fat32-in-memory))))))
   (equal
    (stobj-set-indices-in-fa-table
     (update-fati
      first-cluster
      (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                             268435455)
      (stobj-set-indices-in-fa-table
       fat32-in-memory
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster
                                2097152 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (cdr
          (mv-nth 0
                  (fat32-build-index-list (effective-fat fat32-in-memory)
                                          first-cluster 2097152
                                          (cluster-size fat32-in-memory)))))
        0 '(0))))
     (mv-nth 0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster
                                     2097152 (cluster-size fat32-in-memory)))
     (append
      (cdr (mv-nth 0
                   (fat32-build-index-list (effective-fat fat32-in-memory)
                                           first-cluster 2097152
                                           (cluster-size fat32-in-memory))))
      (list
       (fat32-entry-mask
        (fati
         (car
          (last
           (cdr
            (mv-nth
             0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster 2097152
                                     (cluster-size fat32-in-memory))))))
         fat32-in-memory)))))
    fat32-in-memory))
  :hints
  (("goal"
    :in-theory
    (disable (:rewrite fat32-update-lower-28-of-fat32-update-lower-28)
             (:rewrite clear-clusterchain-reversibility-lemma-2)
             nth-of-set-indices-in-fa-table-when-member
             (:rewrite stobj-set-indices-in-fa-table-correctness-1))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (mv-nth 0
               (fat32-build-index-list (effective-fat fat32-in-memory)
                                       first-cluster 2097152
                                       (cluster-size fat32-in-memory))))
      (fa-table (effective-fat fat32-in-memory))
      (n first-cluster))
     (:instance (:rewrite fat32-update-lower-28-of-fat32-update-lower-28)
                (masked-entry2 268435455)
                (masked-entry1 0)
                (entry (nth first-cluster
                            (effective-fat fat32-in-memory))))
     (:instance (:rewrite clear-clusterchain-reversibility-lemma-2)
                (length 2097152)
                (masked-current-cluster first-cluster)
                (fat32-in-memory fat32-in-memory))
     (:instance
      (:rewrite stobj-set-indices-in-fa-table-correctness-1)
      (value-list
       (make-list-ac
        (len (mv-nth 0
                     (fat32-build-index-list (effective-fat fat32-in-memory)
                                             first-cluster 2097152
                                             (cluster-size fat32-in-memory))))
        0 nil))
      (index-list
       (mv-nth 0
               (fat32-build-index-list (effective-fat fat32-in-memory)
                                       first-cluster 2097152
                                       (cluster-size fat32-in-memory))))
      (fat32-in-memory fat32-in-memory))))))

(defthm
  update-dir-contents-correctness-1-lemma-3
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (<= 2 first-cluster)
    (< first-cluster
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth 1
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster
                                     2097152 (cluster-size fat32-in-memory)))
     0)
    (consp
     (cdr (mv-nth 0
                  (fat32-build-index-list (effective-fat fat32-in-memory)
                                          first-cluster 2097152
                                          (cluster-size fat32-in-memory))))))
   (equal
    (stobj-set-indices-in-fa-table
     (update-fati
      first-cluster
      (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                             268435455)
      (mv-nth 0
              (clear-clusterchain fat32-in-memory first-cluster 2097152)))
     (mv-nth 0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster
                                     2097152 (cluster-size fat32-in-memory)))
     (append
      (cdr (mv-nth 0
                   (fat32-build-index-list (effective-fat fat32-in-memory)
                                           first-cluster 2097152
                                           (cluster-size fat32-in-memory))))
      (list
       (fat32-entry-mask
        (fati
         (car
          (last
           (cdr
            (mv-nth
             0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     first-cluster 2097152
                                     (cluster-size fat32-in-memory))))))
         fat32-in-memory)))))
    fat32-in-memory))
  :hints
  (("goal"
    :in-theory
    (e/d
     (clear-clusterchain)
     (get-clusterchain-contents-correctness-2
      (:rewrite
       stobj-set-indices-in-fa-table-of-stobj-set-indices-in-fa-table-lemma-3)))
    :use
    (:instance
     (:rewrite
      stobj-set-indices-in-fa-table-of-stobj-set-indices-in-fa-table-lemma-3)
     (value-list
      (append
       (cdr (mv-nth 0
                    (fat32-build-index-list (effective-fat fat32-in-memory)
                                            first-cluster 2097152
                                            (cluster-size fat32-in-memory))))
       (list
        (fat32-entry-mask
         (fati
          (car
           (last
            (cdr
             (mv-nth
              0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster 2097152
                                      (cluster-size fat32-in-memory))))))
          fat32-in-memory)))))
     (index-list
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster 2097152
                                      (cluster-size fat32-in-memory))))
     (v 268435455)
     (fat32-in-memory
      (stobj-set-indices-in-fa-table
       fat32-in-memory
       (mv-nth
        0
        (fat32-build-index-list (effective-fat fat32-in-memory)
                                first-cluster
                                2097152 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (cdr
          (mv-nth 0
                  (fat32-build-index-list (effective-fat fat32-in-memory)
                                          first-cluster 2097152
                                          (cluster-size fat32-in-memory)))))
        0 '(0))))
     (i first-cluster)))))

(defthmd
  update-dir-contents-correctness-1
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (fat32-masked-entry-p first-cluster)
        (<= *ms-first-data-cluster* first-cluster)
        (> (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory))
           first-cluster)
        (not (equal (mv-nth 1
                            (update-dir-contents fat32-in-memory
                                                 first-cluster dir-contents))
                    0)))
   (equal (mv-nth 0
                  (update-dir-contents fat32-in-memory
                                       first-cluster dir-contents))
          fat32-in-memory))
  :hints
  (("goal"
    :in-theory (e/d (update-dir-contents clear-clusterchain-correctness-1
                                         clear-clusterchain-correctness-3
                                         place-contents-correctness-1))
    :expand
    (len (mv-nth '0
                 (fat32-build-index-list (effective-fat fat32-in-memory)
                                         first-cluster '2097152
                                         (cluster-size fat32-in-memory)))))))

(defthm natp-of-update-dir-contents
  (natp (mv-nth 1
                (update-dir-contents fat32-in-memory
                                     first-cluster dir-contents)))
  :rule-classes :type-prescription
  :hints (("goal" :in-theory (enable update-dir-contents))))

(defun
    delete-d-e (d-e-list filename)
  (declare (xargs :guard (and (fat32-filename-p filename)
                              (d-e-list-p d-e-list))
                  :guard-debug t))
  (b*
      (((when (atom d-e-list)) nil)
       (d-e (car d-e-list))
       ((when (equal (d-e-filename d-e)
                     filename))
        (delete-d-e (cdr d-e-list) filename)))
    (list* (d-e-fix d-e)
           (delete-d-e (cdr d-e-list)
                           filename))))

(defthm d-e-list-p-of-delete-d-e
  (d-e-list-p (delete-d-e d-e-list filename)))

(defthm len-of-delete-d-e
  (<= (len (delete-d-e d-e-list filename))
      (len d-e-list))
  :rule-classes :linear)

(defthm
  find-d-e-of-delete-d-e
  (implies
   (useful-d-e-list-p d-e-list)
   (equal (find-d-e (delete-d-e d-e-list filename1)
                        filename2)
          (if (equal filename1 filename2)
              (mv (d-e-fix nil) *enoent*)
            (find-d-e d-e-list filename2))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (useful-d-e-list-p d-e-filename len-when-d-e-p
                            nth-when->=-n-len-l)
     ((:rewrite d-e-filename-of-d-e-set-filename)
      (:rewrite string=>nats-of-nats=>string)
      (:rewrite nth-update-nth)))
    :induct (delete-d-e d-e-list filename1))
   ("subgoal *1/2"
    :use
    ((:instance
      (:rewrite d-e-filename-of-d-e-set-filename)
      (filename
       (nats=>string
        (update-nth
         0 0
         (string=>nats (d-e-filename (car d-e-list))))))
      (d-e (car d-e-list)))
     (:instance
      (:rewrite string=>nats-of-nats=>string)
      (nats
       (update-nth
        0 0
        (string=>nats
         (nats=>string (take 11 (car d-e-list)))))))
     (:instance (:rewrite string=>nats-of-nats=>string)
                (nats (take 11 (car d-e-list))))
     (:instance (:rewrite nth-update-nth)
                (l (take 11 (car d-e-list)))
                (val 0)
                (n 0)
                (m 0))))))

(defthm
  useful-d-e-list-p-of-delete-d-e
  (implies (useful-d-e-list-p d-e-list)
           (useful-d-e-list-p (delete-d-e d-e-list filename)))
  :hints (("goal" :in-theory (enable useful-d-e-list-p))))

(defthm
  delete-d-e-correctness-1
  (implies
   (not (equal (mv-nth 1 (find-d-e d-e-list filename))
               0))
   (equal (delete-d-e d-e-list filename)
          (d-e-list-fix d-e-list))))

(defthm
  hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3
  (implies
   (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
   (equal (mv-nth 1 (find-d-e d-e-list filename))
          0)))

(encapsulate
  ()

  (local
   (defthmd
     hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-1
     (implies
      (and (useful-d-e-list-p d-e-list)
           (equal (mv-nth 3
                          (lofat-to-hifat-helper fat32-in-memory
                                                 d-e-list entry-limit))
                  0)
           (equal (mv-nth 1 (find-d-e d-e-list filename))
                  0)
           (not (d-e-directory-p (mv-nth 0
                                             (find-d-e d-e-list filename)))))
      (<
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       (delete-d-e d-e-list filename)
                                       entry-limit)))
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))))
     :hints
     (("goal" :in-theory
       (e/d (lofat-to-hifat-helper hifat-entry-count
                                   lofat-to-hifat-helper-correctness-4)
            ((:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
             (:rewrite nth-of-effective-fat)
             (:definition assoc-equal)))))
     :rule-classes :linear))

  ;; This induction proof is becoming a sort of bag to hold many things at
  ;; once... because it relieves the
  ;; (equal (mv-nth 3 (lofat-to-hifat-helper ...)) 0) free-variable related
  ;; hypothesis that's needed by some of these other things.
  (local
   (defthmd
     hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-2
     (implies
      (and (useful-d-e-list-p d-e-list)
           (equal (mv-nth 3
                          (lofat-to-hifat-helper fat32-in-memory
                                                 d-e-list entry-limit))
                  0)
           (d-e-directory-p (mv-nth 0
                                        (find-d-e d-e-list filename)))
           (not-intersectp-list
            x
            (mv-nth
             2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))))
      (and
       (<
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory
                                        (delete-d-e d-e-list filename)
                                        entry-limit)))
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit)))
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename)))))
            entry-limit)))))
       (equal
        (mv-nth
         3
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename)))))
          entry-limit))
        0)
       (not-intersectp-list
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth 0
                  (find-d-e d-e-list filename))))
        (mv-nth
         2
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth 0
                     (find-d-e d-e-list filename)))))
          entry-limit)))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth 0
                     (find-d-e d-e-list filename)))))
          entry-limit)))))
     :hints
     (("goal" :in-theory
       (e/d (lofat-to-hifat-helper hifat-entry-count useful-d-e-list-p
                                   lofat-to-hifat-helper-correctness-4)
            ((:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
             (:rewrite nth-of-effective-fat)
             (:definition assoc-equal)
             (:REWRITE SUBSETP-CAR-MEMBER)
             (:REWRITE D-E-LIST-P-OF-CDR-WHEN-D-E-LIST-P)
             (:REWRITE ASSOC-OF-CAR-WHEN-MEMBER)
             (:REWRITE HIFAT-TO-LOFAT-INVERSION-LEMMA-2)
             (:REWRITE USEFUL-D-E-LIST-P-OF-CDR)
             (:REWRITE M1-FILE-P-OF-CDAR-WHEN-M1-FILE-ALIST-P)
             (:REWRITE TAKE-OF-LEN-FREE)
             (:REWRITE NATS=>CHARS-OF-TAKE)))))))

  (defthm
    hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename))))
     (<
      (hifat-entry-count
       (mv-nth 0
               (lofat-to-hifat-helper fat32-in-memory
                                      (delete-d-e d-e-list filename)
                                      entry-limit)))
      (-
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename)))))
          entry-limit))))))
    :hints
    (("goal" :use
      (:instance
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-2
       (x nil))))
    :rule-classes :linear)

  (defthm
    d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-1
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename))))
     (not-intersectp-list
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth 0
                (find-d-e d-e-list filename))))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth 0
                   (find-d-e d-e-list filename)))))
        entry-limit))))
    :hints
    (("Goal" :use
      (:instance
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-2
       (x nil)))))

  (defthm
    d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-2
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename)))
          (not-intersectp-list
           x
           (mv-nth
            2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))
     (not-intersectp-list
      x
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth 0
                   (find-d-e d-e-list filename)))))
        entry-limit))))
    :hints
    (("Goal" :use
      hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-2))))

;; Care should be taken before choosing to change this function's
;; definition. It has the very useful property that the length of the directory
;; contents remain the same, which means no reallocation is required.
(defund
  clear-d-e (dir-contents filename)
  (declare
   (xargs :measure (len dir-contents)
          :guard (and (fat32-filename-p filename)
                      (unsigned-byte-listp 8 dir-contents))
          :guard-hints (("goal" :in-theory (enable d-e-p)))
          :guard-debug t))
  (b*
      (((when (< (len dir-contents)
                 *ms-d-e-length*))
        dir-contents)
       (d-e (take *ms-d-e-length* dir-contents))
       ((when (equal (char (d-e-filename d-e) 0)
                     (code-char 0)))
        dir-contents)
       ((when (equal (d-e-filename d-e)
                     filename))
        (append
         (d-e-set-filename
          d-e
          (nats=>string
           (update-nth 0 229
                       (string=>nats (d-e-filename d-e)))))
         (clear-d-e (nthcdr *ms-d-e-length* dir-contents)
                        filename))))
    (append
     d-e
     (clear-d-e (nthcdr *ms-d-e-length* dir-contents)
                    filename))))

(defthm
  len-of-clear-d-e
  (equal (len (clear-d-e dir-contents filename))
         (len dir-contents))
  :hints (("goal" :in-theory (enable len-when-d-e-p clear-d-e))))

(defthm
  unsigned-byte-listp-of-clear-d-e
  (implies
   (unsigned-byte-listp 8 dir-contents)
   (unsigned-byte-listp 8
                        (clear-d-e dir-contents filename)))
  :hints (("goal" :in-theory (enable clear-d-e))))

(defthm
  make-d-e-list-of-clear-d-e-lemma-1
  (implies
   (equal (char filename 0)
          (code-char #xe5))
   (useless-d-e-p (d-e-set-filename d-e filename)))
  :hints (("goal" :in-theory (enable useless-d-e-p))))

(defthm
  make-d-e-list-of-clear-d-e
  (equal
   (make-d-e-list (nats=>string (clear-d-e (string=>nats dir-contents)
                                                   filename)))
   (delete-d-e (make-d-e-list dir-contents)
                   filename))
  :hints (("goal" :in-theory (enable make-d-e-list d-e-fix
                                     clear-d-e
                                     len-when-d-e-p string=>nats
                                     nats=>string)
           :induct (make-d-e-list dir-contents)
           :expand (clear-d-e (chars=>nats (explode dir-contents))
                                  filename))))

(encapsulate
  ()

  (local (include-book "rtl/rel9/arithmetic/top" :dir :system))

  (make-event
   `(defthm
      make-d-e-list-of-append-3
      (implies
       (equal (mod (len (explode dir-contents))
                   *ms-d-e-length*)
              0)
       (equal
        (make-d-e-list
         (implode (append (nats=>chars (clear-d-e (string=>nats dir-contents)
                                                      filename))
                          (make-list-ac n ,(code-char 0) nil))))
        (delete-d-e (make-d-e-list dir-contents)
                        filename)))
      :hints
      (("goal" :induct (make-d-e-list dir-contents)
        :in-theory (e/d (make-d-e-list d-e-fix clear-d-e
                                           string=>nats))
        :expand ((make-d-e-list dir-contents)
                 (clear-d-e (chars=>nats (explode dir-contents))
                                filename)))))))

(defthm
  lofat-to-hifat-helper-of-clear-clusterchain
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p masked-current-cluster)
    (<= *ms-first-data-cluster*
        masked-current-cluster)
    (< masked-current-cluster
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (fat32-build-index-list
              (effective-fat fat32-in-memory)
              masked-current-cluster
              length (cluster-size fat32-in-memory)))
     (mv-nth
      2
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (clear-clusterchain fat32-in-memory
                                 masked-current-cluster length))
     d-e-list entry-limit)
    (lofat-to-hifat-helper fat32-in-memory
                           d-e-list entry-limit)))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper clear-clusterchain
                            lofat-to-hifat-helper-of-stobj-set-indices-in-fa-table)
     ((:rewrite nth-of-effective-fat))))))

;; We're going to have to add a weird stipulation here about the length of a
;; directory file's contents being more than 0 (which is true, because dot and
;; dotdot entries have to be everywhere other than the root.)
(defun
    lofat-remove-file
    (fat32-in-memory root-d-e path)
  (declare
   (xargs
    :guard (and (lofat-fs-p fat32-in-memory)
                (d-e-p root-d-e)
                (>= (d-e-first-cluster root-d-e) *ms-first-data-cluster*)
                (< (d-e-first-cluster root-d-e)
                   (+ *ms-first-data-cluster*
                      (count-of-clusters fat32-in-memory)))
                (fat32-filename-list-p path))
    :measure (len path)
    :stobjs fat32-in-memory))
  (b*
      (((unless (consp path))
        (mv fat32-in-memory *enoent*))
       ;; Design choice - calls which ask for the entire root directory to be
       ;; affected will fail.
       (name (mbe :logic (fat32-filename-fix (car path))
                  :exec (car path)))
       ((mv dir-contents &)
        (d-e-clusterchain-contents fat32-in-memory root-d-e))
       (d-e-list
        (make-d-e-list dir-contents))
       ((mv d-e error-code)
        (find-d-e d-e-list name))
       ;; If it's not there, it can't be removed
       ((unless (equal error-code 0))
        (mv fat32-in-memory *enoent*))
       ;; ENOTDIR - can't delete anything that supposedly exists inside a
       ;; regular file.
       ((when (and (consp (cdr path)) (not (d-e-directory-p d-e))))
        (mv fat32-in-memory *enotdir*))
       (first-cluster (d-e-first-cluster d-e))
       ((when
            (and
             (or (< first-cluster *ms-first-data-cluster*)
                 (<= (+ *ms-first-data-cluster*
                        (count-of-clusters fat32-in-memory))
                     first-cluster))
             (consp (cdr path))))
            (mv fat32-in-memory *eio*))
       ((when (consp (cdr path)))
        ;; Recursion
        (lofat-remove-file
         fat32-in-memory
         d-e
         (cdr path)))
       ;; After these conditionals, the only remaining possibility is that
       ;; (cdr path) is an atom, which means we need to delete a file or
       ;; a(n empty) directory.
       ((mv fat32-in-memory error-code)
        (update-dir-contents fat32-in-memory
                             (d-e-first-cluster root-d-e)
                             (nats=>string (clear-d-e (string=>nats
                                                           dir-contents)
                                                          name))))
       ((unless (equal error-code 0))
        (mv fat32-in-memory error-code))
       (length (if (d-e-directory-p d-e)
                   *ms-max-dir-size*
                 (d-e-file-size d-e)))
       ((mv fat32-in-memory &)
        (if
            (or (< first-cluster *ms-first-data-cluster*)
                (<= (+ *ms-first-data-cluster*
                       (count-of-clusters fat32-in-memory))
                    first-cluster))
            (mv fat32-in-memory 0)
          (clear-clusterchain
           fat32-in-memory
           first-cluster
           length))))
    (mv fat32-in-memory 0)))

(defthm
  lofat-fs-p-of-lofat-remove-file
  (implies (and (lofat-fs-p fat32-in-memory)
                (d-e-p root-d-e)
                (>= (d-e-first-cluster root-d-e)
                    *ms-first-data-cluster*)
                (< (d-e-first-cluster root-d-e)
                   (+ *ms-first-data-cluster*
                      (count-of-clusters fat32-in-memory))))
           (lofat-fs-p (mv-nth 0
                               (lofat-remove-file fat32-in-memory
                                                  root-d-e path)))))

(defthm
  max-entry-count-of-lofat-remove-file
  (equal
   (max-entry-count
    (mv-nth 0
            (lofat-remove-file fat32-in-memory root-d-e path)))
   (max-entry-count fat32-in-memory)))

(defthm
  pseudo-root-d-e-of-lofat-remove-file
  (equal
   (pseudo-root-d-e
    (mv-nth
     0
     (lofat-remove-file fat32-in-memory root-d-e path)))
   (pseudo-root-d-e fat32-in-memory)))

(defthm
  lofat-remove-file-correctness-2
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p root-d-e)
    (>= (d-e-first-cluster root-d-e)
        *ms-first-data-cluster*)
    (< (d-e-first-cluster root-d-e)
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (not
     (equal (mv-nth 1
                    (lofat-remove-file fat32-in-memory root-d-e path))
            0)))
   (equal (mv-nth 0
                  (lofat-remove-file fat32-in-memory root-d-e path))
          fat32-in-memory))
  :hints (("goal" :in-theory (enable update-dir-contents-correctness-1
                                     clear-clusterchain-correctness-3))))

(defthm
  get-clusterchain-contents-of-update-dir-contents-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (stringp dir-contents)
    (fat32-masked-entry-p masked-current-cluster)
    (not (< masked-current-cluster '2))
    (fat32-masked-entry-p first-cluster)
    (<= 2 first-cluster)
    (not
     (intersectp-equal
      (mv-nth '0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      first-cluster '2097152
                                      (cluster-size fat32-in-memory)))
      (mv-nth '0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster length
                                      (cluster-size fat32-in-memory)))))
    (equal (mv-nth '1
                   (get-clusterchain-contents fat32-in-memory
                                              masked-current-cluster length))
           '0))
   (equal
    (get-clusterchain-contents
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  first-cluster dir-contents))
     masked-current-cluster length)
    (get-clusterchain-contents fat32-in-memory
                               masked-current-cluster length)))
  :hints
  (("goal"
    :in-theory (e/d (update-dir-contents clear-clusterchain-correctness-1)
                    ((:rewrite intersectp-is-commutative)))
    :expand
    ((fat32-build-index-list (effective-fat fat32-in-memory)
                             first-cluster '2097152
                             (cluster-size fat32-in-memory))
     (intersectp-equal
      nil
      (mv-nth 0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster length
                                      (cluster-size fat32-in-memory))))
     (:free
      (y)
      (intersectp-equal
       (cons first-cluster y)
       (mv-nth 0
               (fat32-build-index-list (effective-fat fat32-in-memory)
                                       masked-current-cluster length
                                       (cluster-size fat32-in-memory)))))
     (get-clusterchain-contents fat32-in-memory first-cluster 2097152))
    :use
    ((:instance
      (:rewrite intersectp-is-commutative)
      (y
       (cons
        first-cluster
        (mv-nth 0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 (fat32-entry-mask (fati first-cluster fat32-in-memory))
                 (+ 2097152
                    (- (cluster-size fat32-in-memory)))
                 (cluster-size fat32-in-memory)))))
      (x (mv-nth 0
                 (fat32-build-index-list (effective-fat fat32-in-memory)
                                         masked-current-cluster length
                                         (cluster-size fat32-in-memory)))))
     (:instance
      (:rewrite intersectp-is-commutative)
      (y (cons first-cluster nil))
      (x
       (mv-nth 0
               (fat32-build-index-list (effective-fat fat32-in-memory)
                                       masked-current-cluster length
                                       (cluster-size fat32-in-memory)))))))))

(defthm
  get-clusterchain-contents-of-update-dir-contents-coincident-lemma-1
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (< 0 (len (explode dir-contents))))
   (not (< (binary-+ '-1
                     (len (make-clusters dir-contents
                                         (cluster-size fat32-in-memory))))
           '0))))

(defthmd
  get-clusterchain-contents-of-update-dir-contents-coincident-lemma-3
  (implies
   (<
    (+
     (count-free-clusters (effective-fat fat32-in-memory))
     (len
      (mv-nth
       0
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        (fat32-entry-mask (fati first-cluster fat32-in-memory))
        (+ 2097152
           (- (cluster-size fat32-in-memory)))
        (cluster-size fat32-in-memory)))))
    (+ -1
       (len (make-clusters dir-contents
                           (cluster-size fat32-in-memory)))))
   (not
    (equal
     (binary-+
      '1
      (binary-+
       (count-free-clusters (effective-fat fat32-in-memory))
       (len
        (mv-nth
         '0
         (fat32-build-index-list
          (effective-fat fat32-in-memory)
          (fat32-entry-mask
           (fati first-cluster fat32-in-memory))
          (binary-+ '2097152
                    (unary-- (cluster-size fat32-in-memory)))
          (cluster-size fat32-in-memory))))))
     (len (make-clusters dir-contents
                         (cluster-size fat32-in-memory)))))))

(defthmd
  get-clusterchain-contents-of-update-dir-contents-coincident-lemma-4
  (implies
   (and (integerp first-cluster)
        (or (< first-cluster *ms-first-data-cluster*)
            (>= first-cluster
                (+ *ms-first-data-cluster*
                   (count-of-clusters fat32-in-memory)))))
   (not
    (equal
     (mv-nth
      1
      (get-clusterchain-contents fat32-in-memory first-cluster 2097152))
     0)))
  :hints (("goal" :in-theory (enable nfix)
           :expand (get-clusterchain-contents fat32-in-memory
                                              first-cluster 2097152))))
(defthm
  get-clusterchain-contents-of-update-dir-contents-coincident-lemma-5
  (implies
   (and
    (equal
     (mv-nth
      0
      (place-contents
       (update-fati
        first-cluster
        (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                               268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory first-cluster 2097152)))
       '(0 0 0 0 0 0 0 0 0 0 0 0
           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
       dir-contents 0 first-cluster))
     fat32-in-memory)
    (<= 2 first-cluster)
    (< first-cluster
       (+ 2 (count-of-clusters fat32-in-memory)))
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (stringp dir-contents)
    (< 0 (len (explode dir-contents)))
    (<= (len (explode dir-contents))
        2097152)
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati
        first-cluster
        (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                               268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory first-cluster 2097152)))
       '(0 0 0 0 0 0 0 0 0 0 0 0
           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
       dir-contents 0 first-cluster))
     0))
   (equal
    (get-clusterchain-contents fat32-in-memory first-cluster 2097152)
    (mv
     (implode
      (append
       (explode dir-contents)
       (make-list-ac
        (+ (- (len (explode dir-contents)))
           (* (cluster-size fat32-in-memory)
              (len (make-clusters dir-contents
                                  (cluster-size fat32-in-memory)))))
        (code-char 0)
        nil)))
     0)))
  :hints
  (("goal"
    :in-theory
    (e/d
     (update-dir-contents
      get-clusterchain-contents-of-update-dir-contents-coincident-lemma-3
      (:linear hifat-to-lofat-inversion-lemma-16))
     ((:rewrite nth-of-set-indices-in-fa-table-when-member)
      (:rewrite get-clusterchain-contents-of-place-contents-coincident)))
    :use
    ((:instance
      (:rewrite get-clusterchain-contents-of-place-contents-coincident)
      (length *ms-max-dir-size*)
      (file-length 0)
      (contents dir-contents)
      (d-e (d-e-fix nil))
      (fat32-in-memory
       (update-fati
        first-cluster
        (fat32-update-lower-28 (fati first-cluster fat32-in-memory)
                               268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    first-cluster *ms-max-dir-size*)))))))))

;; Hypotheses are minimal.
(defthm
  get-clusterchain-contents-of-update-dir-contents-coincident
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (stringp dir-contents)
    (< 0 (len (explode dir-contents)))
    (<= (len (explode dir-contents))
        *ms-max-dir-size*)
    (equal
     (mv-nth 1
             (get-clusterchain-contents fat32-in-memory
                                        first-cluster *ms-max-dir-size*))
     0))
   (equal
    (get-clusterchain-contents
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  first-cluster dir-contents))
     first-cluster *ms-max-dir-size*)
    (if
     (equal (mv-nth 1
                    (update-dir-contents fat32-in-memory
                                         first-cluster dir-contents))
            0)
     (mv
      (implode
       (append
        (explode dir-contents)
        (make-list-ac
         (+ (- (len (explode dir-contents)))
            (* (cluster-size fat32-in-memory)
               (len (make-clusters dir-contents
                                   (cluster-size fat32-in-memory)))))
         (code-char 0)
         nil)))
      0)
     (get-clusterchain-contents fat32-in-memory
                                first-cluster *ms-max-dir-size*))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (update-dir-contents
      get-clusterchain-contents-of-update-dir-contents-coincident-lemma-3
      (:linear hifat-to-lofat-inversion-lemma-16)
      (:rewrite fati-of-clear-clusterchain . 1))
     ((:rewrite nth-of-set-indices-in-fa-table-when-member)))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (cons
        first-cluster
        (mv-nth 0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 (fat32-entry-mask (fati first-cluster fat32-in-memory))
                 (+ 2097152
                    (- (cluster-size fat32-in-memory)))
                 (cluster-size fat32-in-memory)))))
      (fa-table (effective-fat fat32-in-memory))
      (n first-cluster))
     (:rewrite update-dir-contents-correctness-1)
     get-clusterchain-contents-of-update-dir-contents-coincident-lemma-4))))

(defthm
  d-e-clusterchain-contents-of-update-dir-contents-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (stringp dir-contents)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (fat32-masked-entry-p first-cluster)
    (<= 2 first-cluster)
    (not (intersectp-equal
          (mv-nth '0
                  (fat32-build-index-list (effective-fat fat32-in-memory)
                                          first-cluster '2097152
                                          (cluster-size fat32-in-memory)))
          (mv-nth '0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (equal (mv-nth '1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           '0))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (update-dir-contents fat32-in-memory
                                        first-cluster dir-contents))
           d-e)
          (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints (("goal" :in-theory (enable d-e-clusterchain
                                     d-e-clusterchain-contents))))

;; Hypotheses are minimal.
(defthm
  d-e-clusterchain-contents-of-update-dir-contents-coincident
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (< 0 (len (explode dir-contents)))
    (<= (len (explode dir-contents))
        *ms-max-dir-size*)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal (d-e-first-cluster d-e)
           first-cluster)
    (d-e-directory-p d-e))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  first-cluster dir-contents))
     d-e)
    (if
        (equal (mv-nth 1
                       (update-dir-contents fat32-in-memory
                                            first-cluster dir-contents))
               0)
        (mv
         (implode
          (append
           (explode dir-contents)
           (make-list-ac
            (+ (- (len (explode dir-contents)))
               (* (cluster-size fat32-in-memory)
                  (len (make-clusters dir-contents
                                      (cluster-size fat32-in-memory)))))
            (code-char 0)
            nil)))
         0)
      (d-e-clusterchain-contents
       fat32-in-memory
       d-e))))
  :hints
  (("goal" :in-theory
    (e/d (d-e-clusterchain-contents)
         (get-clusterchain-contents-of-update-dir-contents-coincident))
    :use get-clusterchain-contents-of-update-dir-contents-coincident)))

(defthm
  lofat-to-hifat-helper-of-update-dir-contents
  (implies
   (and (useful-d-e-list-p d-e-list)
        (lofat-fs-p fat32-in-memory)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (fat32-masked-entry-p first-cluster)
        (<= *ms-first-data-cluster* first-cluster)
        (stringp dir-contents)
        (not-intersectp-list
         (mv-nth 0
                 (fat32-build-index-list (effective-fat fat32-in-memory)
                                         first-cluster *ms-max-dir-size*
                                         (cluster-size fat32-in-memory)))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
   (equal (lofat-to-hifat-helper
           (mv-nth 0
                   (update-dir-contents fat32-in-memory
                                        first-cluster dir-contents))
           d-e-list entry-limit)
          (lofat-to-hifat-helper fat32-in-memory
                                 d-e-list entry-limit)))
  :hints (("goal" :in-theory (enable lofat-to-hifat-helper
                                     not-intersectp-list)
           :induct (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-6
  (implies
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (string=>nats (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (+
       -2 entry-limit
       (-
        (hifat-entry-count
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (string=>nats (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory (car d-e-list)))))
           (+ -1 entry-limit))))))))
    0)
   (equal
    (lofat-to-hifat-helper
     fat32-in-memory
     (make-d-e-list
      (string=>nats (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e (cdr d-e-list)
                                                   filename))))))
     (+ -1 entry-limit))
    (lofat-to-hifat-helper
     fat32-in-memory
     (make-d-e-list
      (string=>nats (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e (cdr d-e-list)
                                                   filename))))))
     (+
      -2 entry-limit
      (-
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory (car d-e-list)))))
          (+ -1 entry-limit)))))))))
  :hints
  (("goal"
    :in-theory (e/d (nfix)
                    ((:linear lofat-to-hifat-helper-correctness-3)))
    :use
    ((:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit1
       (+
        -2 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit)))))))
      (entry-limit2 (+ -1 entry-limit))
      (d-e-list
       (make-d-e-list
        (string=>nats (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory
                               (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename)))))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:linear lofat-to-hifat-helper-correctness-3)
      (entry-limit
       (+
        -2 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit)))))))
      (d-e-list
       (make-d-e-list
        (string=>nats (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory
                               (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename)))))))
      (fat32-in-memory fat32-in-memory))))))

(defthmd
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-8
  (implies
   (and
    (not (natp entry-limit))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e d-e-list filename)))))
   (not (equal
         (mv-nth
          3
          (lofat-to-hifat-helper
           fat32-in-memory d-e-list entry-limit))
         0)))
  :hints
  (("goal"
    :expand
    (lofat-to-hifat-helper
     fat32-in-memory
     d-e-list
     entry-limit))))

;; Slightly better version of
;; d-e-clusterchain-contents-of-update-dir-contents-disjoint.
(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-3
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (stringp dir-contents)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (<= 2 (d-e-first-cluster root-d-e))
    (case-split
     (not (intersectp-equal
           (mv-nth '0
                   (d-e-clusterchain fat32-in-memory root-d-e))
           (mv-nth '0
                   (d-e-clusterchain fat32-in-memory d-e)))))
    (equal (mv-nth '1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           '0))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  (d-e-first-cluster root-d-e)
                                  dir-contents))
     d-e)
    (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints
  (("goal"
    :in-theory
    (e/d (d-e-clusterchain)
         (d-e-clusterchain-contents-of-update-dir-contents-disjoint))
    :use
    (:instance d-e-clusterchain-contents-of-update-dir-contents-disjoint
               (first-cluster (d-e-first-cluster root-d-e))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-9
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e1)
        (d-e-directory-p d-e1)
        (d-e-p d-e2)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e1))
        (not (intersectp-equal
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e1))
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e2)))))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e1)
                                       *ms-max-dir-size*))
           d-e2)
          (d-e-clusterchain-contents fat32-in-memory d-e2)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (d-e-clusterchain-contents-of-clear-clusterchain))
    :use (:instance d-e-clusterchain-contents-of-clear-clusterchain
                    (d-e d-e2)
                    (masked-current-cluster (d-e-first-cluster d-e1))
                    (length *ms-max-dir-size*)))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-10
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e1)
        (not (d-e-directory-p d-e1))
        (d-e-p d-e2)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e1))
        (not (intersectp-equal
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e1))
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e2)))))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e1)
                                       (d-e-file-size d-e1)))
           d-e2)
          (d-e-clusterchain-contents fat32-in-memory d-e2)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (d-e-clusterchain-contents-of-clear-clusterchain))
    :use (:instance d-e-clusterchain-contents-of-clear-clusterchain
                    (d-e d-e2)
                    (masked-current-cluster (d-e-first-cluster d-e1))
                    (length (d-e-file-size d-e1))))))

;; Slightly better version of d-e-clusterchain-of-update-dir-contents.
(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-11
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (stringp dir-contents)
    (d-e-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (<= 2 (d-e-first-cluster root-d-e))
    (not (intersectp-equal
          (mv-nth '0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth '0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (equal (mv-nth '1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           '0))
   (equal
    (d-e-clusterchain
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  (d-e-first-cluster root-d-e)
                                  dir-contents))
     d-e)
    (d-e-clusterchain fat32-in-memory d-e)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain d-e-clusterchain-contents)
                    (d-e-clusterchain-of-update-dir-contents))
    :use (:instance d-e-clusterchain-of-update-dir-contents
                    (first-cluster (d-e-first-cluster root-d-e))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-4
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (>=
     (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
     *ms-first-data-cluster*)
    (> (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory))
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename)))))
   (and
    (equal (mv-nth 1
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename))))
           0)
    (no-duplicatesp-equal
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))))
  :hints
  (("goal" :in-theory
    (e/d (lofat-to-hifat-helper)
         (nth-of-effective-fat (:definition no-duplicatesp-equal))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-5
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-directory-p (mv-nth 0
                                     (find-d-e d-e-list filename))))
   (subdir-contents-p
    (mv-nth 0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth 0
                     (find-d-e d-e-list filename))))))
  :hints
  (("goal" :in-theory
    (e/d (lofat-to-hifat-helper)
         (nth-of-effective-fat (:definition no-duplicatesp-equal))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-12
  (implies
   (equal (mv-nth 1
                  (d-e-clusterchain-contents fat32-in-memory d-e))
          0)
   (and (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))))
  :hints
  (("goal" :in-theory (enable d-e-clusterchain-contents nfix)
    :expand ((get-clusterchain-contents fat32-in-memory
                                        (d-e-first-cluster d-e)
                                        (d-e-file-size d-e))
             (get-clusterchain-contents fat32-in-memory
                                        (d-e-first-cluster d-e)
                                        2097152))))
  :rule-classes :linear)

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
  (implies
   (and
    (not-intersectp-list
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (d-e-list-p d-e-list)
    (<=
     2
     (d-e-first-cluster (mv-nth 0
                                    (find-d-e d-e-list filename))))
    (<
     (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not (intersectp-equal
         x
         (mv-nth '0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth '0
                          (find-d-e d-e-list filename)))))))
  :hints (("goal" :in-theory (e/d (lofat-to-hifat-helper not-intersectp-list)
                                  ((:rewrite nth-of-effective-fat)))
           :expand ((:free (x) (intersectp-equal nil x)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-list-p d-e-list)
      (not
       (d-e-directory-p (mv-nth 0
                                    (find-d-e d-e-list filename))))
      (<=
       2
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename))))
      (< (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory))))
     (not
      (intersectp-equal
       x
       (mv-nth
        '0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (mv-nth '0
                  (find-d-e d-e-list filename)))
         (d-e-file-size (mv-nth '0
                                    (find-d-e d-e-list filename)))
         (cluster-size fat32-in-memory))))))
    :hints (("goal" :in-theory (enable d-e-clusterchain))))
   (:rewrite
    :corollary
    (implies
     (and
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-list-p d-e-list)
      (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
      (<=
       2
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename))))
      (< (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory))))
     (not
      (intersectp-equal
       x
       (mv-nth '0
               (fat32-build-index-list
                (effective-fat fat32-in-memory)
                (d-e-first-cluster
                 (mv-nth '0
                         (find-d-e d-e-list filename)))
                *ms-max-dir-size*
                (cluster-size fat32-in-memory))))))
    :hints (("goal" :in-theory (e/d (d-e-clusterchain)))))
   (:rewrite
    :corollary
    (implies
     (and
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-list-p d-e-list)
      (<=
       2
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename))))
      (<
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory))))
     (not (intersectp-equal
           (mv-nth '0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth '0
                            (find-d-e d-e-list filename))))
           x))))
   (:rewrite
    :corollary
    (implies
     (and
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-list-p d-e-list)
      (<=
       2
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename))))
      (<
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
      (case-split
       (member-equal a x)))
     (not (member-equal
           a
           (mv-nth '0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth '0
                            (find-d-e d-e-list filename))))))))
   (:rewrite
    :corollary
    (implies
     (and
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-list-p d-e-list)
      (<=
       2
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename))))
      (<
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory))))
     (iff (equal
           (mv-nth '0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth '0
                            (find-d-e d-e-list filename))))
           x)
          (and (null x)
               (null
                (mv-nth '0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth '0
                                 (find-d-e d-e-list filename)))))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster root-d-e))
    (< (d-e-first-cluster root-d-e)
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (d-e-p d-e)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not (intersectp-equal
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (lofat-remove-file fat32-in-memory root-d-e path))
     d-e)
    (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints (("goal" :induct (lofat-remove-file fat32-in-memory
                                             root-d-e path))))

(defthm
  root-d-e-list-of-update-dir-contents
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (d-e-directory-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (stringp dir-contents)
    (equal (mv-nth 1 (root-d-e-list fat32-in-memory))
           0)
    (not
     (intersectp-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory d-e))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (pseudo-root-d-e fat32-in-memory))))))
   (equal (root-d-e-list
           (mv-nth 0
                   (update-dir-contents fat32-in-memory
                                        (d-e-first-cluster d-e)
                                        dir-contents)))
          (root-d-e-list fat32-in-memory)))
  :hints (("goal" :in-theory (enable root-d-e-list))))

(defthm
  count-of-clusters-of-lofat-remove-file
  (equal (count-of-clusters
          (mv-nth 0
                  (lofat-remove-file
                   fat32-in-memory rootclus path)))
         (count-of-clusters fat32-in-memory)))

(defthm
  cluster-size-of-lofat-remove-file
  (equal (cluster-size
          (mv-nth 0
                  (lofat-remove-file
                   fat32-in-memory rootclus path)))
         (cluster-size fat32-in-memory)))

(defthm
  subdir-contents-p-when-zero-length
  (implies (and (stringp contents) (equal (len (explode contents)) 0))
           (not (subdir-contents-p contents)))
  :hints (("goal" :in-theory (enable subdir-contents-p remove1-d-e))))

(defthm
  get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-1
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-directory-p (mv-nth 0
                                     (find-d-e d-e-list filename))))
   (and
    (<
     0
     (len
      (explode
       (mv-nth 0
               (get-clusterchain-contents
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0 (find-d-e d-e-list filename)))
                *ms-max-dir-size*)))))
    (equal
     (mv-nth
      1
      (get-clusterchain-contents
       fat32-in-memory
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       *ms-max-dir-size*))
     0)))
  :hints
  (("goal" :in-theory
    (e/d (lofat-to-hifat-helper d-e-clusterchain-contents)
         ((:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
          (:definition free-index-listp)
          (:rewrite nth-of-effective-fat)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)))
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename))))
     (equal (mv-nth 1
                    (get-clusterchain-contents
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list filename)))
                     *ms-max-dir-size*))
            0)))
   (:linear
    :corollary
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename))))
     (<
      0
      (len
       (explode
        (mv-nth 0
                (get-clusterchain-contents
                 fat32-in-memory
                 (d-e-first-cluster
                  (mv-nth 0 (find-d-e d-e-list filename)))
                 *ms-max-dir-size*)))))))))

(defthm
  get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
  (implies
   (and
    (d-e-list-p d-e-list)
    (<= 2
        (d-e-first-cluster
         (mv-nth 0
                 (find-d-e d-e-list filename))))
    (< (d-e-first-cluster
        (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))
     0)
    (not-intersectp-list
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))))
   (not
    (intersectp-equal
     x
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth 0
               (find-d-e d-e-list filename)))))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list)
     ((:rewrite nth-of-effective-fat)
      (:rewrite integerp-of-car-when-integer-listp)
      (:definition integer-listp)
      (:definition len)))
    :induct t))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and
      (d-e-list-p d-e-list)
      (<= 2
          (d-e-first-cluster
           (mv-nth 0
                   (find-d-e d-e-list filename))))
      (< (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (d-e-directory-p
       (mv-nth 0 (find-d-e d-e-list filename)))
      (equal
       (mv-nth 3
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper fat32-in-memory
                               d-e-list entry-limit))))
     (not
      (intersectp-equal
       x
       (mv-nth
        0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         *ms-max-dir-size*
         (cluster-size fat32-in-memory))))))
    :hints
    (("goal" :in-theory (enable d-e-clusterchain))))
   (:rewrite
    :corollary
    (implies
     (and
      (d-e-list-p d-e-list)
      (<= 2
          (d-e-first-cluster
           (mv-nth 0
                   (find-d-e d-e-list filename))))
      (< (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (not (d-e-directory-p
            (mv-nth 0 (find-d-e d-e-list filename))))
      (equal
       (mv-nth 3
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper fat32-in-memory
                               d-e-list entry-limit))))
     (not
      (intersectp-equal
       x
       (mv-nth
        0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (d-e-file-size
          (mv-nth 0 (find-d-e d-e-list filename)))
         (cluster-size fat32-in-memory))))))
    :hints
    (("goal" :in-theory (enable d-e-clusterchain))))))

;; Slightly better version of d-e-clusterchain-of-clear-clusterchain.
(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-1
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e2)
        (d-e-p d-e1)
        (d-e-directory-p d-e1)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e1))
        (not (intersectp-equal
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e1))
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e2)))))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e1)
                                       *ms-max-dir-size*))
           d-e2)
          (d-e-clusterchain fat32-in-memory d-e2)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (d-e-clusterchain-of-clear-clusterchain))
    :use (:instance d-e-clusterchain-of-clear-clusterchain
                    (d-e d-e2)
                    (masked-current-cluster (d-e-first-cluster d-e1))
                    (length *ms-max-dir-size*)))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-2
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0))
   (not
    (intersectp-equal
     (mv-nth
      '0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        '0
        (find-d-e
         (make-d-e-list
          (mv-nth '0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
         (car path)))))
     (mv-nth
      '0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        '0
        (find-d-e
         (make-d-e-list
          (mv-nth
           '0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path))))))
         (car (cdr path)))))))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1))
    :use
    (:instance
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1)
     (filename (cadr path))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path)))))))
     (fat32-in-memory fat32-in-memory)
     (x
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (car path))))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-4
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))))
   (not
    (intersectp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path))))))
         (cadr path))))))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1))
    :use
    (:instance
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1)
     (filename (cadr path))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path)))))))
     (fat32-in-memory fat32-in-memory)
     (x (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e)))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (<= 2 (d-e-first-cluster d-e))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      0
      (lofat-remove-file
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
         (car path)))
       (cdr path)))
     d-e)
    (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint)
     (path (cdr path))
     (root-d-e
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e)))
        (car path))))
     (fat32-in-memory fat32-in-memory)))))

;; Slightly better version of d-e-clusterchain-of-clear-clusterchain.
(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-6
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e2)
        (d-e-p d-e1)
        (not (d-e-directory-p d-e1))
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e1))
        (not (intersectp-equal
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e1))
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e2)))))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e1)
                                       (d-e-file-size d-e1)))
           d-e2)
          (d-e-clusterchain fat32-in-memory d-e2)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (d-e-clusterchain-of-clear-clusterchain))
    :use (:instance d-e-clusterchain-of-clear-clusterchain
                    (d-e d-e2)
                    (masked-current-cluster (d-e-first-cluster d-e1))
                    (length (d-e-file-size d-e1))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-3
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (equal
    (mv-nth
     '1
     (d-e-clusterchain-contents
      fat32-in-memory
      (mv-nth
       '0
       (find-d-e
        (make-d-e-list
         (mv-nth
          '0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            '0
            (find-d-e
             (make-d-e-list
              (mv-nth
               '0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (car (cdr path))))))
    0))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite
      d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-4))
    :use
    (:instance
     (:rewrite
      d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-4)
     (filename (cadr path))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path)))))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-7
  t
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (d-e-directory-p d-e)
          (not (intersectp-equal
                x
                (mv-nth 0
                        (d-e-clusterchain fat32-in-memory d-e)))))
     (not (member-equal (d-e-first-cluster d-e)
                        x)))
    :hints
    (("goal"
      :do-not-induct t
      :in-theory (disable intersectp-is-commutative)
      :expand
      ((:with intersectp-is-commutative
              (:free (y)
                     (intersectp-equal x
                                       (cons (d-e-first-cluster d-e)
                                             y))))
       (d-e-clusterchain fat32-in-memory d-e)
       (fat32-build-index-list (effective-fat fat32-in-memory)
                               (d-e-first-cluster d-e)
                               2097152 (cluster-size fat32-in-memory))
       (:free (y)
              (intersectp-equal (cons (d-e-first-cluster d-e) y)
                                x))))))
   (:rewrite
    :corollary
    (implies
     (and
      (d-e-directory-p d-e)
      (equal
       (fat32-entry-mask
        (nth
         (d-e-first-cluster d-e)
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))
          (make-list-ac
           (len (mv-nth 0
                        (d-e-clusterchain fat32-in-memory d-e)))
           0 nil))))
       0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not (intersectp-equal
            x
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory d-e)))))
     (not (member-equal (d-e-first-cluster d-e)
                        x)))
    :hints
    (("goal"
      :do-not-induct t
      :in-theory (disable intersectp-is-commutative)
      :expand
      ((:with intersectp-is-commutative
              (:free (y)
                     (intersectp-equal x
                                       (cons (d-e-first-cluster d-e)
                                             y))))
       (d-e-clusterchain fat32-in-memory d-e)
       (fat32-build-index-list (effective-fat fat32-in-memory)
                               (d-e-first-cluster d-e)
                               2097152 (cluster-size fat32-in-memory))
       (:free (y)
              (intersectp-equal (cons (d-e-first-cluster d-e) y)
                                x))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-9
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e)
        (d-e-directory-p d-e)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (equal (mv-nth 1
                       (update-dir-contents fat32-in-memory
                                            (d-e-first-cluster d-e)
                                            dir-contents))
               0)
        (stringp dir-contents)
        (< 0 (len (explode dir-contents)))
        (<= (len (explode dir-contents))
            *ms-max-dir-size*)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (not (intersectp-equal
              x
              (mv-nth '0
                      (d-e-clusterchain fat32-in-memory d-e)))))
   (and
    (non-free-index-listp
     x
     (effective-fat
      (mv-nth 0
              (update-dir-contents fat32-in-memory
                                   (d-e-first-cluster d-e)
                                   dir-contents))))
    (not
     (intersectp-equal
      x
      (mv-nth
       0
       (d-e-clusterchain
        (mv-nth 0
                (update-dir-contents fat32-in-memory
                                     (d-e-first-cluster d-e)
                                     dir-contents))
        d-e))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (e/d (update-dir-contents)
         (intersectp-is-commutative (:definition non-free-index-listp)
                                    (:definition stobj-set-clusters)))
    :expand
    ((:with intersectp-is-commutative
            (:free (y)
                   (intersectp-equal x
                                     (cons (d-e-first-cluster d-e)
                                           y))))
     (:with intersectp-is-commutative
            (intersectp-equal
             (mv-nth '0
                     (d-e-clusterchain fat32-in-memory d-e))
             x))
     (:free (y)
            (intersectp-equal (cons (d-e-first-cluster d-e) y)
                              x)))
    :cases
    ((equal (mv-nth '1
                    (d-e-clusterchain-contents fat32-in-memory d-e))
            '0)))))

;; Nice!
(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident-lemma-8
  (implies
   (equal (mv-nth 1
                  (d-e-clusterchain-contents fat32-in-memory d-e))
          0)
   (consp (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (enable d-e-clusterchain-contents
                       d-e-clusterchain
                       get-clusterchain-contents
                       fat32-build-index-list)
    :expand ((fat32-build-index-list (effective-fat fat32-in-memory)
                                     (d-e-first-cluster d-e)
                                     2097152 (cluster-size fat32-in-memory))
             (get-clusterchain-contents fat32-in-memory
                                        (d-e-first-cluster d-e)
                                        2097152)
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     (d-e-first-cluster d-e)
                                     (d-e-file-size d-e)
                                     (cluster-size fat32-in-memory))
             (get-clusterchain-contents fat32-in-memory
                                        (d-e-first-cluster d-e)
                                        (d-e-file-size d-e))))))

(defthm
  d-e-clusterchain-contents-of-lofat-remove-file-coincident
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (d-e-directory-p d-e)
    (fat32-filename-list-p path)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (lofat-remove-file fat32-in-memory d-e path))
     d-e)
    (if
        (or
         (not
          (equal (mv-nth 1
                         (lofat-remove-file fat32-in-memory d-e path))
                 0))
         (consp (cdr path)))
        (d-e-clusterchain-contents fat32-in-memory d-e)
      (mv
       (implode
        (append
         (nats=>chars
          (clear-d-e
           (string=>nats
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path)))
         (make-list-ac
          (+
           (-
            (len
             (explode
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))))
           (*
            (cluster-size fat32-in-memory)
            (len
             (make-clusters
              (nats=>string
               (clear-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (car path)))
              (cluster-size fat32-in-memory)))))
          (code-char 0)
          nil)))
       0))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory d-e path))))

(encapsulate
  ()

  (local (include-book "rtl/rel9/arithmetic/top" :dir :system))

  (defthm
    root-d-e-list-of-lofat-remove-file-coincident-lemma-1
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (equal (mod length (cluster-size fat32-in-memory))
                 0)
          (not (zp y))
          (equal (mod (cluster-size fat32-in-memory) y)
                 0))
     (equal
      (mod
       (len
        (explode
         (mv-nth 0
                 (get-clusterchain-contents fat32-in-memory
                                            masked-current-cluster length))))
       y)
      0))
    :hints
    (("goal" :induct (get-clusterchain-contents fat32-in-memory
                                                masked-current-cluster length)
      :in-theory (enable get-clusterchain-contents
                         nfix mod-sum-cases)))))

(defthm
  root-d-e-list-of-lofat-remove-file-coincident-lemma-2
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-directory-p d-e)
        (not (zp y))
        (equal (mod (cluster-size fat32-in-memory) y)
               0))
   (equal
    (mod
     (len
      (explode
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory d-e))))
     y)
    0))
  :hints (("goal" :in-theory (enable d-e-clusterchain-contents))))

(defthm
  root-d-e-list-of-lofat-remove-file-coincident
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-filename-list-p path)
    (equal (mv-nth 1
                   (lofat-remove-file fat32-in-memory
                                      (pseudo-root-d-e fat32-in-memory)
                                      path))
           0)
    (equal (mv-nth 1 (lofat-to-hifat fat32-in-memory))
           0))
   (equal
    (root-d-e-list
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (pseudo-root-d-e fat32-in-memory)
                                path)))
    (if (consp (cdr path))
        (root-d-e-list fat32-in-memory)
        (mv (delete-d-e (mv-nth 0 (root-d-e-list fat32-in-memory))
                            (car path))
            0))))
  :hints (("goal" :in-theory (e/d (root-d-e-list lofat-to-hifat)
                                  ((:rewrite make-list-ac-removal)))
           :do-not-induct t)))

(defthm
  lofat-to-hifat-helper-of-delete-d-e-1
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))))
   (not-intersectp-list
    x
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   (delete-d-e d-e-list filename)
                                   entry-limit))))
  :hints
  (("goal" :in-theory
    (e/d
     (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                            not-intersectp-list)
     ((:rewrite nth-of-effective-fat)
      (:definition assoc-equal)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))

(defthm
  lofat-to-hifat-helper-of-delete-d-e-2
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not (member-intersectp-equal
              x
              (mv-nth 2
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit)))))
   (not
    (member-intersectp-equal
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    (delete-d-e d-e-list filename)
                                    entry-limit)))))
  :hints
  (("goal"
    :in-theory (disable (:induction delete-d-e))
    :induct
    (member-intersectp-equal
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    (delete-d-e d-e-list filename)
                                    entry-limit)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (not (member-intersectp-equal
                x
                (mv-nth 2
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit)))))
     (not
      (member-intersectp-equal
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      (delete-d-e d-e-list filename)
                                      entry-limit))
       x))))))

(defthm
  lofat-to-hifat-helper-of-delete-d-e-3
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0))
   (and
    (equal
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory
                                    (delete-d-e d-e-list filename)
                                    entry-limit))
     (remove-assoc-equal
      filename
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    (delete-d-e d-e-list filename)
                                    entry-limit))
     0)))
  :hints
  (("goal" :in-theory
    (e/d (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4)
         (nth-of-effective-fat))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))

(defthm
  d-e-clusterchain-of-lofat-remove-file-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster root-d-e))
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (< (d-e-first-cluster root-d-e)
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (d-e-p d-e)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not (intersectp-equal
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0))
   (equal
    (d-e-clusterchain
     (mv-nth 0
             (lofat-remove-file fat32-in-memory root-d-e path))
     d-e)
    (d-e-clusterchain fat32-in-memory d-e)))
  :hints (("goal" :induct (lofat-remove-file fat32-in-memory
                                             root-d-e path))))

(defthm
  lofat-to-hifat-helper-after-delete-and-clear-1-lemma-1
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-directory-p (mv-nth 0
                                     (find-d-e d-e-list filename))))
   (and
    (<= *ms-first-data-cluster*
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))))
  :rule-classes :linear
  :hints (("goal" :in-theory (enable lofat-to-hifat-helper))))

(defthm
  lofat-to-hifat-helper-after-delete-and-clear-1-lemma-4
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (useful-d-e-list-p d-e-list)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename))))
   (not
    (intersectp-equal
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      '0
      (fat32-build-index-list
       (effective-fat fat32-in-memory)
       (d-e-first-cluster (mv-nth '0
                                      (find-d-e (cdr d-e-list)
                                                    filename)))
       '2097152
       (cluster-size fat32-in-memory))))))
  :hints (("goal" :in-theory (e/d (d-e-clusterchain)))))

;; remove-hyps says (for now) that these hypotheses are minimal.
(defthm
  lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (<= *ms-first-data-cluster*
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename))))
    (not (member-intersectp-equal
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit))
          l)))
   (not-intersectp-list
    (mv-nth
     0
     (d-e-clusterchain fat32-in-memory
                           (mv-nth 0
                                   (find-d-e d-e-list filename))))
    l))
  :hints (("goal" :induct (lofat-to-hifat-helper fat32-in-memory
                                                 d-e-list entry-limit)
           :in-theory (e/d (lofat-to-hifat-helper)
                           (member-intersectp-is-commutative
                            (:rewrite nth-of-effective-fat)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and (useful-d-e-list-p d-e-list)
          (equal (mv-nth 3
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))
                 0)
          (not (member-intersectp-equal
                (mv-nth 2
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit))
                l))
          (d-e-directory-p (mv-nth 0
                                       (find-d-e d-e-list filename))))
     (not-intersectp-list
      (mv-nth
       0
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
        *ms-max-dir-size*
        (cluster-size fat32-in-memory)))
      l))
    :hints
    (("goal"
      :in-theory (e/d (d-e-clusterchain)))))
   (:rewrite
    :corollary
    (implies
     (and
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
         (+ *ms-first-data-cluster*
            (count-of-clusters fat32-in-memory)))
      (<= *ms-first-data-cluster*
          (d-e-first-cluster (mv-nth 0
                                         (find-d-e d-e-list filename))))
      (not (member-intersectp-equal
            (mv-nth 2
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit))
            l))
      (not (d-e-directory-p (mv-nth 0
                                        (find-d-e d-e-list filename)))))
     (not-intersectp-list
      (mv-nth
       0
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
        (d-e-file-size (mv-nth 0 (find-d-e d-e-list filename)))
        (cluster-size fat32-in-memory)))
      l))
    :hints
    (("goal"
      :in-theory (e/d (d-e-clusterchain)))))))

(defthm
  lofat-to-hifat-helper-after-delete-and-clear-2-lemma-1
  (implies
   (and
    (consp d-e-list)
    (d-e-directory-p (car d-e-list))
    (<= 2
        (d-e-first-cluster (car d-e-list)))
    (< (d-e-first-cluster (car d-e-list))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (<=
     0
     (+
      -1 entry-limit
      (-
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory (car d-e-list)))))
          (+ -1 entry-limit)))))))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit))))))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit)))))))))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit))))))))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth 0
              (clear-clusterchain fat32-in-memory
                                  (d-e-first-cluster (car d-e-list))
                                  *ms-max-dir-size*))
      (cdr d-e-list)
      entry-limit))))
  :hints
  (("goal"
    :in-theory (enable d-e-clusterchain nfix)
    :use
    ((:theorem
      (implies
       (and
        (<
         (nfix entry-limit)
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory (cdr d-e-list)
            (+
             -1 entry-limit
             (-
              (hifat-entry-count
               (mv-nth
                0
                (lofat-to-hifat-helper
                 fat32-in-memory
                 (make-d-e-list
                  (string=>nats
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list)))))
                 (+ -1 entry-limit))))))))))
        (<=
         0
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory (car d-e-list)))))
              (+ -1 entry-limit)))))))
        (useful-d-e-list-p d-e-list))
       (equal
        (mv-nth
         0
         (lofat-to-hifat-helper
          (mv-nth 0
                  (clear-clusterchain fat32-in-memory
                                      (d-e-first-cluster (car d-e-list))
                                      2097152))
          (cdr d-e-list)
          entry-limit))
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory (cdr d-e-list)
          (+
           -1 entry-limit
           (-
            (hifat-entry-count
             (mv-nth
              0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (string=>nats (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory (car d-e-list)))))
               (+ -1 entry-limit)))))))))))
     (:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit2 entry-limit)
      (d-e-list (cdr d-e-list))
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit))))))))))))

(defthm
  lofat-to-hifat-helper-after-delete-and-clear-1-lemma-3
  (implies
   (and
    (consp d-e-list)
    (d-e-directory-p (car d-e-list))
    (<= 2
        (d-e-first-cluster (car d-e-list)))
    (< (d-e-first-cluster (car d-e-list))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (<=
     0
     (+
      -1 entry-limit
      (-
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory (car d-e-list)))))
          (+ -1 entry-limit)))))))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit))))))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (+ -1 entry-limit))))))))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth 0
              (clear-clusterchain fat32-in-memory
                                  (d-e-first-cluster (car d-e-list))
                                  2097152))
      (cdr d-e-list)
      entry-limit))
    0))
  :hints
  (("goal"
    :in-theory (enable d-e-clusterchain nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit2 entry-limit)
     (d-e-list (cdr d-e-list))
     (entry-limit1
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (string=>nats (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory (car d-e-list)))))
           (+ -1 entry-limit)))))))))))

(defthm
  lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-1
  (implies
   (and
    (not
     (member-intersectp-equal
      x
      (mv-nth
       2
       (lofat-to-hifat-helper fat32-in-memory
                              d-e-list entry-limit))))
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))
     0)
    (d-e-directory-p
     (mv-nth 0 (find-d-e d-e-list filename)))
    (useful-d-e-list-p d-e-list))
   (not
    (member-intersectp-equal
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth 0
                  (find-d-e d-e-list filename)))))
       entry-limit)))))
  :hints
  (("goal" :in-theory (e/d (lofat-to-hifat-helper-correctness-4))
    :induct
    (member-intersectp-equal
     x
     (mv-nth
      2
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and
      (not
       (member-intersectp-equal
        x
        (mv-nth
         2
         (lofat-to-hifat-helper fat32-in-memory
                                d-e-list entry-limit))))
      (equal
       (mv-nth 3
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))
       0)
      (d-e-directory-p
       (mv-nth 0 (find-d-e d-e-list filename)))
      (useful-d-e-list-p d-e-list))
     (not
      (member-intersectp-equal
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (get-clusterchain-contents
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0 (find-d-e d-e-list filename)))
            *ms-max-dir-size*)))
         entry-limit)))))
    :hints
    (("goal"
      :in-theory (enable d-e-clusterchain-contents))))))

;; Slightly better than lofat-to-hifat-helper-of-update-dir-contents
(defthm
  lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-2
  (implies
   (and (useful-d-e-list-p d-e-list)
        (lofat-fs-p fat32-in-memory)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-p root-d-e)
        (d-e-directory-p root-d-e)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster root-d-e))
        (stringp dir-contents)
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (update-dir-contents fat32-in-memory
                                  (d-e-first-cluster root-d-e)
                                  dir-contents))
     d-e-list entry-limit)
    (lofat-to-hifat-helper fat32-in-memory
                           d-e-list entry-limit)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (lofat-to-hifat-helper-of-update-dir-contents))
    :use (:instance lofat-to-hifat-helper-of-update-dir-contents
                    (first-cluster (d-e-first-cluster root-d-e))))))

;; Slightly better than lofat-to-hifat-helper-of-clear-clusterchain
(defthm
  lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-3
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e)
        (not (d-e-directory-p d-e))
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
   (equal (lofat-to-hifat-helper
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e)
                                       (d-e-file-size d-e)))
           d-e-list entry-limit)
          (lofat-to-hifat-helper fat32-in-memory
                                 d-e-list entry-limit)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (lofat-to-hifat-helper-of-clear-clusterchain))
    :use (:instance lofat-to-hifat-helper-of-clear-clusterchain
                    (masked-current-cluster (d-e-first-cluster d-e))
                    (length (d-e-file-size d-e))))))

;; Slightly better than lofat-to-hifat-helper-of-clear-clusterchain
(defthm
  lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-4
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e)
        (d-e-directory-p d-e)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
   (equal (lofat-to-hifat-helper
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e)
                                       *ms-max-dir-size*))
           d-e-list entry-limit)
          (lofat-to-hifat-helper fat32-in-memory
                                 d-e-list entry-limit)))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain)
                    (lofat-to-hifat-helper-of-clear-clusterchain))
    :use (:instance lofat-to-hifat-helper-of-clear-clusterchain
                    (masked-current-cluster (d-e-first-cluster d-e))
                    (length *ms-max-dir-size*)))))

(defthm
  lofat-to-hifat-helper-of-lofat-remove-file-disjoint
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (lofat-fs-p fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (>= (d-e-first-cluster root-d-e)
        *ms-first-data-cluster*)
    (< (d-e-first-cluster root-d-e)
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit2))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit2)))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        entry-limit2))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit1)))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory root-d-e path))
     d-e-list entry-limit1)
    (lofat-to-hifat-helper fat32-in-memory
                           d-e-list entry-limit1)))
  :hints (("goal" :induct (lofat-remove-file fat32-in-memory
                                             root-d-e path))))

(defthm
  no-duplicatesp-of-fat32-build-index-list-of-effective-fat-of-update-dir-contents
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (stringp dir-contents)
    (< 0 (len (explode dir-contents)))
    (<= (len (explode dir-contents))
        *ms-max-dir-size*)
    (equal
     (mv-nth 1
             (get-clusterchain-contents fat32-in-memory
                                        first-cluster *ms-max-dir-size*))
     0)
    (equal (mv-nth 1
                   (update-dir-contents fat32-in-memory
                                        first-cluster dir-contents))
           0))
   (no-duplicatesp-equal
    (mv-nth
     0
     (fat32-build-index-list
      (effective-fat
       (mv-nth 0
               (update-dir-contents fat32-in-memory
                                    first-cluster dir-contents)))
      first-cluster *ms-max-dir-size*
      (cluster-size fat32-in-memory)))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (update-dir-contents
      get-clusterchain-contents-of-update-dir-contents-coincident-lemma-3)
     ((:rewrite nth-of-set-indices-in-fa-table-when-member)))
    :expand
    ((fat32-build-index-list (effective-fat fat32-in-memory)
                             first-cluster *ms-max-dir-size*
                             (cluster-size fat32-in-memory))
     (get-clusterchain-contents fat32-in-memory first-cluster 2097152))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (cons
        first-cluster
        (mv-nth 0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 (fat32-entry-mask (fati first-cluster fat32-in-memory))
                 (+ 2097152
                    (- (cluster-size fat32-in-memory)))
                 (cluster-size fat32-in-memory)))))
      (fa-table (effective-fat fat32-in-memory))
      (n first-cluster))))))

(defthm
  no-duplicatesp-of-d-e-clusterchain-of-update-dir-contents-coincident
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p first-cluster)
    (< 0 (len (explode dir-contents)))
    (<= (len (explode dir-contents))
        *ms-max-dir-size*)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal (mv-nth 1
                   (update-dir-contents fat32-in-memory
                                        first-cluster dir-contents))
           0)
    (equal (d-e-first-cluster d-e)
           first-cluster)
    (d-e-directory-p d-e))
   (no-duplicatesp-equal
    (mv-nth 0
            (d-e-clusterchain
             (mv-nth 0
                     (update-dir-contents fat32-in-memory
                                          first-cluster dir-contents))
             d-e))))
  :hints
  (("goal"
    :in-theory (e/d (d-e-clusterchain d-e-clusterchain-contents)
                    (no-duplicatesp-of-fat32-build-index-list-of-effective-fat-of-update-dir-contents))
    :use
    no-duplicatesp-of-fat32-build-index-list-of-effective-fat-of-update-dir-contents)))

(defthm
  lofat-remove-file-correctness-1-lemma-8
  (implies
   (and (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-directory-p (mv-nth 0
                                     (find-d-e d-e-list filename))))
   (not
    (member-intersectp-equal
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    (delete-d-e d-e-list filename)
                                    entry-limit))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list filename)))))
       entry-limit)))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                            useful-d-e-list-p)
     (member-intersectp-is-commutative
      (:rewrite nth-of-effective-fat)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-6)
      (:rewrite take-of-len-free)))
    :do-not-induct t
    :induct (mv (mv-nth 0
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit))
                (mv-nth 0 (find-d-e d-e-list filename)))
    :expand
    ((:with
      member-intersectp-is-commutative
      (member-intersectp-equal
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory (cdr d-e-list)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit)))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-18
  (implies
   (and (< (fat32-entry-mask (fati (d-e-first-cluster d-e)
                                   fat32-in-memory))
           (+ 2 (count-of-clusters fat32-in-memory)))
        (< (d-e-first-cluster d-e)
           (+ 2 (count-of-clusters fat32-in-memory))))
   (equal
    (fat32-entry-mask
     (nth
      (d-e-first-cluster d-e)
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (cons
        (d-e-first-cluster d-e)
        (mv-nth '0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 (fat32-entry-mask (fati (d-e-first-cluster d-e)
                                         fat32-in-memory))
                 (binary-+ '2097152
                           (binary-* '-1
                                     (cluster-size fat32-in-memory)))
                 (cluster-size fat32-in-memory))))
       (make-list-ac
        (len
         (mv-nth '0
                 (fat32-build-index-list
                  (effective-fat fat32-in-memory)
                  (fat32-entry-mask (fati (d-e-first-cluster d-e)
                                          fat32-in-memory))
                  (binary-+ '2097152
                            (binary-* '-1
                                      (cluster-size fat32-in-memory)))
                  (cluster-size fat32-in-memory))))
        '0
        '(0)))))
    '0))
  :hints
  (("goal"
    :in-theory (disable (:rewrite nth-of-set-indices-in-fa-table-when-member))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (cons
        (d-e-first-cluster d-e)
        (mv-nth 0
                (fat32-build-index-list
                 (effective-fat fat32-in-memory)
                 (fat32-entry-mask (fati (d-e-first-cluster d-e)
                                         fat32-in-memory))
                 (+ 2097152
                    (* -1 (cluster-size fat32-in-memory)))
                 (cluster-size fat32-in-memory)))))
      (fa-table (effective-fat fat32-in-memory))
      (n (d-e-first-cluster d-e)))))))

;; Kinda general.
(defthmd
  lofat-remove-file-correctness-1-lemma-23
  (implies
   (and
    (consp (cdr path))
    (lofat-fs-p fat32-in-memory)
    (<= 2 (d-e-first-cluster d-e))
    (d-e-p d-e)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path)))))))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path)))))))
       entry-limit)))
    (not
     (intersectp-equal
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (fat32-filename-fix (car path))))))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
         (fat32-filename-fix (car path))))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path)))))))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (lofat-remove-file fat32-in-memory d-e path))
           d-e)
          (d-e-clusterchain fat32-in-memory d-e))))

;; The hypotheses are minimal.
(defthm
  lofat-remove-file-correctness-1-lemma-62
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory))))
   (not-intersectp-list
    (mv-nth
     '0
     (d-e-clusterchain fat32-in-memory
                           (mv-nth '0
                                   (find-d-e d-e-list filename))))
    (mv-nth '2
            (lofat-to-hifat-helper fat32-in-memory
                                   (delete-d-e d-e-list filename)
                                   entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper
      (:rewrite lofat-to-hifat-helper-correctness-4)
      not-intersectp-list)
     ((:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
      (:definition free-index-listp)
      (:rewrite nth-of-effective-fat)))
    :induct t
    :expand (:free (y) (intersectp-equal nil y)))))

(defthm
  lofat-remove-file-correctness-1-lemma-10
  (implies
   (and
    (<= 2
        (d-e-first-cluster (car d-e-list)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit)))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (car d-e-list))
    (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint)
     (d-e (car d-e-list))
     (root-d-e (mv-nth 0
                           (find-d-e (cdr d-e-list)
                                         filename)))
     (entry-limit (- entry-limit 1))))))

(defthm
  lofat-remove-file-correctness-1-lemma-11
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
     (+ -1 entry-limit))
    (lofat-to-hifat-helper
     fat32-in-memory
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
     (+ -1 entry-limit))))
  :hints
  (("goal"
    :in-theory
    (disable (:rewrite lofat-to-hifat-helper-of-lofat-remove-file-disjoint))
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-of-lofat-remove-file-disjoint)
     (entry-limit1 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
     (path path)
     (root-d-e (mv-nth 0
                           (find-d-e (cdr d-e-list)
                                         filename)))
     (entry-limit2
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-12
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (fat32-filename-list-p path)
    (equal (mv-nth 1
                   (lofat-remove-file fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename))
                                      path))
           0))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (mv-nth 0
             (find-d-e (cdr d-e-list)
                           filename)))
    (if
        (consp (cdr path))
        (d-e-clusterchain-contents fat32-in-memory
                                       (mv-nth 0
                                               (find-d-e (cdr d-e-list)
                                                             filename)))
      (mv
       (implode
        (append
         (nats=>chars
          (clear-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename)))))
           (car path)))
         (make-list-ac
          (+
           (-
            (len (explode (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename)))))))
           (*
            (cluster-size fat32-in-memory)
            (len
             (make-clusters
              (nats=>string
               (clear-d-e
                (string=>nats
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename)))))
                (car path)))
              (cluster-size fat32-in-memory)))))
          (code-char 0) nil)))
       0))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-coincident))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-coincident)
     (path path)
     (d-e (mv-nth 0
                      (find-d-e (cdr d-e-list)
                                    filename)))
     (entry-limit
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))))))

;; Hypotheses are minimal.
(defthm
  lofat-remove-file-correctness-1-lemma-13
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (fat32-filename-list-p path)
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      0
      (lofat-remove-file
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (cdr path)))
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path))))
    (if
     (or
      (not
       (equal
        (mv-nth
         1
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        0))
      (consp (cddr path)))
     (d-e-clusterchain-contents
      fat32-in-memory
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (mv
      (implode
       (append
        (nats=>chars
         (clear-d-e
          (string=>nats
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path))))))
          (cadr path)))
        (make-list-ac
         (+
          (-
           (len
            (explode
             (mv-nth
              0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth 0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))))))
          (*
           (cluster-size fat32-in-memory)
           (len
            (make-clusters
             (nats=>string
              (clear-d-e
               (string=>nats
                (mv-nth
                 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth
                   0
                   (find-d-e
                    (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory root-d-e)))
                    (car path))))))
               (cadr path)))
             (cluster-size fat32-in-memory)))))
         (code-char 0)
         nil)))
      0))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-coincident))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-coincident)
     (path (cdr path))
     (d-e
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-14
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename1)))
         (nats=>string
          (clear-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))))
           filename2))))
       (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     (put-assoc-equal
      filename1
      (m1-file
       (mv-nth 0
               (find-d-e (cdr d-e-list)
                             filename1))
       (remove-assoc-equal
        filename2
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e (cdr d-e-list)
                                          filename1)))))
          (+
           -1 entry-limit
           (-
            (hifat-entry-count
             (mv-nth
              0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory (car d-e-list))))
               (+ -1 entry-limit))))))))))
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit))))))))))
    (useful-d-e-list-p d-e-list))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename1)))
        (nats=>string
         (clear-d-e
          (string=>nats (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename1)))))
          filename2))))
      (cdr d-e-list)
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit))))))))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :hints
  (("goal"
    :in-theory (enable nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (entry-limit2 entry-limit)
     (d-e-list (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e (cdr d-e-list)
                                                   filename1))))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-16
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename1)))
         (nats=>string
          (clear-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))))
           filename2))))
       (cdr d-e-list)
       (+ -1 entry-limit)))
     (put-assoc-equal
      filename1
      (m1-file
       (mv-nth 0
               (find-d-e (cdr d-e-list)
                             filename1))
       (remove-assoc-equal
        filename2
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e (cdr d-e-list)
                                          filename1)))))
          (+ -1 entry-limit)))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                     (+ -1 entry-limit)))))
    (useful-d-e-list-p d-e-list))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename1)))
        (nats=>string
         (clear-d-e
          (string=>nats (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename1)))))
          filename2))))
      (cdr d-e-list)
      (+ -1 entry-limit)))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))))
  :hints
  (("goal"
    :in-theory
    (enable
     d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-8
     nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1 (- entry-limit 1))
     (entry-limit2 entry-limit)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-remove-file-correctness-1-lemma-17
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (useful-d-e-list-p d-e-list))
   (equal
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                (+ -1 entry-limit)))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))))
  :hints
  (("goal"
    :in-theory
    (enable
     d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-8
     nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1 (- entry-limit 1))
     (entry-limit2 entry-limit)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-remove-file-correctness-1-lemma-19
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (useful-d-e-list-p d-e-list))
   (equal
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e (cdr d-e-list)
                                         filename1)))))
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (remove-assoc-equal
       filename2
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :hints
  (("goal"
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (entry-limit2 entry-limit)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (fat32-in-memory fat32-in-memory))
    :in-theory (enable nfix))))

(defthm
  lofat-remove-file-correctness-1-lemma-20
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2))))
    (<
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2)))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit)))))
   (not
    (intersectp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth 0
               (find-d-e
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                filename2)))))))
  :hints
  (("goal"
    :use
    ((:instance
      (:rewrite
       get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
       . 1)
      (entry-limit (- entry-limit 1))
      (filename filename2)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename1))))))
      (fat32-in-memory fat32-in-memory)
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory
                                       (car d-e-list)))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-21
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2))))
    (<
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2)))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list))
   (not
    (intersectp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename1))))
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth 0
               (find-d-e
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                filename2)))))))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1))
    :use
    (:instance
     (:rewrite
      get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
      . 1)
     (entry-limit (- entry-limit 1))
     (filename filename2)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (fat32-in-memory fat32-in-memory)
     (x (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename1)))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-24
  (implies
   (and
    (not (zp entry-limit))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       filename2))
     0))
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain fat32-in-memory (car d-e-list)))
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory (cdr d-e-list)
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (remove-assoc-equal
          filename2
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :hints
  (("goal"
    :in-theory
    (e/d (nfix)
         ((:linear lofat-to-hifat-helper-correctness-3)
          (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                    . 1)))
    :use
    ((:instance
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                . 1)
      (entry-limit (+ -1 entry-limit))
      (l
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory (cdr d-e-list)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (remove-assoc-equal
             filename2
             (mv-nth
              0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory (car d-e-list))))
               (+ -1 entry-limit))))))))))
      (filename filename2)
      (d-e-list
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (remove-assoc-equal
           filename2
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit))))))))
      (d-e-list (cdr d-e-list))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:linear lofat-to-hifat-helper-correctness-3)
      (entry-limit
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (cdr d-e-list))
      (fat32-in-memory fat32-in-memory))))))

(defthm
  lofat-remove-file-correctness-1-lemma-25
  (implies
   (and
    (not (zp entry-limit))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       filename2))
     0))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      fat32-in-memory (cdr d-e-list)
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (remove-assoc-equal
          filename2
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (mv-nth
     0
     (lofat-to-hifat-helper
      fat32-in-memory (cdr d-e-list)
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit))))))))))
  :hints
  (("goal"
    :in-theory (e/d (nfix)
                    ((:linear lofat-to-hifat-helper-correctness-3)))
    :use
    ((:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (remove-assoc-equal
           filename2
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit))))))))
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (cdr d-e-list)))
     (:instance
      (:linear lofat-to-hifat-helper-correctness-3)
      (entry-limit
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (cdr d-e-list)))))))

;; Decently useful.
(defthm
  lofat-remove-file-correctness-1-lemma-26
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p d-e)
        (d-e-directory-p d-e)
        (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (equal (mv-nth 1
                       (update-dir-contents fat32-in-memory
                                            (d-e-first-cluster d-e)
                                            dir-contents))
               0)
        (stringp dir-contents)
        (< 0 (len (explode dir-contents)))
        (<= (len (explode dir-contents))
            *ms-max-dir-size*)
        (non-free-index-list-listp x (effective-fat fat32-in-memory))
        (not-intersectp-list
         (mv-nth '0
                 (d-e-clusterchain fat32-in-memory d-e))
         x))
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain
             (mv-nth 0
                     (update-dir-contents fat32-in-memory
                                          (d-e-first-cluster d-e)
                                          dir-contents))
             d-e))
    x))
  :hints (("goal" :in-theory (enable not-intersectp-list))))

;; Sometimes useless, but needed by some theorems.
(defthm
  lofat-remove-file-correctness-1-lemma-27
  (implies
   (and
    (not (zp entry-limit))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       filename2))
     0)
    (<=
     0
     (+
      -1 entry-limit
      (-
       (hifat-entry-count
        (remove-assoc-equal
         filename2
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))))
   (<=
    (hifat-entry-count
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (+
     -1 entry-limit
     (-
      (hifat-entry-count
       (remove-assoc-equal
        filename2
        (mv-nth 0
                (lofat-to-hifat-helper
                 fat32-in-memory
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory (car d-e-list))))
                 (+ -1 entry-limit)))))))))
  :hints
  (("goal"
    :in-theory (e/d (nfix) ((:linear lofat-to-hifat-helper-correctness-3)))
    :use
    (:instance
     (:linear lofat-to-hifat-helper-correctness-3)
     (entry-limit
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (d-e-list (cdr d-e-list))
     (fat32-in-memory fat32-in-memory))))
  :rule-classes :linear)

(defthm
  lofat-remove-file-correctness-1-lemma-28
  (implies
   (and
    (not (zp entry-limit))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       filename2))
     0))
   (>=
    (binary-+
     '-1
     (binary-+
      entry-limit
      (unary--
       (hifat-entry-count
        (remove-assoc-equal
         filename2
         (mv-nth '0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth '0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (binary-+ '-1 entry-limit))))))))
    '0))
  :rule-classes (:rewrite :linear))

(defthm
  lofat-remove-file-correctness-1-lemma-29
  (implies
   (and (unsigned-byte-listp 8 dir-contents)
        (not (equal filename1 filename2))
        (not (equal (char-code (char filename2 0))
                    229)))
   (equal
    (len
     (explode
      (remove1-d-e
       (implode (nats=>chars (clear-d-e dir-contents filename1)))
       filename2)))
    (len (explode (remove1-d-e (nats=>string dir-contents)
                                   filename2)))))
  :hints
  (("goal"
    :in-theory (e/d (remove1-d-e clear-d-e
                                     len-when-d-e-p
                                     nats=>string)
                    (nats=>chars-of-take))
    :induct (clear-d-e dir-contents filename1)
    :expand
    ((remove1-d-e
      (implode (append (nats=>chars (take 32 dir-contents))
                       (nats=>chars (clear-d-e (nthcdr 32 dir-contents)
                                                   filename1))))
      filename2)
     (remove1-d-e (nats=>string dir-contents)
                      filename2)))
   ("subgoal *1/3''"
    :expand
    (remove1-d-e
     (implode
      (append
       (nats=>chars
        (d-e-set-filename
         (take 32 dir-contents)
         (nats=>string
          (update-nth
           0 229
           (string=>nats (d-e-filename (take 32 dir-contents)))))))
       (nats=>chars
        (clear-d-e (nthcdr 32 dir-contents)
                       (d-e-filename (take 32 dir-contents))))))
     filename2))))

(defthm lofat-remove-file-correctness-1-lemma-30
  (>= (len (explode (remove1-d-e dir-contents filename)))
      (- (len (explode dir-contents))
         *ms-d-e-length*))
  :hints (("goal" :in-theory (enable remove1-d-e)))
  :rule-classes :linear)

(defthm
  lofat-remove-file-correctness-1-lemma-31
  (implies
   (and (unsigned-byte-listp 8 dir-contents)
        (not (equal filename1 filename2))
        (not (equal filename1 filename3))
        (not (equal (char-code (char filename2 0))
                    229))
        (not (equal (char-code (char filename3 0))
                    229)))
   (equal
    (len
     (explode
      (remove1-d-e
       (remove1-d-e
        (implode (nats=>chars (clear-d-e dir-contents filename1)))
        filename2)
       filename3)))
    (len
     (explode (remove1-d-e (remove1-d-e (nats=>string dir-contents)
                                                filename2)
                               filename3)))))
  :hints
  (("goal"
    :in-theory (e/d (remove1-d-e clear-d-e
                                     len-when-d-e-p
                                     nats=>string)
                    (nats=>chars-of-take))
    :induct (clear-d-e dir-contents filename1)
    :expand
    ((remove1-d-e
      (implode (append (nats=>chars (take 32 dir-contents))
                       (nats=>chars (clear-d-e (nthcdr 32 dir-contents)
                                                   filename1))))
      filename2)))))

(make-event
 `(defthm
    lofat-remove-file-correctness-1-lemma-32
    (implies
     (and (unsigned-byte-listp 8 dir-contents)
          (not (equal filename1 filename2))
          (not (equal (char-code (char filename2 0))
                      229)))
     (equal
      (len
       (explode
        (remove1-d-e
         (implode (append (nats=>chars (clear-d-e dir-contents filename1))
                          (make-list-ac n ,(code-char 0) nil)))
         filename2)))
      (len
       (explode
        (remove1-d-e (implode (append (nats=>chars dir-contents)
                                          (make-list-ac n (code-char 0) nil)))
                         filename2)))))
    :hints
    (("goal"
      :in-theory (enable remove1-d-e clear-d-e
                         len-when-d-e-p
                         nats=>string)
      :induct (clear-d-e dir-contents filename1)
      :expand
      ((remove1-d-e
        (implode (append (nats=>chars (take 32 dir-contents))
                         (nats=>chars (clear-d-e (nthcdr 32 dir-contents)
                                                     filename1))))
        filename2)
       (remove1-d-e (nats=>string dir-contents)
                        filename2))))))

(make-event
 `(defthm
    lofat-remove-file-correctness-1-lemma-33
    (implies
     (and (unsigned-byte-listp 8 dir-contents)
          (not (equal filename1 filename2))
          (not (equal filename1 filename3))
          (not (equal (char-code (char filename2 0))
                      229))
          (not (equal (char-code (char filename3 0))
                      229)))
     (equal
      (len
       (explode
        (remove1-d-e
         (remove1-d-e
          (implode
           (append
            (nats=>chars (clear-d-e dir-contents filename1))
            (make-list-ac n ,(code-char 0) nil)))
          filename2)
         filename3)))
      (len
       (explode
        (remove1-d-e
         (remove1-d-e
          (implode (append (nats=>chars dir-contents)
                           (make-list-ac n (code-char 0) nil)))
          filename2)
         filename3)))))
    :hints
    (("goal"
      :in-theory (enable remove1-d-e clear-d-e
                         len-when-d-e-p
                         nats=>string)
      :induct (clear-d-e dir-contents filename1)
      :expand
      ((remove1-d-e
        (implode
         (append
          (nats=>chars (take 32 dir-contents))
          (nats=>chars (clear-d-e (nthcdr 32 dir-contents)
                                      filename1))))
        filename2))))))

(encapsulate
  ()

  (local (include-book "rtl/rel9/arithmetic/top" :dir :system))

  (local
   (defthm
     lemma
     (implies (and (d-e-p d-e)
                   (< (nfix n) *ms-d-e-length*))
              (rationalp (nth n d-e)))
     :hints (("goal" :in-theory (enable d-e-p)))
     :rule-classes
     ((:rewrite
       :corollary (implies (and (d-e-p d-e)
                                (< (nfix n) *ms-d-e-length*))
                           (acl2-numberp (nth n d-e)))))))

  (make-event
   `(defthm
      lofat-remove-file-correctness-1-lemma-34
      (implies
       (and (equal (mod (len (explode dir-contents))
                        *ms-d-e-length*)
                   0)
            (equal (mod n *ms-d-e-length*) 0))
       (equal (remove1-d-e (implode (append (explode dir-contents)
                                                (make-list-ac n ,(code-char 0) nil)))
                               filename)
              (implode (append (explode (remove1-d-e dir-contents filename))
                               (make-list-ac n (code-char 0) nil)))))
      :hints (("goal" :in-theory (enable remove1-d-e)
               :induct (remove1-d-e dir-contents filename))
              ("subgoal *1/1" :expand (len (explode dir-contents))))))

  (make-event
   `(defthm
      lofat-remove-file-correctness-1-lemma-35
      (implies
       (and
        (equal (mod (length dir-contents)
                    *ms-d-e-length*)
               0)
        (equal (mod n *ms-d-e-length*) 0)
        (equal
         (len
          (explode (remove1-d-e (remove1-d-e dir-contents ".          ")
                                    "..         ")))
         (+ -64 (len (explode dir-contents)))))
       (<=
        (len
         (explode
          (remove1-d-e
           (remove1-d-e (implode (append (explode dir-contents)
                                             (make-list-ac n ,(code-char 0) nil)))
                            ".          ")
           "..         ")))
        (+
         -32
         (len
          (explode (remove1-d-e (implode (append (explode dir-contents)
                                                     (make-list-ac n ,(code-char 0) nil)))
                                    ".          "))))))
      :hints
      (("goal" :in-theory (enable remove1-d-e nfix)
        :induct (remove1-d-e dir-contents ".          "))
       ("subgoal *1/4.4''"
        :in-theory (disable lofat-remove-file-correctness-1-lemma-34)
        :use
        (:instance
         lofat-remove-file-correctness-1-lemma-34
         (filename *parent-dir-fat32-name*)
         (dir-contents
          (remove1-d-e (implode (nthcdr 32 (explode dir-contents)))
                           *current-dir-fat32-name*))))
       ("subgoal *1/3.2'"
        :in-theory (disable lofat-remove-file-correctness-1-lemma-34)
        :use
        (:instance (:rewrite lofat-remove-file-correctness-1-lemma-34)
                   (filename "..         ")
                   (n n)
                   (dir-contents (implode (nthcdr 32 (explode dir-contents)))))))
      :rule-classes :linear)))

(make-event
 `(defthmd
    lofat-remove-file-correctness-1-lemma-36
    (implies
     (and (unsigned-byte-listp 8 dir-contents)
          (subdir-contents-p (nats=>string dir-contents))
          (fat32-filename-p filename)
          (equal (mod n 32) 0)
          (equal (mod (length dir-contents) 32)
                 0))
     (subdir-contents-p
      (implode (append (nats=>chars (clear-d-e dir-contents filename))
                       (make-list-ac n ,(code-char 0) nil)))))
    :hints
    (("goal"
      :in-theory (e/d (subdir-contents-p nats=>string
                                         fat32-filename-p)
                      (lofat-remove-file-correctness-1-lemma-34
                       lofat-remove-file-correctness-1-lemma-35))
      :use ((:instance (:linear lofat-remove-file-correctness-1-lemma-35)
                       (dir-contents (implode (nats=>chars dir-contents))))
            (:instance (:rewrite lofat-remove-file-correctness-1-lemma-34)
                       (filename *current-dir-fat32-name*)
                       (dir-contents (implode (nats=>chars dir-contents)))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-39
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2))))
    (<
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2)))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))))
   (not-intersectp-list
    (mv-nth
     0
     (d-e-clusterchain
      fat32-in-memory
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))))
               filename2))))
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
      (+ -1 entry-limit)))))
  :hints
  (("goal"
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
               . 1)
     (entry-limit
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (l
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit))))
     (filename filename2)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (fat32-in-memory fat32-in-memory)))))

(encapsulate
  ()

  (local (include-book "arithmetic-3/top" :dir :system))

  (set-default-hints '((nonlinearp-default-hint stable-under-simplificationp
                                                hist pspv)))

  (defthm
    lofat-remove-file-correctness-1-lemma-40
    (implies
     (lofat-fs-p fat32-in-memory)
     (integerp (binary-* '1/32
                         (cluster-size fat32-in-memory))))
    :hints (("goal" :in-theory (disable lofat-fs-p-correctness-1)
             :use lofat-fs-p-correctness-1)))

  (defthm lofat-remove-file-correctness-1-lemma-41
    (implies
     (and (lofat-fs-p fat32-in-memory)
          (d-e-directory-p d-e))
     (integerp
      (*
       1/32
       (len
        (explode
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory d-e)))))))
    :hints (("goal" :in-theory
             (disable
              root-d-e-list-of-lofat-remove-file-coincident-lemma-2
              lofat-fs-p-correctness-1)
             :use (lofat-fs-p-correctness-1
                   (:instance
                    root-d-e-list-of-lofat-remove-file-coincident-lemma-2
                    (y 32)))) )))

(encapsulate
  ()

  (local (include-book "rtl/rel9/arithmetic/top" :dir :system))

  (make-event
   `(defthm
      lofat-remove-file-correctness-1-lemma-42
      (implies
       (and
        (d-e-directory-p (car d-e-list))
        (lofat-fs-p fat32-in-memory)
        (fat32-filename-p filename2)
        (subdir-contents-p
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
       (subdir-contents-p
        (implode
         (append
          (nats=>chars
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
            filename2))
          (make-list-ac
           (+
            (- (len (explode (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory (car d-e-list))))))
            (*
             (cluster-size fat32-in-memory)
             (len
              (make-clusters
               (nats=>string
                (clear-d-e
                 (string=>nats (mv-nth 0
                                       (d-e-clusterchain-contents
                                        fat32-in-memory (car d-e-list))))
                 filename2))
               (cluster-size fat32-in-memory)))))
           ,(code-char 0) nil)))))
      :hints
      (("goal"
        :use
        (:instance
         (:rewrite lofat-remove-file-correctness-1-lemma-36)
         (n
          (+
           (- (len (explode (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))))
           (*
            (cluster-size fat32-in-memory)
            (len
             (make-clusters
              (nats=>string
               (clear-d-e
                (string=>nats (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory (car d-e-list))))
                filename2))
              (cluster-size fat32-in-memory))))))
         (filename filename2)
         (dir-contents
          (string=>nats
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory
                                                  (car d-e-list)))))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-43
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))
       d-e-list entry-limit))
     0)
    (consp (cdr path))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (fat32-filename-list-p path))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list filename))
                          path))
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0
                        (find-d-e d-e-list filename)))))
      entry-limit))
    0))
  :hints
  (("goal"
    :in-theory (disable (:rewrite lofat-find-file-correctness-1-lemma-6))
    :use
    ((:instance
      (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-coincident)
      (path path)
      (d-e (mv-nth 0 (find-d-e d-e-list filename)))
      (fat32-in-memory fat32-in-memory))
     (:instance (:rewrite lofat-find-file-correctness-1-lemma-6)
                (name filename)
                (d-e-list d-e-list))
     (:instance
      (:rewrite lofat-find-file-correctness-1-lemma-6)
      (name filename)
      (fat32-in-memory
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))))))))

(defthm
  lofat-remove-file-correctness-lemma-1
  (implies
   (and
    (<= 2
        (d-e-first-cluster (car d-e-list)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit)))))
   (equal
    (d-e-clusterchain
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (car d-e-list))
    (d-e-clusterchain fat32-in-memory (car d-e-list))))
  :hints
  (("goal"
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint))
    :use
    (:instance (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint)
               (d-e (car d-e-list))
               (entry-limit (+ -1 entry-limit))
               (root-d-e (mv-nth 0
                                     (find-d-e (cdr d-e-list)
                                                   filename)))))))

(defthm
  lofat-remove-file-correctness-lemma-2
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (<= 2 (d-e-first-cluster d-e))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit)))
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))))
   (no-duplicatesp-equal
    (mv-nth
     0
     (d-e-clusterchain
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (car path)))
        (cdr path)))
      d-e))))
  :hints
  (("goal"
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint)
     (d-e d-e)
     (path (cdr path))
     (root-d-e
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e)))
        (car path))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-remove-file-correctness-lemma-3
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (d-e-directory-p d-e)
    (>= (d-e-first-cluster d-e)
        *ms-first-data-cluster*)
    (< (d-e-first-cluster d-e)
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (fat32-filename-list-p path)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal (mv-nth 1
                   (lofat-remove-file fat32-in-memory d-e path))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit)))
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))))
   (no-duplicatesp-equal
    (mv-nth 0
            (d-e-clusterchain
             (mv-nth 0
                     (lofat-remove-file fat32-in-memory d-e path))
             d-e)))))

(defthm
  lofat-remove-file-correctness-lemma-4
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth 0
              (lofat-remove-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path))
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename)))))
      (+ -1 entry-limit)))
    0))
  :hints
  (("goal"
    :in-theory (enable nfix)
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit1 entry-limit)
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))))))
     (fat32-in-memory
      (mv-nth 0
              (lofat-remove-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path)))))))

(defthm
  lofat-remove-file-correctness-1-lemma-52
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename))))
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (>
    (hifat-entry-count
     (mv-nth 0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e (cdr d-e-list)
                                              filename)))))
              (+ -1 entry-limit))))
    (hifat-entry-count
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       (+ -1 entry-limit))))))
  :rule-classes :linear
  :hints
  (("goal"
    :use
    ((:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 entry-limit)
      (entry-limit2 (+ -1 entry-limit))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 (+ -1 entry-limit))
      (entry-limit2 entry-limit)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory fat32-in-memory))))))

;; Sometimes useless, but needed by some theorems.
(defthm
  lofat-remove-file-correctness-lemma-5
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth 0
              (lofat-remove-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path))
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename)))))
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit))))))))
    0))
  :hints
  (("goal"
    :in-theory (disable lofat-find-file-correctness-1-lemma-6)
    :use
    ((:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 entry-limit)
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))))
     (:instance
      lofat-find-file-correctness-1-lemma-6
      (entry-limit
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (name filename)
      (d-e-list (cdr d-e-list))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (entry-limit2 entry-limit)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory fat32-in-memory))))))

(defthmd
  lofat-remove-file-correctness-1-lemma-61
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (not (zp entry-limit))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename)))))
     entry-limit)
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename)))))
     (+ -1 entry-limit))))
  :hints
  (("goal"
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit1 entry-limit)
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))))))
     (fat32-in-memory
      (mv-nth 0
              (lofat-remove-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path)))))))

;; Very handy!
(defthm
  lofat-remove-file-correctness-1-lemma-6
  (implies
   (and
    (<= 2
        (d-e-first-cluster (car d-e-list)))
    (consp (cdr path))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit))))
    (fat32-filename-list-p path))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (lofat-remove-file fat32-in-memory (car d-e-list)
                                      path))
           (car d-e-list))
          (d-e-clusterchain fat32-in-memory (car d-e-list))))
  :hints
  (("goal"
    :expand (lofat-remove-file fat32-in-memory (car d-e-list)
                               path)
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint)
     (entry-limit (- entry-limit 1))
     (d-e (car d-e-list))
     (path (cdr path))
     (root-d-e
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (car path))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-remove-file-correctness-1-lemma-7
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (>
    (hifat-entry-count
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (hifat-entry-count
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :rule-classes :linear
  :hints
  (("goal"
    :in-theory (e/d (nfix) ((:linear lofat-to-hifat-helper-correctness-3)))
    :use
    ((:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit2 entry-limit)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     (:instance
      (:rewrite lofat-to-hifat-helper-correctness-4)
      (entry-limit2 entry-limit)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path)))
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     (:instance
      (:linear lofat-to-hifat-helper-correctness-3)
      (entry-limit
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))))))))

;; Hypotheses minimised.
(defthm
  lofat-remove-file-correctness-1-lemma-9
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename1)))))
        filename2))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename1)))))
        filename2)))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename1)))
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename1)))))
         filename2))))
     0)
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list filename1)))))
       filename2))
     0)
    (lofat-fs-p fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e d-e-list filename1))))
   (not-intersectp-list
    (mv-nth
     0
     (d-e-clusterchain
      fat32-in-memory
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename1)))))
        filename2))))
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename1)))
        (nats=>string
         (clear-d-e
          (string=>nats
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename1)))))
          filename2))))
      d-e-list entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                            not-intersectp-list)
     (nth-of-effective-fat
      (:definition binary-append)
      (:definition len)
      (:rewrite lofat-to-hifat-helper-of-update-dir-contents)
      (:linear lofat-to-hifat-helper-correctness-3)
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                . 2)
      (:rewrite member-intersectp-binary-append . 1)
      (:rewrite subdir-contents-p-when-zero-length)
      (:rewrite flatten-subset-no-duplicatesp-lemma-2)
      (:rewrite member-intersectp-is-commutative-lemma-2)
      (:rewrite lofat-to-hifat-helper-of-delete-d-e-2
                . 1)
      (:rewrite
       get-clusterchain-contents-of-lofat-remove-file-coincident-lemma-5
       . 2)
      (:rewrite consp-of-make-list-ac)
      (:definition delete-d-e)
      (:rewrite delete-d-e-correctness-1)
      (:definition non-free-index-list-listp)
      (:definition remove-assoc-equal)
      (:linear make-clusters-correctness-2)
      (:rewrite clear-clusterchain-reversibility-lemma-1)
      (:rewrite len-of-effective-fat)
      (:definition make-list-ac)
      (:rewrite subsetp-car-member)
      (:rewrite lofat-remove-file-correctness-1-lemma-16)
      (:rewrite subsetp-implies-subsetp-cdr)
      (:rewrite not-intersectp-list-when-atom)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite another-lemma-about-member-intersectp)
      (:rewrite lofat-remove-file-correctness-1-lemma-17)
      (:rewrite lofat-remove-file-correctness-1-lemma-14)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :do-not-induct t
    :expand ((:free (y) (intersectp-equal nil y))
             (:free (fat32-in-memory entry-limit)
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit))))))

(defthmd
  lofat-remove-file-correctness-1-lemma-37
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (not (zp entry-limit))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory (car d-e-list)
                                  path))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       entry-limit))
     0)
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory (car d-e-list)
                                   path))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit))))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory (car d-e-list)
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
     (+ -1 entry-limit))
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory (car d-e-list)
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
     entry-limit)))
  :hints
  (("goal"
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit1 entry-limit)
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
     (fat32-in-memory
      (mv-nth 0
              (lofat-remove-file fat32-in-memory (car d-e-list)
                                 path)))))))

(defthmd
  lofat-remove-file-correctness-1-lemma-38
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     0)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-remove-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e (cdr d-e-list)
                                        filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth 0
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))))
               entry-limit)))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename)))))
     (+
      -1 entry-limit
      (-
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper
                 fat32-in-memory
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory (car d-e-list))))
                 (+ -1 entry-limit)))))))
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename)))))
     entry-limit)))
  :hints
  (("goal"
    :use
    ((:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 entry-limit)
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (entry-limit2 entry-limit)
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename)))))))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 entry-limit)
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))))
     (:instance
      (:linear lofat-to-hifat-helper-correctness-3)
      (entry-limit
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename))))))
      (fat32-in-memory fat32-in-memory))))))

(defthm
  lofat-remove-file-correctness-lemma-10
  (implies
   (not
    (member-intersectp-equal
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit))
     (cons
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))
      (append
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit)))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (delete-d-e (cdr d-e-list)
                         filename)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))))))
   (not
    (member-intersectp-equal
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-remove-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e (cdr d-e-list)
                                       filename)))))
       entry-limit)))))
  :hints
  (("goal"
    :in-theory (disable member-intersectp-is-commutative)
    :use
    ((:instance
      (:rewrite member-intersectp-is-commutative)
      (y
       (cons
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (append
         (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))
         (mv-nth
          2
          (lofat-to-hifat-helper
           fat32-in-memory
           (delete-d-e (cdr d-e-list)
                           filename)
           (+
            -1 entry-limit
            (-
             (hifat-entry-count
              (mv-nth
               0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory (car d-e-list))))
                (+ -1 entry-limit)))))))))))
      (x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth 0
                 (lofat-remove-file fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e (cdr d-e-list)
                                                          filename))
                                    path))
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e (cdr d-e-list)
                                         filename)))))
         entry-limit))))))))

(defund good-root-d-e-p (root-d-e fat32-in-memory)
  (declare (xargs :stobjs fat32-in-memory))
  (b*
      (((unless (and (lofat-fs-p fat32-in-memory)
                     (d-e-p root-d-e)
                     (d-e-directory-p root-d-e)
                     (<= *ms-first-data-cluster* (d-e-first-cluster root-d-e))
                     (< (d-e-first-cluster root-d-e)
                        (+ *ms-first-data-cluster* (count-of-clusters fat32-in-memory)))))
        nil)
       ((mv & error-code) (d-e-clusterchain-contents fat32-in-memory
                                                         root-d-e))
       ((mv clusterchain &)
        (d-e-clusterchain fat32-in-memory root-d-e)))
    (and (equal error-code 0)
         (no-duplicatesp-equal clusterchain))))

(defthm good-root-d-e-p-of-pseudo-root-d-e
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory
                                     (pseudo-root-d-e fat32-in-memory)))
     0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory
                                   (pseudo-root-d-e fat32-in-memory)))))
   (good-root-d-e-p (pseudo-root-d-e fat32-in-memory)
                        fat32-in-memory))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (e/d (good-root-d-e-p)))))

(defun
  insert-d-e-helper
  (dir-contents ac parent-d-e current-d-e)
  (declare
   (xargs
    :guard (and (stringp dir-contents)
                (d-e-list-p ac))
    :measure (length dir-contents)
    :guard-hints (("goal" :in-theory (enable d-e-p)))))
  (b*
      (((when (< (length dir-contents)
                 *ms-d-e-length*))
        (mv (revappend ac nil)
            parent-d-e current-d-e))
       (d-e
        (mbe
         :exec
         (string=>nats (subseq dir-contents 0 *ms-d-e-length*))
         :logic (d-e-fix
                 (chars=>nats (take *ms-d-e-length*
                                    (explode dir-contents))))))
       ((when (equal (char (d-e-filename d-e) 0)
                     (code-char 0)))
        (mv (revappend ac nil)
            parent-d-e current-d-e))
       ((when (equal (d-e-filename d-e)
                     *parent-dir-fat32-name*))
        (insert-d-e-helper
         (subseq dir-contents *ms-d-e-length* nil)
         ac d-e current-d-e))
       ((when (equal (d-e-filename d-e)
                     *current-dir-fat32-name*))
        (insert-d-e-helper
         (subseq dir-contents *ms-d-e-length* nil)
         ac parent-d-e d-e))
       ((when (useless-d-e-p d-e))
        (insert-d-e-helper
         (subseq dir-contents *ms-d-e-length* nil)
         ac parent-d-e current-d-e)))
    (insert-d-e-helper
     (subseq dir-contents *ms-d-e-length* nil)
     (list* d-e ac)
     parent-d-e current-d-e)))

(defthm
  insert-d-e-helper-correctness-1
  (equal (mv-nth 0
                 (insert-d-e-helper
                  dir-contents
                  ac parent-d-e current-d-e))
         (revappend ac (make-d-e-list dir-contents)))
  :hints
  (("goal"
    :in-theory (enable make-d-e-list useless-d-e-p))))

(defund
  insert-d-e (dir-contents d-e)
  (declare
   (xargs :guard (and (d-e-p d-e)
                      (unsigned-byte-listp 8 dir-contents))
          :guard-hints (("goal" :in-theory (enable d-e-p)))))
  (b*
      (((mv d-e-list parent-d-e current-d-e)
        (insert-d-e-helper (nats=>string dir-contents) nil nil nil)))
    (append
     (d-e-set-filename (d-e-fix current-d-e) *current-dir-fat32-name*)
     (d-e-set-filename (d-e-fix parent-d-e) *parent-dir-fat32-name*)
     (flatten (place-d-e d-e-list d-e)))))

(defthm
  unsigned-byte-listp-of-insert-d-e
  (implies
   (unsigned-byte-listp 8 dir-contents)
   (unsigned-byte-listp 8
                        (insert-d-e dir-contents d-e)))
  :hints (("goal" :in-theory (enable insert-d-e))))

(defthm insert-d-e-of-d-e-fix
  (equal (insert-d-e dir-contents (d-e-fix d-e))
         (insert-d-e dir-contents d-e))
  :hints (("goal" :in-theory (enable insert-d-e))))

(defcong
  d-e-equiv equal
  (insert-d-e dir-contents d-e)
  2
  :hints
  (("goal"
    :in-theory
    (disable (:rewrite insert-d-e-of-d-e-fix))
    :use ((:rewrite insert-d-e-of-d-e-fix)
          (:instance (:rewrite insert-d-e-of-d-e-fix)
                     (d-e d-e-equiv))))))

(defthm
  len-of-insert-d-e
  (equal
   (len (insert-d-e dir-contents d-e))
   (* 32
      (+ 2
         (len (place-d-e (make-d-e-list (nats=>string dir-contents))
                             d-e)))))
  :hints (("goal" :in-theory (e/d (insert-d-e len-when-d-e-p)))))

(defthm make-d-e-list-of-insert-d-e-lemma-1
  (implies (< (nfix n) *ms-d-e-length*)
           (natp (nth n (d-e-fix d-e))))
  :hints (("goal" :in-theory (disable (:linear nth-when-d-e-p))
           :use (:instance (:linear nth-when-d-e-p)
                           (d-e (d-e-fix d-e)))))
  :rule-classes :type-prescription)

(defthm
  make-d-e-list-of-insert-d-e-lemma-3
  (implies
   (and (not (equal (nth 0 (explode (d-e-filename d-e)))
                    (code-char 0)))
        (not (useless-d-e-p (d-e-fix d-e))))
   (equal (make-d-e-list (implode (nats=>chars (d-e-fix d-e))))
          (list (d-e-fix d-e))))
  :hints
  (("goal"
    :in-theory (enable make-d-e-list
                       insert-d-e string=>nats
                       nats=>string
                       len-when-d-e-p)
    :do-not-induct t
    :expand
    (make-d-e-list (implode (nats=>chars (d-e-fix d-e)))))))

;; Hypotheses are minimal
(defthm
  make-d-e-list-of-insert-d-e
  (implies
   (and (not (equal (nth 0 (explode (d-e-filename d-e)))
                    (code-char 0)))
        (not (useless-d-e-p (d-e-fix d-e))))
   (equal (make-d-e-list
           (nats=>string (insert-d-e (string=>nats dir-contents)
                                         d-e)))
          (place-d-e (make-d-e-list dir-contents)
                         d-e)))
  :hints (("goal" :in-theory (enable make-d-e-list insert-d-e
                                     string=>nats nats=>string))))

(defthm stringp-of-insert-d-e
  (implies (unsigned-byte-listp 8 dir-contents)
           (unsigned-byte-listp 8
                                (insert-d-e dir-contents d-e)))
  :hints (("goal" :in-theory (enable insert-d-e))))

(defthm lofat-place-file-correctness-lemma-1
  (implies (good-root-d-e-p root-d-e fat32-in-memory)
           (and
            (d-e-p root-d-e)
            (d-e-directory-p root-d-e)
            (lofat-fs-p fat32-in-memory)
            (>= (d-e-first-cluster root-d-e) *ms-first-data-cluster*)
            (< (d-e-first-cluster root-d-e)
               (binary-+ '2
                         (count-of-clusters fat32-in-memory)))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable good-root-d-e-p)))
  :rule-classes :forward-chaining)

(defthm
  lofat-place-file-correctness-lemma-5
  (implies
   (good-root-d-e-p root-d-e fat32-in-memory)
   (equal
    (mv-nth 1
            (d-e-clusterchain-contents fat32-in-memory root-d-e))
    0))
  :hints (("goal" :do-not-induct t
           :in-theory (enable good-root-d-e-p))))

(defthm
  lofat-place-file-correctness-lemma-7
  (implies
   (and (good-root-d-e-p root-d-e fat32-in-memory)
        (not (intersectp-equal
              (mv-nth 0
                      (d-e-clusterchain fat32-in-memory root-d-e))
              x)))
   (not
    (intersectp-equal
     x
     (mv-nth '0
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     (d-e-first-cluster root-d-e)
                                     '2097152
                                     (cluster-size fat32-in-memory))))))
  :hints (("goal" :in-theory (enable d-e-clusterchain
                                     good-root-d-e-p))))

;; This might work.
(defthm
  lofat-place-file-correctness-lemma-9
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory d-e-list (+ x y z)))
     0)
    (<=
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory d-e-list (+ x y z)))
     (nfix (+ x y)))
    (<= z 0))
   (equal (lofat-to-hifat-helper fat32-in-memory d-e-list (+ x y))
          (lofat-to-hifat-helper fat32-in-memory
                                 d-e-list (+ x y z))))
  :hints
  (("goal" :use (:instance (:rewrite lofat-to-hifat-helper-correctness-4)
                           (entry-limit2 (+ x y))
                           (entry-limit1 (+ x (+ y z)))))))

(defthm
  lofat-remove-file-correctness-lemma-11
  (implies
   (and
    (<= 2 (d-e-first-cluster d-e))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0))
   (member-equal (d-e-first-cluster d-e)
                 (mv-nth 0
                         (d-e-clusterchain fat32-in-memory d-e))))
  :hints (("goal" :in-theory (enable d-e-clusterchain
                                     d-e-clusterchain-contents))))

(defthm
  lofat-remove-file-correctness-lemma-12
  (implies
   (and (d-e-p d-e)
        (< (d-e-first-cluster d-e)
           (len (effective-fat fat32-in-memory))))
   (bounded-nat-listp (mv-nth '0
                              (d-e-clusterchain fat32-in-memory d-e))
                      (binary-+ '2
                                (count-of-clusters fat32-in-memory))))
  :hints (("goal" :in-theory (enable d-e-clusterchain nfix))))

(defthm
  lofat-remove-file-correctness-lemma-13
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (d-e-directory-p d-e)
    (<= *ms-first-data-cluster*
        (d-e-first-cluster d-e))
    (> (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory))
       (d-e-first-cluster d-e))
    (stringp dir-contents)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))))
   (equal
    (mv-nth 1
            (update-dir-contents fat32-in-memory
                                 (d-e-first-cluster d-e)
                                 dir-contents))
    (if
     (and (< 0 (len (explode dir-contents)))
          (< (+ (count-free-clusters (effective-fat fat32-in-memory))
                (len (mv-nth 0
                             (d-e-clusterchain fat32-in-memory d-e))))
             (len (make-clusters dir-contents
                                 (cluster-size fat32-in-memory)))))
     *enospc* 0)))
  :hints (("goal" :in-theory (enable update-dir-contents
                                     d-e-clusterchain-contents
                                     clear-clusterchain-correctness-1))))

(defthm lofat-place-file-correctness-lemma-145
  (implies (lofat-regular-file-p file)
           (> (ash 1 32)
              (len (explode (lofat-file->contents file)))))
  :hints (("goal" :in-theory (enable lofat-regular-file-p
                                     lofat-file->contents)))
  :rule-classes :linear)

;; The most natural form of this theorem is prone to infinite looping, so...
(defthm
  lofat-place-file-correctness-lemma-2
  (implies (and (hifat-equiv fs1 fs2)
                (m1-file-alist-p fs1)
                (m1-file-alist-p fs2))
           (equal
            (hifat-equiv (cons (cons name (m1-file d-e fs1))
                               y)
                         (cons (cons name (m1-file d-e fs2))
                               y))
            t))
  :hints (("goal" :in-theory (enable hifat-equiv
                                     hifat-subsetp hifat-file-alist-fix
                                     hifat-no-dups-p m1-file-contents-fix
                                     m1-file-contents-p))))

(defthm
  lofat-place-file-correctness-lemma-77
  (equal (hifat-equiv (cons (cons name (m1-file d-e1 fs))
                            y)
                      (cons (cons name (m1-file d-e2 fs))
                            y))
         t)
  :hints (("goal" :in-theory (enable hifat-equiv
                                     hifat-subsetp hifat-file-alist-fix
                                     hifat-no-dups-p m1-file-contents-fix
                                     m1-file-contents-p))))

;; Slightly better version of non-free-index-listp-correctness-2 for
;; clusterchains.
(defthm
  lofat-place-file-correctness-lemma-18
  (implies
   (and (<= *ms-first-data-cluster*
            (d-e-first-cluster d-e))
        (equal (mv-nth 1
                       (d-e-clusterchain fat32-in-memory d-e))
               0)
        (equal (fat32-entry-mask (nth key (effective-fat fat32-in-memory)))
               0))
   (not
    (member-equal key
                  (mv-nth 0
                          (d-e-clusterchain fat32-in-memory d-e)))))
  :hints
  (("goal"
    :in-theory (disable non-free-index-listp-correctness-2)
    :use
    (:instance non-free-index-listp-correctness-2
               (x (mv-nth 0
                          (d-e-clusterchain fat32-in-memory d-e)))
               (fa-table (effective-fat fat32-in-memory))))))

(defund
  make-empty-subdir-contents
  (current-dir-first-cluster parent-dir-first-cluster)
  (declare (xargs :guard (and
                          (fat32-masked-entry-p current-dir-first-cluster)
                          (fat32-masked-entry-p parent-dir-first-cluster))))
  (nats=>string
   (append (d-e-set-first-cluster-file-size
            (d-e-set-filename (d-e-fix nil)
                                  *current-dir-fat32-name*)
            current-dir-first-cluster 0)
           (d-e-set-first-cluster-file-size
            (d-e-set-filename (d-e-fix nil)
                                  *parent-dir-fat32-name*)
            parent-dir-first-cluster 0))))

(defthm
  length-of-make-empty-subdir-contents
  (equal (len (explode (make-empty-subdir-contents current-dir-first-cluster
                                                   parent-dir-first-cluster)))
         64)
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-empty-subdir-contents
                              len-when-d-e-p))))

(defthm
  make-d-e-list-of-make-empty-subdir-contents
  (equal
   (make-d-e-list (make-empty-subdir-contents current-dir-first-cluster
                                                  parent-dir-first-cluster))
   nil)
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-empty-subdir-contents
                              make-d-e-list len-when-d-e-p))))

(defthm
  lofat-place-file-correctness-lemma-21
  (implies
   (good-root-d-e-p root-d-e fat32-in-memory)
   (>=
    2097152
    (*
     (cluster-size fat32-in-memory)
     (len
      (make-clusters
       (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
       (cluster-size fat32-in-memory))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (enable make-empty-subdir-contents
                       make-clusters len-when-d-e-p
                       nthcdr-when->=-n-len-l)
    :expand
    (make-clusters
     (nats=>string (append (d-e-set-first-cluster-file-size
                            '(46 32 32 32 32 32 32 32 32 32 32 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                            i 0)
                           (d-e-set-first-cluster-file-size
                            '(46 46 32 32 32 32 32 32 32 32 32 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                            (d-e-first-cluster root-d-e)
                            0)))
     (cluster-size fat32-in-memory))))
  :rule-classes :linear)

(defthm
  lofat-place-file-correctness-lemma-22
  (implies
   (and (fat32-masked-entry-p i)
        (good-root-d-e-p root-d-e fat32-in-memory)
        (not (stringp y)))
   (subdir-contents-p
    (implode
     (append
      (explode
       (make-empty-subdir-contents i (d-e-first-cluster root-d-e)))
      y))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable subdir-contents-p
                              make-empty-subdir-contents
                              remove1-d-e))))

(defthm
  lofat-place-file-correctness-lemma-34
  (implies
   (natp masked-current-cluster)
   (nat-listp (mv-nth 0
                      (fat32-build-index-list fa-table masked-current-cluster
                                              length cluster-size))))
  :hints (("goal" :in-theory (enable fat32-build-index-list nat-listp))))

(defthm
  lofat-place-file-correctness-lemma-33
  (implies
   (and
    (not
     (intersectp-equal
      (mv-nth '0
              (fat32-build-index-list (effective-fat fat32-in-memory)
                                      masked-current-cluster
                                      length (cluster-size fat32-in-memory)))
      (mv-nth '0
              (d-e-clusterchain fat32-in-memory d-e))))
    (lofat-fs-p fat32-in-memory)
    (natp masked-current-cluster))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (clear-clusterchain fat32-in-memory
                                       masked-current-cluster length))
           d-e)
          (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (e/d (d-e-clusterchain d-e-clusterchain-contents
                                          get-clusterchain-contents
                                          clear-clusterchain)
                    (d-e-clusterchain-contents-of-clear-clusterchain)))))

(defthm lofat-place-file-correctness-lemma-44
  (implies
   (and
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list) name)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (case-split
     (member-equal
      i
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))))
    (useful-d-e-list-p d-e-list))
   (not
    (member-equal
     i
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         name)))))))
  :hints
  (("goal"
    :do-not-induct t
    :use
    (:instance
     intersectp-member (a i)
     (x (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list))))
     (y (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            name)))))))))

(encapsulate
  ()

  (local
   (in-theory
    (disable
     (:rewrite
      member-intersectp-of-set-difference$-lemma-2)
     (:rewrite not-intersectp-list-when-subsetp-2)
     (:rewrite subsetp-when-atom-right)
     (:rewrite subsetp-car-member)
     (:rewrite subsetp-trans2)
     (:rewrite subsetp-trans)
     (:rewrite member-of-append)
     (:rewrite
      not-intersectp-list-of-set-difference$-lemma-2
      . 1)
     (:rewrite
      not-intersectp-list-of-set-difference$-lemma-1)
     (:rewrite natp-of-car-when-nat-listp)
     (:definition binary-append)
     (:rewrite
      d-e-p-when-member-equal-of-d-e-list-p)
     (:rewrite
      lofat-to-hifat-helper-of-update-dir-contents)
     (:rewrite
      lofat-remove-file-correctness-1-lemma-43)
     (:rewrite
      fat32-build-index-list-of-effective-fat-of-place-contents-disjoint)
     (:rewrite
      nat-listp-if-fat32-masked-entry-list-p)
     (:rewrite len-of-insert-d-e)
     (:rewrite
      d-e-clusterchain-of-clear-clusterchain)
     (:rewrite place-contents-expansion-2)
     (:rewrite len-of-place-d-e)
     (:rewrite member-when-atom)
     (:rewrite
      useful-d-e-list-p-of-place-d-e)
     (:rewrite fat32-filename-p-correctness-1)
     (:rewrite
      lofat-to-hifat-helper-of-clear-clusterchain)
     (:rewrite
      d-e-clusterchain-of-update-dir-contents)
     (:rewrite
      d-e-clusterchain-contents-of-update-dir-contents-disjoint)
     (:rewrite put-assoc-equal-without-change . 2)
     (:rewrite len-of-find-n-free-clusters)
     (:rewrite
      d-e-clusterchain-contents-of-clear-clusterchain)
     (:definition
      stobj-find-n-free-clusters-correctness-1))))

  (local
   (defun-nx
     induction-scheme
     (d-e-list entry-limit fat32-in-memory x)
     (cond
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit))
        (d-e-directory-p (car d-e-list))
        (>= (d-e-first-cluster (car d-e-list))
            2)
        (> (+ (count-of-clusters fat32-in-memory)
              2)
           (d-e-first-cluster (car d-e-list))))
       (induction-scheme
        (cdr d-e-list)
        (+
         entry-limit
         (-
          (+
           1
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit)))))))
        fat32-in-memory
        (append
         (mv-nth 0
                 (d-e-clusterchain
                  fat32-in-memory (car d-e-list)))
         (flatten
          (mv-nth
           2
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory (car d-e-list))))
            (+ -1 entry-limit))))
         x)))
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit))
        ;; (not (d-e-directory-p (car d-e-list)))
        (>= (d-e-first-cluster (car d-e-list))
            2)
        (> (+ (count-of-clusters fat32-in-memory)
              2)
           (d-e-first-cluster (car d-e-list))))
       (induction-scheme
        (cdr d-e-list)
        (- entry-limit 1)
        fat32-in-memory
        (append
         (mv-nth 0
                 (d-e-clusterchain
                  fat32-in-memory (car d-e-list)))
         x)))
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit)))
       (induction-scheme
        (cdr d-e-list)
        (- entry-limit 1)
        fat32-in-memory
        x))
      (t
       (mv d-e-list entry-limit fat32-in-memory x)))))

  (defthm
    lofat-remove-file-correctness-1-lemma-2
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (useful-d-e-list-p d-e-list)
      (fat32-filename-p filename1)
      (fat32-filename-p filename2)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (d-e-directory-p (mv-nth 0
                                   (find-d-e d-e-list filename1)))
      (equal
       (mv-nth
        1
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename1)))))
         filename2))
       0)
      (equal
       (mv-nth
        1
        (update-dir-contents
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e d-e-list filename1)))
         (nats=>string
          (clear-d-e
           (string=>nats
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename1)))))
           filename2))))
       0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))))
     (and
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster (mv-nth 0
                                          (find-d-e d-e-list filename1)))
           (nats=>string
            (clear-d-e
             (string=>nats
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename1)))))
             filename2))))
         d-e-list entry-limit))
       (put-assoc-equal
        filename1
        (m1-file
         (mv-nth 0 (find-d-e d-e-list filename1))
         (remove-assoc-equal
          filename2
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename1)))))
            entry-limit))))
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster (mv-nth 0
                                          (find-d-e d-e-list filename1)))
           (nats=>string
            (clear-d-e
             (string=>nats
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename1)))))
             filename2))))
         d-e-list entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster (mv-nth 0
                                          (find-d-e d-e-list filename1)))
           (nats=>string
            (clear-d-e
             (string=>nats
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename1)))))
             filename2))))
         d-e-list entry-limit)))))
    :hints
    (("goal"
      :in-theory
      (e/d (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                                  not-intersectp-list)
           (nth-of-effective-fat))
      :induct
      (induction-scheme
       d-e-list entry-limit fat32-in-memory x)
      :expand (:free (fat32-in-memory entry-limit)
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (lofat-fs-p fat32-in-memory)
        (useful-d-e-list-p d-e-list)
        (fat32-filename-p filename1)
        (fat32-filename-p filename2)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (d-e-directory-p (mv-nth 0
                                     (find-d-e d-e-list filename1)))
        (equal
         (mv-nth
          1
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename1)))))
           filename2))
         0)
        (equal
         (mv-nth
          1
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster (mv-nth 0
                                          (find-d-e d-e-list filename1)))
           (nats=>string
            (clear-d-e
             (string=>nats
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename1)))))
             filename2))))
         0)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (update-dir-contents
            fat32-in-memory
            (d-e-first-cluster (mv-nth 0
                                           (find-d-e d-e-list filename1)))
            (nats=>string
             (clear-d-e
              (string=>nats
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename1)))))
              filename2))))
          d-e-list entry-limit)))))))

  (defthm
    lofat-remove-file-correctness-1-lemma-3
    (implies
     (and
      (consp (cdr path))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
         entry-limit))
       0)
      (not-intersectp-list
       (mv-nth
        0
        (d-e-clusterchain fat32-in-memory
                              (mv-nth 0
                                      (find-d-e d-e-list filename))))
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
         entry-limit)))
      (not
       (member-intersectp-equal
        (mv-nth 2
                (lofat-to-hifat-helper fat32-in-memory
                                       (delete-d-e d-e-list filename)
                                       entry-limit))
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (lofat-remove-file fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list filename))
                              path))
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename)))))
          entry-limit))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
         entry-limit)))
      (lofat-fs-p fat32-in-memory)
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (fat32-filename-list-p path)
      (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (<
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          (mv-nth
           0
           (lofat-remove-file fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list filename))
                              path))
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename)))))
          entry-limit)))
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename)))))
          entry-limit)))))
     (and
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         d-e-list entry-limit))
       0)
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         d-e-list entry-limit))
       (put-assoc-equal
        filename
        (m1-file
         (mv-nth 0 (find-d-e d-e-list filename))
         (mv-nth
          0
          (lofat-to-hifat-helper
           (mv-nth
            0
            (lofat-remove-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list filename))
                               path))
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename)))))
           entry-limit)))
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         d-e-list entry-limit)))))
    :hints
    (("goal"
      :do-not-induct t
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :in-theory
      (e/d
       (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                              lofat-remove-file-correctness-1-lemma-61
                              lofat-remove-file-correctness-1-lemma-37
                              lofat-remove-file-correctness-1-lemma-38)
       (lofat-remove-file
        nth-of-effective-fat
        (:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
        (:definition no-duplicatesp-equal)
        (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                  . 1)
        (:rewrite assoc-of-car-when-member)
        (:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint)
        (:rewrite d-e-clusterchain-of-lofat-remove-file-disjoint)
        (:rewrite take-of-len-free)
        (:rewrite
         d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-2)
        (:rewrite lofat-to-hifat-helper-of-delete-d-e-2
                  . 2)
        (:rewrite lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-1
                  . 1)
        (:rewrite hifat-to-lofat-inversion-lemma-2)
        (:definition assoc-equal)
        (:rewrite not-intersectp-list-when-atom)
        (:rewrite subdir-contents-p-when-zero-length)
        (:rewrite hifat-no-dups-p-of-cdr)
        (:rewrite free-index-list-listp-correctness-1)
        (:rewrite m1-file-alist-p-when-subsetp-equal)
        (:linear hifat-entry-count-when-hifat-subsetp)
        (:rewrite lofat-remove-file-correctness-lemma-5)
        (:definition remove-assoc-equal)
        (:linear lofat-remove-file-correctness-1-lemma-27)
        (:definition alistp)
        (:rewrite m1-file-alist-p-of-remove-assoc-equal)
        (:definition len)
        (:definition take)))
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (intersectp-equal nil x))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (consp (cdr path))
        (equal
         (mv-nth
          3
          (lofat-to-hifat-helper
           (mv-nth
            0
            (lofat-remove-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list filename))
                               path))
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename)))))
           entry-limit))
         0)
        (not-intersectp-list
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list filename))))
         (mv-nth
          2
          (lofat-to-hifat-helper
           (mv-nth
            0
            (lofat-remove-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list filename))
                               path))
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename)))))
           entry-limit)))
        (not
         (member-intersectp-equal
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         (delete-d-e d-e-list filename)
                                         entry-limit))
          (mv-nth
           2
           (lofat-to-hifat-helper
            (mv-nth
             0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list filename))
                                path))
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename)))))
            entry-limit))))
        (not-intersectp-list
         x
         (mv-nth
          2
          (lofat-to-hifat-helper
           (mv-nth
            0
            (lofat-remove-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list filename))
                               path))
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename)))))
           entry-limit)))
        (lofat-fs-p fat32-in-memory)
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (fat32-filename-list-p path)
        (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
        (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
           (+ 2 (count-of-clusters fat32-in-memory)))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (<
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            (mv-nth
             0
             (lofat-remove-file fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list filename))
                                path))
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename)))))
            entry-limit)))
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename)))))
            entry-limit)))))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (lofat-remove-file fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list filename))
                              path))
          d-e-list entry-limit)))))))

  (local (include-book "std/lists/intersectp" :dir :system))

  ;; Hypotheses minimised.
  (defthm
    lofat-place-file-correctness-lemma-120
    (implies
     (and
      (good-root-d-e-p root-d-e fat32-in-memory)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (useful-d-e-list-p d-e-list)
      (fat32-masked-entry-p i)
      (<= *ms-first-data-cluster* i)
      (lofat-regular-file-p file)
      (equal
       (fat32-entry-mask
        (nth
         i
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))))
          (make-list-ac
           (len (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
           0 nil))))
       0)
      (equal
       (mv-nth
        2
        (place-contents
         (update-fati
          i
          (fat32-update-lower-28 (fati i fat32-in-memory)
                                 268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
            (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
         (mv-nth 0 (find-d-e d-e-list name))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         i))
       0)
      (< 0
         (len (explode$inline (lofat-file->contents$inline file))))
      (<= *ms-first-data-cluster*
          (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (not (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name))))
      (< i
         (+ 2 (count-of-clusters fat32-in-memory))))
     (and
      (hifat-equiv
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       (d-e-file-size
                        (mv-nth 0 (find-d-e d-e-list name))))))
             (mv-nth 0 (find-d-e d-e-list name))
             (lofat-file->contents file)
             (len (explode (lofat-file->contents file)))
             i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i
              (len (explode (lofat-file->contents file))))))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i
                         (len (explode (lofat-file->contents file)))))
         entry-limit))
       (put-assoc-equal
        name
        (m1-file d-e (lofat-file->contents file))
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       (d-e-file-size
                        (mv-nth 0 (find-d-e d-e-list name))))))
             (mv-nth 0 (find-d-e d-e-list name))
             (lofat-file->contents file)
             (len (explode (lofat-file->contents file)))
             i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i
              (len (explode (lofat-file->contents file))))))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i
                         (len (explode (lofat-file->contents file)))))
         entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       (d-e-file-size
                        (mv-nth 0 (find-d-e d-e-list name))))))
             (mv-nth 0 (find-d-e d-e-list name))
             (lofat-file->contents file)
             (len (explode (lofat-file->contents file)))
             i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i
              (len (explode (lofat-file->contents file))))))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i
                         (len (explode (lofat-file->contents file)))))
         entry-limit)))))
    :hints
    (("goal"
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :do-not-induct t
      :in-theory
      (e/d (lofat-to-hifat-helper lofat-to-hifat-helper-correctness-4
                                  lofat-remove-file-correctness-1-lemma-61
                                  lofat-remove-file-correctness-1-lemma-37
                                  lofat-remove-file-correctness-1-lemma-38
                                  find-d-e)
           nil)
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (:free (d-e fat32-in-memory
                               d-e-list entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             (cons d-e d-e-list)
                                             entry-limit)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (good-root-d-e-p root-d-e fat32-in-memory)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (useful-d-e-list-p d-e-list)
        (fat32-masked-entry-p i)
        (<= *ms-first-data-cluster* i)
        (lofat-regular-file-p file)
        (equal
         (fat32-entry-mask
          (nth
           i
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0 (find-d-e d-e-list name))))
            (make-list-ac
             (len (mv-nth 0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
             0 nil))))
         0)
        (equal
         (mv-nth
          2
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
              (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
           (mv-nth 0 (find-d-e d-e-list name))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           i))
         0)
        (< 0
           (len (explode$inline (lofat-file->contents$inline file))))
        (<= *ms-first-data-cluster*
            (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
        (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
           (+ 2 (count-of-clusters fat32-in-memory)))
        (not (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name))))
        (< i
           (+ 2 (count-of-clusters fat32-in-memory))))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (update-dir-contents
            (mv-nth
             0
             (place-contents
              (update-fati
               i
               (fat32-update-lower-28 (fati i fat32-in-memory)
                                      268435455)
               (mv-nth 0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth 0 (find-d-e d-e-list name)))
                        (d-e-file-size
                         (mv-nth 0 (find-d-e d-e-list name))))))
              (mv-nth 0 (find-d-e d-e-list name))
              (lofat-file->contents file)
              (len (explode (lofat-file->contents file)))
              i))
            (d-e-first-cluster root-d-e)
            (nats=>string
             (insert-d-e
              (string=>nats
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (d-e-set-first-cluster-file-size
               (mv-nth 0 (find-d-e d-e-list name))
               i
               (len (explode (lofat-file->contents file))))))))
          (place-d-e d-e-list
                         (d-e-set-first-cluster-file-size
                          (mv-nth 0 (find-d-e d-e-list name))
                          i
                          (len (explode (lofat-file->contents file)))))
          entry-limit)))))))

  ;; hypotheses minimised.
  (defthm
    lofat-place-file-correctness-lemma-37
    (implies
     (and
      (equal
       (mv-nth
        2
        (place-contents
         (update-fati
          i
          (fat32-update-lower-28 (fati i fat32-in-memory)
                                 268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
            2097152)))
         (mv-nth 0 (find-d-e d-e-list name))
         (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
         0 i))
       0)
      (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
      (good-root-d-e-p root-d-e fat32-in-memory)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (fat32-masked-entry-p i)
      (<= 2 i)
      (< i
         (+ 2 (count-of-clusters fat32-in-memory)))
      (equal
       (fat32-entry-mask
        (nth
         i
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))))
          (make-list-ac
           (len (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
           0 nil))))
       0)
      (useful-d-e-list-p d-e-list))
     (and
      (hifat-equiv
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       2097152)))
             (mv-nth 0 (find-d-e d-e-list name))
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i 0)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i 0))
         entry-limit))
       (put-assoc-equal
        name (m1-file d-e nil)
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       2097152)))
             (mv-nth 0 (find-d-e d-e-list name))
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i 0)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i 0))
         entry-limit)))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (mv-nth 0 (find-d-e d-e-list name)))
                       2097152)))
             (mv-nth 0 (find-d-e d-e-list name))
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0 (find-d-e d-e-list name))
              i 0)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         i 0))
         entry-limit))
       0)))
    :hints
    (("goal"
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (:free (d-e fat32-in-memory
                               d-e-list entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             (cons d-e d-e-list)
                                             entry-limit))
               (:free (x) (intersectp-equal nil x)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (equal
         (mv-nth
          2
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
              2097152)))
           (mv-nth 0 (find-d-e d-e-list name))
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         0)
        (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
        (good-root-d-e-p root-d-e fat32-in-memory)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (fat32-masked-entry-p i)
        (<= 2 i)
        (< i
           (+ 2 (count-of-clusters fat32-in-memory)))
        (case-split
         (equal
          (fat32-entry-mask
           (nth
            i
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))))
             (make-list-ac
              (len (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
              0 nil))))
          0))
        (useful-d-e-list-p d-e-list))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (update-dir-contents
            (mv-nth
             0
             (place-contents
              (update-fati
               i
               (fat32-update-lower-28 (fati i fat32-in-memory)
                                      268435455)
               (mv-nth 0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth 0 (find-d-e d-e-list name)))
                        2097152)))
              (mv-nth 0 (find-d-e d-e-list name))
              (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
              0 i))
            (d-e-first-cluster root-d-e)
            (nats=>string
             (insert-d-e
              (string=>nats
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (d-e-set-first-cluster-file-size
               (mv-nth 0 (find-d-e d-e-list name))
               i 0)))))
          (place-d-e d-e-list
                         (d-e-set-first-cluster-file-size
                          (mv-nth 0 (find-d-e d-e-list name))
                          i 0))
          entry-limit))))))))

(defthm
  lofat-remove-file-correctness-1-lemma-4
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (fat32-filename-p filename1)
    (fat32-filename-p filename2)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e d-e-list filename1)))
    (equal
     (mv-nth
      1
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list filename1)))))
       filename2))
     0)
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list filename1)))
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename1)))))
         filename2))))
     0))
   (and
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e d-e-list filename1)))
         (nats=>string
          (clear-d-e
           (string=>nats
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename1)))))
           filename2))))
       d-e-list entry-limit))
     (put-assoc-equal
      filename1
      (m1-file
       (mv-nth 0 (find-d-e d-e-list filename1))
       (remove-assoc-equal
        filename2
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename1)))))
          entry-limit))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e d-e-list filename1)))
         (nats=>string
          (clear-d-e
           (string=>nats
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename1)))))
           filename2))))
       d-e-list entry-limit))
     0)))
  :hints
  (("goal" :in-theory (disable
                       lofat-remove-file-correctness-1-lemma-2)
    :use (:instance
          lofat-remove-file-correctness-1-lemma-2
          (x nil)))))

;; The hypotheses for this lemma have been trimmed to the extent that
;; remove-hyps can handle.
(defthm
  lofat-remove-file-correctness-1-lemma-5
  (implies
   (and
    (consp (cdr path))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list filename)))))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list filename)))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     (delete-d-e d-e-list filename)
                                     entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list filename))
                            path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename)))))
        entry-limit))))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (fat32-filename-list-p path)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list filename)))
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list filename))
                            path))
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename)))))
        entry-limit)))
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename)))))
        entry-limit)))))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))
       d-e-list entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list filename))
                           path))
       d-e-list entry-limit))
     (put-assoc-equal
      filename
      (m1-file
       (mv-nth 0 (find-d-e d-e-list filename))
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-remove-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list filename))
                             path))
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
         entry-limit)))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))))
  :hints (("goal" :in-theory (disable lofat-remove-file-correctness-1-lemma-3)
           :use (:instance lofat-remove-file-correctness-1-lemma-3
                           (x nil)))))

(defthm
  lofat-place-file-correctness-lemma-142
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (useful-d-e-list-p d-e-list)
    (fat32-masked-entry-p i)
    (<= 2 i)
    (lofat-regular-file-p file)
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))))
        (make-list-ac
         (len (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0 (find-d-e d-e-list name)))))
         0 nil))))
     0)
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (mv-nth
         0
         (clear-clusterchain
          fat32-in-memory
          (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
          (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
       (mv-nth 0 (find-d-e d-e-list name))
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       i))
     0)
    (< 0
       (len (explode (lofat-file->contents file))))
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (not (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name))))
    (< i
       (+ 2 (count-of-clusters fat32-in-memory))))
   (and
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list name)))
                     (d-e-file-size
                      (mv-nth 0 (find-d-e d-e-list name))))))
           (mv-nth 0 (find-d-e d-e-list name))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth 0 (find-d-e d-e-list name))
            i
            (len (explode (lofat-file->contents file))))))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list name))
                       i
                       (len (explode (lofat-file->contents file)))))
       entry-limit))
     (put-assoc-equal
      name
      (m1-file d-e (lofat-file->contents file))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list name)))
                     (d-e-file-size
                      (mv-nth 0 (find-d-e d-e-list name))))))
           (mv-nth 0 (find-d-e d-e-list name))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth 0 (find-d-e d-e-list name))
            i
            (len (explode (lofat-file->contents file))))))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list name))
                       i
                       (len (explode (lofat-file->contents file)))))
       entry-limit))
     0)))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-place-file-correctness-lemma-120)
           :use (:instance lofat-place-file-correctness-lemma-120
                           (x nil)))))

(defthm
  lofat-place-file-correctness-lemma-38
  (implies
   (and
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (mv-nth
         0
         (clear-clusterchain
          fat32-in-memory
          (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
          2097152)))
       (mv-nth 0 (find-d-e d-e-list name))
       (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
       0 i))
     0)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (fat32-masked-entry-p i)
    (<= 2 i)
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (case-split
     (equal
      (fat32-entry-mask
       (nth
        i
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list name))))
         (make-list-ac
          (len (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
          0 nil))))
      0))
    (useful-d-e-list-p d-e-list))
   (and
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list name)))
                     2097152)))
           (mv-nth 0 (find-d-e d-e-list name))
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth 0 (find-d-e d-e-list name))
            i 0)))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list name))
                       i 0))
       entry-limit))
     (put-assoc-equal
      name (m1-file (d-e-fix nil) nil)
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list name)))
                     2097152)))
           (mv-nth 0 (find-d-e d-e-list name))
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth 0 (find-d-e d-e-list name))
            i 0)))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list name))
                       i 0))
       entry-limit))
     0)))
  :hints (("goal" :in-theory (disable lofat-place-file-correctness-lemma-37)
           :do-not-induct t
           :use (:instance lofat-place-file-correctness-lemma-37
                           (x nil)
                           (d-e (d-e-fix nil))))))

;; Hypotheses minimised.
(defthmd
  lofat-remove-file-correctness-lemma-14
  (b*
      (((mv & error-code)
        (hifat-remove-file
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit))
         path)))
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (d-e-p root-d-e)
      (d-e-directory-p root-d-e)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper
                      fat32-in-memory
                      (make-d-e-list
                       (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                      entry-limit))
             0)
      (<= *ms-first-data-cluster* (d-e-first-cluster root-d-e))
      (< (d-e-first-cluster root-d-e)
         (+ *ms-first-data-cluster* (count-of-clusters fat32-in-memory)))
      (equal
       (mv-nth 1 (d-e-clusterchain-contents fat32-in-memory root-d-e))
       0)
      (no-duplicatesp-equal
       (mv-nth '0
               (d-e-clusterchain fat32-in-memory root-d-e))))
     (equal
      (mv-nth
       1
       (lofat-remove-file fat32-in-memory root-d-e path))
      error-code)))
  :hints
  (("goal"
    :induct (lofat-remove-file fat32-in-memory root-d-e path)
    :expand
    (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15))))

(defthm
  lofat-remove-file-correctness-lemma-15
  (implies
   (and
    (consp (cddr path))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (fat32-filename-list-p path)
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      entry-limit))
    0))
  :hints
  (("goal"
    :cases
    ((equal
      (mv-nth
       1
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      0))
    :use
    ((:instance
      (:rewrite lofat-remove-file-correctness-lemma-14)
      (path (cdr path))
      (root-d-e
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:linear hifat-entry-count-of-hifat-remove-file)
      (path (cdr path))
      (fs
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))))))))

(defthm
  lofat-remove-file-correctness-lemma-16
  (implies
   (and
    (consp (cddr path))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (fat32-filename-list-p path)
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      entry-limit))))
  :hints
  (("goal"
    :cases
    ((equal
      (mv-nth
       1
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      0))
    :use
    ((:instance
      (:rewrite lofat-remove-file-correctness-lemma-14)
      (path (cdr path))
      (root-d-e
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:linear hifat-entry-count-of-hifat-remove-file)
      (path (cdr path))
      (fs
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))))))))

(defthm
  lofat-remove-file-correctness-lemma-17
  (implies
   (and
    (consp (cddr path))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (fat32-filename-list-p path)
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      entry-limit))
    (put-assoc-equal
     (car path)
     (m1-file
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))
      (mv-nth
       0
       (hifat-remove-file
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path))))))
          entry-limit))
        (cdr path))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))))
  :hints
  (("goal"
    :cases
    ((equal
      (mv-nth
       1
       (hifat-remove-file
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path))))))
          entry-limit))
        (cdr path)))
      0))
    :in-theory (disable (:rewrite lofat-remove-file-correctness-2)
                        (:rewrite lofat-remove-file-correctness-1-lemma-5))
    :use
    ((:instance
      (:rewrite lofat-remove-file-correctness-2)
      (path (cdr path))
      (root-d-e
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:rewrite lofat-remove-file-correctness-lemma-14)
      (path (cdr path))
      (root-d-e
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))))
      (fat32-in-memory fat32-in-memory))
     (:instance
      (:rewrite lofat-remove-file-correctness-1-lemma-5)
      (entry-limit entry-limit)
      (path (cdr path))
      (filename (car path))
      (d-e-list
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory root-d-e))))
      (fat32-in-memory fat32-in-memory))))))

(defthm lofat-remove-file-correctness-lemma-18
 (implies
  (and
   (good-root-d-e-p root-d-e fat32-in-memory)
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      entry-limit))
    0)
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain fat32-in-memory root-d-e))
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      entry-limit))))
  (equal
   (mv-nth
    3
    (lofat-to-hifat-helper
     (mv-nth
      0
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster root-d-e)
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
            (car path)))))
        root-d-e)))
     entry-limit))
   0))
 :hints
 (("goal" :expand (lofat-remove-file fat32-in-memory root-d-e path)
   :in-theory (enable hifat-remove-file
                      (:rewrite lofat-to-hifat-inversion-lemma-4)
                      lofat-to-hifat-inversion-lemma-15
                      good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-19
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster root-d-e)
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     0)
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        (d-e-file-size
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           (d-e-file-size
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))))
         root-d-e)))
      entry-limit))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-20
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster root-d-e)
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     0)
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        (d-e-file-size
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           (d-e-file-size
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))))
         root-d-e)))
      entry-limit))
    0))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-21
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster root-d-e)
       (nats=>string
        (clear-d-e
         (string=>nats
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     0)
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        (d-e-file-size
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           (d-e-file-size
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))))
         root-d-e)))
      entry-limit))
    (remove-assoc-equal
     (car path)
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-22
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster root-d-e)
        (nats=>string
         (clear-d-e
          (string=>nats
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster root-d-e)
           (nats=>string
            (clear-d-e
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
             (car path)))))
         root-d-e)))
      entry-limit))
    (remove-assoc-equal
     (car path)
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-23
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory))
   (equal
    (mv-nth
     1
     (update-dir-contents
      fat32-in-memory
      (d-e-first-cluster root-d-e)
      (nats=>string
       (clear-d-e
        (string=>nats
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    0))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-24
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster root-d-e)
        (nats=>string
         (clear-d-e
          (string=>nats
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (update-dir-contents
           fat32-in-memory
           (d-e-first-cluster root-d-e)
           (nats=>string
            (clear-d-e
             (string=>nats (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
             (car path)))))
         root-d-e)))
      entry-limit))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-25
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        2097152))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           2097152))
         root-d-e)))
      entry-limit))
    (remove-assoc-equal
     (car path)
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm
  lofat-remove-file-correctness-lemma-26
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       name))))
   (good-root-d-e-p
    (mv-nth
     0
     (find-d-e
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
      name))
    fat32-in-memory))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-27
  (implies
   (and
    (consp path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth
            0
            (lofat-remove-file
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path)))
             (cdr path)))
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (fat32-filename-list-p path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (lofat-remove-file
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
             (car path)))
           (cdr path)))
         root-d-e)))
      entry-limit))
    (put-assoc-equal
     (car path)
     (m1-file
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))
      (mv-nth
       0
       (hifat-remove-file
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             fat32-in-memory
             (mv-nth 0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
          entry-limit))
        (cdr path))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-28
  (implies
   (and
    (consp path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth
            0
            (lofat-remove-file
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path)))
             (cdr path)))
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (fat32-filename-list-p path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (lofat-remove-file
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
             (car path)))
           (cdr path)))
         root-d-e)))
      entry-limit))
    0))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-29
  (implies
   (and
    (consp path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit))
     (mv-nth
      0
      (hifat-remove-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         entry-limit))
       (cdr path))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (delete-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth
         0
         (lofat-remove-file
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (cdr path)))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth
            0
            (lofat-remove-file
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path)))
             (cdr path)))
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        entry-limit))))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-remove-file
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (cdr path)))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-remove-file
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (cdr path)))
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       entry-limit)))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (non-free-index-listp x (effective-fat fat32-in-memory))
    (fat32-filename-list-p path)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (lofat-remove-file
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (cdr path)))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (lofat-remove-file
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
             (car path)))
           (cdr path)))
         root-d-e)))
      entry-limit))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-30
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (not-intersectp-list
    x
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        2097152))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           2097152))
         root-d-e)))
      entry-limit))))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(defthm lofat-remove-file-correctness-lemma-31
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (mv-nth
       0
       (clear-clusterchain
        (mv-nth
         0
         (update-dir-contents
          fat32-in-memory
          (d-e-first-cluster root-d-e)
          (nats=>string
           (clear-d-e
            (string=>nats
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (d-e-first-cluster
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))
        2097152))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (clear-clusterchain
           (mv-nth
            0
            (update-dir-contents
             fat32-in-memory
             (d-e-first-cluster root-d-e)
             (nats=>string
              (clear-d-e
               (string=>nats (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
               (car path)))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
           2097152))
         root-d-e)))
      entry-limit))
    0))
  :hints
  (("goal" :do-not-induct t
    :expand (lofat-remove-file fat32-in-memory root-d-e path)
    :in-theory (enable hifat-remove-file
                       (:rewrite lofat-to-hifat-inversion-lemma-4)
                       lofat-to-hifat-inversion-lemma-15
                       good-root-d-e-p))))

(encapsulate
  ()

  (local
   (defun-nx
     induction-scheme
     (entry-limit fat32-in-memory path root-d-e x)
     (cond
      ((and
        (consp path)
        (equal
         (mv-nth
          1
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path))))
         0)
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path)))))
        (consp (cdr path)))
       (induction-scheme
        entry-limit
        fat32-in-memory (cdr path)
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (fat32-filename-fix (car path))))
        (append
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path))))))
         (flatten
          (mv-nth
           2
           (lofat-to-hifat-helper
            fat32-in-memory
            (delete-d-e
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path)))
            entry-limit)))
         x)))
      (t
       (mv entry-limit fat32-in-memory path root-d-e x)))))

  ;; hypotheses trimmed.
  (defthm
    lofat-remove-file-correctness-1-lemma-1
    (b*
        (((mv fs &)
          (hifat-remove-file
           (mv-nth 0
                   (lofat-to-hifat-helper
                    fat32-in-memory
                    (make-d-e-list
                     (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                    entry-limit))
           path)))
      (implies
       (and
        (good-root-d-e-p root-d-e fat32-in-memory)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (fat32-filename-list-p path)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper
                        fat32-in-memory
                        (make-d-e-list
                         (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                        entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit)))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit))))
       (and
        (equal
         (mv-nth 3
                 (lofat-to-hifat-helper
                  (mv-nth
                   0
                   (lofat-remove-file fat32-in-memory root-d-e path))
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            (mv-nth
                             0
                             (lofat-remove-file fat32-in-memory root-d-e path))
                            root-d-e)))
                  entry-limit))
         0)
        (equal
         (mv-nth 0
                 (lofat-to-hifat-helper
                  (mv-nth
                   0
                   (lofat-remove-file fat32-in-memory root-d-e path))
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            (mv-nth
                             0
                             (lofat-remove-file fat32-in-memory root-d-e path))
                            root-d-e)))
                  entry-limit))
         fs)
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper
                  (mv-nth
                   0
                   (lofat-remove-file fat32-in-memory root-d-e path))
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            (mv-nth
                             0
                             (lofat-remove-file fat32-in-memory root-d-e path))
                            root-d-e)))
                  entry-limit))))))
    :hints
    (("goal"
      :induct
      (induction-scheme
       entry-limit fat32-in-memory path root-d-e x)
      :expand
      (lofat-remove-file fat32-in-memory root-d-e path)
      :in-theory (e/d
                  (hifat-remove-file
                   (:rewrite lofat-to-hifat-inversion-lemma-4)
                   lofat-to-hifat-inversion-lemma-15)
                  ((:rewrite d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-9)
                   (:rewrite intersectp-is-commutative)
                   (:forward-chaining lofat-place-file-correctness-lemma-1)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (good-root-d-e-p root-d-e fat32-in-memory)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (fat32-filename-list-p path)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper
                        fat32-in-memory
                        (make-d-e-list
                         (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                        entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit)))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit))))
       (not-intersectp-list
        x
        (mv-nth 2
                (lofat-to-hifat-helper
                 (mv-nth
                  0
                  (lofat-remove-file fat32-in-memory root-d-e path))
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           (mv-nth
                            0
                            (lofat-remove-file fat32-in-memory root-d-e path))
                           root-d-e)))
                 entry-limit))))))))

;; Hypotheses trimmed.
(defthm
  lofat-remove-file-correctness-1
  (b*
      (((mv fs &)
        (hifat-remove-file
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                  entry-limit))
         path)))
    (implies
     (and
      (good-root-d-e-p root-d-e fat32-in-memory)
      (fat32-filename-list-p path)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper
                      fat32-in-memory
                      (make-d-e-list
                       (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                      entry-limit))
             0)
      (not-intersectp-list
       (mv-nth 0 (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth 2
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                entry-limit))))
     (and
      (equal
       (mv-nth 3
               (lofat-to-hifat-helper
                (mv-nth
                 0
                 (lofat-remove-file fat32-in-memory root-d-e path))
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          (mv-nth
                           0
                           (lofat-remove-file fat32-in-memory root-d-e path))
                          root-d-e)))
                entry-limit))
       0)
      (equal
       (mv-nth 0
               (lofat-to-hifat-helper
                (mv-nth
                 0
                 (lofat-remove-file fat32-in-memory root-d-e path))
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          (mv-nth
                           0
                           (lofat-remove-file fat32-in-memory root-d-e path))
                          root-d-e)))
                entry-limit))
       fs))))
  :hints
  (("goal"
    :in-theory (e/d (hifat-remove-file)
                    (lofat-remove-file-correctness-1-lemma-1))
    :use
    (:instance
     lofat-remove-file-correctness-1-lemma-1
     (x nil)))))

(encapsulate
  ()

  (local (include-book "rtl/rel9/arithmetic/top" :dir :system))

  ;; Hypotheses are minimal.
  (make-event
   `(defthm
      make-d-e-list-of-append-4
      (implies
       (and (d-e-p d-e)
            (not (useless-d-e-p d-e))
            (fat32-filename-p (d-e-filename d-e))
            (equal (mod (len (explode dir-contents))
                        *ms-d-e-length*)
                   0))
       (equal
        (make-d-e-list
         (implode
          (append
           (nats=>chars (insert-d-e (string=>nats dir-contents)
                                        d-e))
           (make-list-ac n ,(code-char 0) nil))))
        (place-d-e (make-d-e-list dir-contents)
                       d-e)))
      :hints
      (("goal" :do-not-induct t
        :in-theory
        (e/d (make-d-e-list d-e-fix insert-d-e string=>nats
                                nats=>string fat32-filename-p)))))))

(defund make-d-e-with-filename (filename)
  (declare
   (xargs
    :guard (and (stringp filename)
                (equal (length filename) 11))))
  (d-e-set-filename (d-e-fix nil) filename))

(defthm d-e-p-of-make-d-e-with-filename
  (d-e-p (make-d-e-with-filename filename))
  :hints (("goal" :in-theory (enable make-d-e-with-filename))))

(defthm
  not-d-e-directory-p-of-make-d-e-with-filename
  (implies (fat32-filename-p filename)
           (not (d-e-directory-p (make-d-e-with-filename filename))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-d-e-with-filename))))

(defthm
  d-e-first-cluster-of-make-d-e-with-filename
  (implies
   (fat32-filename-p filename)
   (equal (d-e-first-cluster (make-d-e-with-filename filename))
          0))
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-d-e-with-filename))))

(defthm
  d-e-filename-of-make-d-e-with-filename
  (implies (fat32-filename-p filename)
           (equal (d-e-filename (make-d-e-with-filename filename))
                  filename))
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-d-e-with-filename))))

;; While proving the correctness of lofat-place-file, this bears remembering.
(thm
 (implies
  (and (hifat-no-dups-p fs)
       (m1-file-alist-p fs)
       (zp (mv-nth 1 (hifat-place-file fs path file)))
       (consp (assoc-equal (fat32-filename-fix (car path))
                           fs))
       (atom (cdr path)))
  (equal
   (m1-directory-file-p (cdr (assoc-equal (fat32-filename-fix (car path))
                                          fs)))
   (m1-directory-file-p (m1-file-fix file))))
 :hints (("goal" :in-theory (enable hifat-place-file))))

(defun
    lofat-place-file
    (fat32-in-memory root-d-e path file)
  (declare
   (xargs
    :guard (and (lofat-fs-p fat32-in-memory)
                (d-e-p root-d-e)
                (>= (d-e-first-cluster root-d-e) *ms-first-data-cluster*)
                (< (d-e-first-cluster root-d-e)
                   (+ *ms-first-data-cluster*
                      (count-of-clusters fat32-in-memory)))
                (fat32-filename-list-p path)
                (lofat-file-p file)
                (or (lofat-regular-file-p file)
                    (equal (lofat-file->contents file) nil)))
    :measure (acl2-count path)
    :stobjs fat32-in-memory
    :verify-guards nil))
  (b* (((unless (consp path)) (mv fat32-in-memory *enoent*))
       ;; Design choice - calls which ask for the entire root directory to be affected will fail.
       (name (mbe :logic (fat32-filename-fix (car path)) :exec (car path)))
       ((mv dir-contents &) (d-e-clusterchain-contents fat32-in-memory root-d-e))
       (d-e-list (make-d-e-list dir-contents))
       ((mv d-e error-code) (find-d-e d-e-list name))
       ;; If it's not there, it's a new file. In either case, though, we shouldn't give it the name
       ;; of the old file, that is, we shouldn't be inserting a directory entry with the name of
       ;; the old file. We may be moving a file and changing its name in the process.
       (d-e (if (equal error-code 0) d-e
                  (make-d-e-with-filename name)))
       (d-e (if (equal error-code 0) d-e
                  (d-e-install-directory-bit d-e (lofat-directory-file-p file))))
       ;; ENOTDIR - can't act on anything that supposedly exists inside a regular file.
       ((when (and (consp (cdr path)) (not (d-e-directory-p d-e))))
        (mv fat32-in-memory *enotdir*))
       (first-cluster (d-e-first-cluster d-e))
       ((when (and (or (< first-cluster 2)
                       (<= (+ 2 (count-of-clusters fat32-in-memory)) first-cluster))
                   (consp (cdr path))))
        (mv fat32-in-memory *eio*))
       ;; Recursion
       ((when(consp(cdr path))) (lofat-place-file fat32-in-memory d-e (cdr path) file))
       ;; After these conditionals, the only remaining possibility is that (cdr path)
       ;; is an atom, which means we need to place a regular file or an empty directory, which
       ;; we have now ensured in the guard.
       (length (if (d-e-directory-p d-e) *ms-max-dir-size* (d-e-file-size d-e)))
       ;; Replacing a directory with a regular file is not permitted.
       ((when (or (and (d-e-directory-p d-e)
                       (lofat-regular-file-p file))
                  (and (not (d-e-directory-p d-e))
                       (lofat-directory-file-p file))))
        (mv fat32-in-memory *enoent*))
       ((mv fat32-in-memory &)
        (if (or (< first-cluster 2) (<= (+ 2 (count-of-clusters fat32-in-memory)) first-cluster))
            (mv fat32-in-memory 0) (clear-clusterchain fat32-in-memory first-cluster length)))
       ;; We're going to have to refer to two different values of file-length:
       ;; one which refers to how much space we need to allocate, which will be
       ;; non-zero for directories (remember, we're not adding any root
       ;; directories lol so we need to have dot and dotdot entries) and
       ;; another which refers to the filesize field in the directory entry,
       ;; which will be zero for directories.
       (file-length (if (lofat-regular-file-p file)
                        (length (lofat-file->contents file))
                      ;; 32 bytes for dot, 32 bytes for dotdot.
                      (+ *ms-d-e-length* *ms-d-e-length*)))
       ;; Note, this value of new-dir-contents only gets used when file-length
       ;; is zero - an empty regular file.
       (new-dir-contents
        (nats=>string (insert-d-e (string=>nats dir-contents)
                                      (d-e-set-first-cluster-file-size d-e 0 0))))
       ((when (and (zp file-length) (<= (length new-dir-contents) *ms-max-dir-size*)))
        (update-dir-contents fat32-in-memory (d-e-first-cluster root-d-e)
                             new-dir-contents))
       ((when (zp file-length)) (mv fat32-in-memory *enospc*))
       (indices (stobj-find-n-free-clusters fat32-in-memory 1))
       ((when (< (len indices) 1)) (mv fat32-in-memory *enospc*))
       (first-cluster (nth 0 indices))
       ;; Mark this cluster as used, without possibly interfering with any
       ;; existing clusterchains.
       (fat32-in-memory (update-fati first-cluster (fat32-update-lower-28
                                                    (fati first-cluster fat32-in-memory)
                                                    *ms-end-of-clusterchain*)
                                     fat32-in-memory))
       (contents (if (lofat-regular-file-p file) (lofat-file->contents file)
                   ;; Our guard ensures that the contents of this directory
                   ;; file are empty - so the only thing here is to add a dot
                   ;; entry and a dotdot entry.
                   (make-empty-subdir-contents first-cluster
                                               (d-e-first-cluster root-d-e))))
       ;; OK, we've been done with the previous value of file-length for a
       ;; while. Now, we need a value that's going in the directory entry.
       (file-length (if (lofat-regular-file-p file) (length contents) 0))
       ((mv fat32-in-memory d-e error-code &)
        (place-contents fat32-in-memory d-e contents file-length first-cluster))
       ((unless (zp error-code)) (mv fat32-in-memory error-code))
       (new-dir-contents (nats=>string (insert-d-e (string=>nats dir-contents) d-e)))
       ((unless (<= (length new-dir-contents) *ms-max-dir-size*)) (mv fat32-in-memory *enospc*)))
    (update-dir-contents
     fat32-in-memory
     (d-e-first-cluster root-d-e)
     new-dir-contents)))

(defthm
  count-of-clusters-of-lofat-place-file
  (equal
   (count-of-clusters
    (mv-nth
     0
     (lofat-place-file
      fat32-in-memory root-d-e path file)))
   (count-of-clusters fat32-in-memory)))

(defthm
  lofat-fs-p-of-lofat-place-file-lemma-1
  (implies (lofat-file-p file)
           (iff (stringp (lofat-file->contents file))
                (not (lofat-directory-file-p file))))
  :hints
  (("goal" :in-theory (enable lofat-directory-file-p
                              lofat-file-p lofat-file-contents-p
                              lofat-file->contents))))

(defthm
  lofat-fs-p-of-lofat-place-file-lemma-2
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (fat32-filename-fix (car path))))))
      (make-list-ac
       (len
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path)))))))
       0 nil))))
   (<
    (nfix 0)
    (len
     (find-n-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        '0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          '0
          (find-d-e
           (make-d-e-list
            (mv-nth '0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (fat32-filename-fix (car path))))))
       (make-list-ac
        (len
         (mv-nth
          '0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            '0
            (find-d-e
             (make-d-e-list
              (mv-nth
               '0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (fat32-filename-fix (car path)))))))
        '0
        'nil))
      1))))
  :rule-classes :linear)

(defthm
  lofat-fs-p-of-lofat-place-file-lemma-3
  (implies (<= 1
               (count-free-clusters (effective-fat fat32-in-memory)))
           (<= *ms-first-data-cluster*
               (nth '0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          '1)))))

(defthm
  lofat-fs-p-of-lofat-place-file-lemma-4
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (fat32-filename-fix (car path))))))
      (make-list-ac
       (len
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path)))))))
       0 nil))))
   (not
    (<
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth
              '0
              (d-e-clusterchain-contents fat32-in-memory d-e)))
            (fat32-filename-fix (car path))))))
        (make-list-ac
         (len
          (mv-nth
           '0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (fat32-filename-fix (car path)))))))
         '0
         'nil))
       '1))
     '2))))

(defthm
  lofat-fs-p-of-lofat-place-file-lemma-6
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        (d-e-first-cluster
         (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                               (fat32-filename-fix (car path))))
        0 (cluster-size fat32-in-memory)))
      (make-list-ac
       (len
        (mv-nth
         0
         (fat32-build-index-list
          (effective-fat fat32-in-memory)
          (d-e-first-cluster
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 (fat32-filename-fix (car path))))
          0 (cluster-size fat32-in-memory))))
       0 nil))))
   (<=
    *ms-first-data-cluster*
    (nth
     '0
     (find-n-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        '0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (fat32-filename-fix (car path))))
         '0
         (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (mv-nth
          '0
          (fat32-build-index-list
           (effective-fat fat32-in-memory)
           (d-e-first-cluster
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  (fat32-filename-fix (car path))))
           '0
           (cluster-size fat32-in-memory))))
        '0
        'nil))
      '1))))
  :hints
  (("goal"
    :in-theory (enable (:linear find-n-free-clusters-correctness-7))
    :use
    (:instance
     (:linear find-n-free-clusters-correctness-7)
     (n 1)
     (fa-table
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (fat32-filename-fix (car path))))
         0 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (mv-nth
          0
          (fat32-build-index-list
           (effective-fat fat32-in-memory)
           (d-e-first-cluster
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  (fat32-filename-fix (car path))))
           0 (cluster-size fat32-in-memory))))
        0 nil)))
     (m 0))))
  :rule-classes :linear)

;; Consider making this linear, later.
(defthm
  lofat-fs-p-of-lofat-place-file-lemma-8
  (implies (<= 1
               (count-free-clusters (effective-fat fat32-in-memory)))
           (not (< (nth '0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              '1))
                   '0))))

(defthm
  lofat-fs-p-of-lofat-place-file
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (d-e-p root-d-e)
        (>= (d-e-first-cluster root-d-e)
            *ms-first-data-cluster*)
        (< (d-e-first-cluster root-d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory))))
   (lofat-fs-p (mv-nth 0
                       (lofat-place-file fat32-in-memory
                                         root-d-e path file))))
  :hints (("goal" :induct (lofat-place-file fat32-in-memory
                                            root-d-e path file))))

(defthm
  lofat-place-file-guard-lemma-1
  (implies (lofat-regular-file-p file)
           (unsigned-byte-p
            32
            (len (explode (lofat-file->contents file)))))
  :hints (("goal" :in-theory (enable lofat-regular-file-p))))

(defthm
  lofat-place-file-guard-lemma-2
  (implies (and (lofat-file-p file)
                (not (lofat-directory-file-p file)))
           (lofat-regular-file-p file))
  :hints
  (("goal" :in-theory (enable lofat-file-p lofat-regular-file-p
                              lofat-directory-file-p
                              lofat-file-contents-p
                              lofat-file->contents))))

(defthm
  lofat-place-file-guard-lemma-3
  (implies (lofat-directory-file-p file)
           (d-e-list-p (lofat-file->contents file)))
  :hints (("goal" :in-theory (enable lofat-directory-file-p))))

(defthm
  lofat-place-file-guard-lemma-4
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))))
      (make-list-ac
       (len
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       0 nil))))
   (<=
    2
    (nth
     0
     (find-n-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        0 nil))
      1)))))

(defthm
  lofat-place-file-guard-lemma-5
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (fat32-build-index-list
        (effective-fat fat32-in-memory)
        (d-e-first-cluster
         (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                               (car path)))
        0 (cluster-size fat32-in-memory)))
      (make-list-ac
       (len
        (mv-nth
         0
         (fat32-build-index-list
          (effective-fat fat32-in-memory)
          (d-e-first-cluster
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 (car path)))
          0 (cluster-size fat32-in-memory))))
       0 nil))))
   (<=
    *ms-first-data-cluster*
    (nth
     '0
     (find-n-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        '0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (car path)))
         '0
         (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (mv-nth
          '0
          (fat32-build-index-list
           (effective-fat fat32-in-memory)
           (d-e-first-cluster
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  (car path)))
           '0
           (cluster-size fat32-in-memory))))
        '0
        'nil))
      '1))))
  :rule-classes :linear
  :hints
  (("goal"
    :in-theory (disable (:linear find-n-free-clusters-correctness-7))
    :use
    (:instance
     (:linear find-n-free-clusters-correctness-7)
     (n 1)
     (fa-table
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (fat32-build-index-list
         (effective-fat fat32-in-memory)
         (d-e-first-cluster
          (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                (car path)))
         0 (cluster-size fat32-in-memory)))
       (make-list-ac
        (len
         (mv-nth
          0
          (fat32-build-index-list
           (effective-fat fat32-in-memory)
           (d-e-first-cluster
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  (car path)))
           0 (cluster-size fat32-in-memory))))
        0 nil)))
     (m 0)))))

;; Consider making this linear, later.
(defthm
  lofat-place-file-guard-lemma-6
  (implies
   (<=
    1
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))))
      (make-list-ac
       (len
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path))))))
       0 nil))))
   (not
    (<
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth
              '0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (make-list-ac
         (len
          (mv-nth
           '0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))
         '0
         'nil))
       '1))
     '0))))

(verify-guards
  lofat-place-file
  :hints
  (("goal" :in-theory (disable unsigned-byte-p))))

(defthm natp-of-lofat-place-file
  (natp (mv-nth 1
                (lofat-place-file fat32-in-memory
                                  root-d-e path file)))
  :rule-classes :type-prescription)

;; So this is going to be harder than the same lemma for lofat-remove-file
;; because of two reasons: we're actually placing file contents here (at least
;; some of the time) which requires longer sequences of operations, and we're
;; (potentially) overwriting the contents of one file with the contents of
;; another. The longer sequences mean more things have to be saved with the
;; intention of restoring them once something fails further down the pipeline,
;; and the potential overwriting in the data region means we need to be
;; prepared to reason about reversing the effects of stobj-set-clusters, which
;; is called as part of place-contents.

;; (defthm
;;   lofat-place-file-correctness-2
;;   (implies
;;    (and
;;     (lofat-fs-p fat32-in-memory)
;;     (d-e-p root-d-e)
;;     (>= (d-e-first-cluster root-d-e)
;;         *ms-first-data-cluster*)
;;     (< (d-e-first-cluster root-d-e)
;;        (+ *ms-first-data-cluster*
;;           (count-of-clusters fat32-in-memory)))
;;     (fat32-filename-list-p path)
;;     (lofat-file-p file)
;;     (implies (not (lofat-regular-file-p file))
;;              (unsigned-byte-p
;;               32
;;               (* 32 (len (lofat-file->contents file)))))
;;     (not
;;      (zp (mv-nth 1
;;                  (lofat-place-file
;;                   fat32-in-memory root-d-e path file)))))
;;    (equal (mv-nth 0
;;                   (lofat-place-file
;;                    fat32-in-memory root-d-e path file))
;;           fat32-in-memory))
;;   :hints (("goal" :in-theory (enable update-dir-contents-correctness-1
;;                                      clear-clusterchain-correctness-3
;;                                      place-contents-correctness-1))))

(defthm
  hifat-cluster-count-of-put-assoc
  (implies
   (m1-file-alist-p fs)
   (equal
    (hifat-cluster-count (put-assoc-equal name file fs)
                         cluster-size)
    (b*
        ((new-contents (m1-file->contents file))
         ((when (and (atom (assoc-equal name fs))
                     (m1-regular-file-p file)))
          (+ (hifat-cluster-count fs cluster-size)
             (len (make-clusters new-contents cluster-size))))
         ((when (atom (assoc-equal name fs)))
          (+ (hifat-cluster-count fs cluster-size)
             (+ (hifat-cluster-count new-contents cluster-size)
                (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                               cluster-size)))))
         (old-contents
          (m1-file->contents (cdr (assoc-equal name fs))))
         ((when
           (and (m1-directory-file-p (cdr (assoc-equal name fs)))
                (m1-regular-file-p file)))
          (+ (hifat-cluster-count fs cluster-size)
             (len (make-clusters new-contents cluster-size))
             (- (hifat-cluster-count old-contents cluster-size))
             (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                               cluster-size)))))
         ((when (m1-directory-file-p (cdr (assoc-equal name fs))))
          (+ (hifat-cluster-count fs cluster-size)
             (hifat-cluster-count new-contents cluster-size)
             (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                            cluster-size))
             (- (hifat-cluster-count old-contents cluster-size))
             (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                               cluster-size)))))
         ((when (m1-regular-file-p file))
          (+ (hifat-cluster-count fs cluster-size)
             (len (make-clusters new-contents cluster-size))
             (- (len (make-clusters old-contents cluster-size))))))
      (+ (hifat-cluster-count fs cluster-size)
         (hifat-cluster-count new-contents cluster-size)
         (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                        cluster-size))
         (- (len (make-clusters old-contents cluster-size)))))))
  :hints (("goal" :in-theory (enable hifat-cluster-count)
           :induct (put-assoc-equal name file fs))))

(defthm
  hifat-cluster-count-of-hifat-place-file-lemma-2
  (implies
   (and
    (equal (len (cdr path)) 1)
    (m1-directory-file-p (cdr (assoc-equal (car path) fs)))
    (m1-file-alist-p fs)
    (hifat-no-dups-p fs)
    (fat32-filename-list-p path)
    (consp
     (assoc-equal (cadr path)
                  (m1-file->contents (cdr (assoc-equal (car path) fs))))))
   (equal
    (mv-nth 1
            (hifat-find-file
             (m1-file->contents (cdr (assoc-equal (car path) fs)))
             (cdr path)))
    0))
  :hints
  (("goal"
    :expand ((hifat-find-file
              (m1-file->contents (cdr (assoc-equal (car path) fs)))
              (cdr path))
             (len (cdr path))
             (len (cddr path))))))

(defthmd hifat-cluster-count-of-hifat-place-file-lemma-3
  (implies (equal (+ 1 (len (cddr path))) 1)
           (not (consp (cddr path))))
  :hints (("goal" :expand (len (cddr path)))))

(encapsulate
  ()

  (local (include-book "arithmetic-3/top" :dir :system))

  (defthm
    hifat-cluster-count-of-hifat-place-file-lemma-6
    (implies (and (integerp cluster-size)
                  (<= 512 cluster-size))
             (and
              (equal (ceiling 64 cluster-size)
                     1)
              (equal (ceiling 96 cluster-size)
                     1)))))

(defthm
  hifat-cluster-count-of-hifat-place-file-lemma-1
  (implies
   (and
    (consp path)
    (m1-directory-file-p (cdr (assoc-equal (car path) fs)))
    (< 1 (len (cdr path)))
    (equal
     (hifat-cluster-count
      (mv-nth 0
              (hifat-place-file
               (m1-file->contents (cdr (assoc-equal (car path) fs)))
               (cdr path)
               file))
      cluster-size)
     (+
      (len (make-clusters (m1-file->contents file)
                          cluster-size))
      (hifat-cluster-count
       (m1-file->contents (cdr (assoc-equal (car path) fs)))
       cluster-size)
      (-
       (ceiling
        (+
         64
         (*
          32
          (len
           (m1-file->contents
            (mv-nth
             0
             (hifat-find-file
              (m1-file->contents (cdr (assoc-equal (car path) fs)))
              (take (+ -1 (len (cdr path)))
                    (cdr path))))))))
        cluster-size))
      (ceiling
       (+
        96
        (*
         32
         (len
          (m1-file->contents
           (mv-nth
            0
            (hifat-find-file
             (m1-file->contents (cdr (assoc-equal (car path) fs)))
             (take (+ -1 (len (cdr path)))
                   (cdr path))))))))
       cluster-size)))
    (m1-file-alist-p fs)
    (hifat-no-dups-p fs)
    (fat32-filename-list-p path))
   (equal
    (+
     (hifat-cluster-count fs cluster-size)
     (- (hifat-cluster-count
         (m1-file->contents (cdr (assoc-equal (car path) fs)))
         cluster-size))
     (hifat-cluster-count
      (mv-nth 0
              (hifat-place-file
               (m1-file->contents (cdr (assoc-equal (car path) fs)))
               (cdr path)
               file))
      cluster-size))
    (+
     (hifat-cluster-count fs cluster-size)
     (len (make-clusters (m1-file->contents file)
                         cluster-size))
     (-
      (ceiling
       (+ 64
          (* 32
             (len (m1-file->contents
                   (mv-nth 0
                           (hifat-find-file fs
                                            (take (len (cdr path))
                                                  path)))))))
       cluster-size))
     (ceiling
      (+ 96
         (* 32
            (len (m1-file->contents
                  (mv-nth 0
                          (hifat-find-file fs
                                           (take (len (cdr path))
                                                 path)))))))
      cluster-size))))
  :hints (("goal" :expand ((hifat-find-file fs
                                            (cons (car path)
                                                  (take (len (cddr path))
                                                        (cdr path))))
                           (take (+ 1 (len (cddr path)))
                                 path))
           :cases ((equal (consp (cdr (take (+ 1 (len (cddr path)))
                                            path)))
                          (< 1
                             (len (take (+ 1 (len (cddr path)))
                                        path))))))))

(defthm
  hifat-cluster-count-of-hifat-place-file-lemma-4
  (implies
   (and
    (m1-directory-file-p (cdr (assoc-equal (car path) fs)))
    (< 1 (len (cdr path)))
    (equal
     (hifat-cluster-count
      (mv-nth 0
              (hifat-place-file
               (m1-file->contents (cdr (assoc-equal (car path) fs)))
               (cdr path)
               file))
      cluster-size)
     (+
      (hifat-cluster-count (m1-file->contents file)
                           cluster-size)
      (ceiling (+ 64
                  (* 32 (len (m1-file->contents file))))
               cluster-size)
      (hifat-cluster-count
       (m1-file->contents (cdr (assoc-equal (car path) fs)))
       cluster-size)
      (-
       (ceiling
        (+
         64
         (*
          32
          (len
           (m1-file->contents
            (mv-nth
             0
             (hifat-find-file
              (m1-file->contents (cdr (assoc-equal (car path) fs)))
              (take (+ -1 (len (cdr path)))
                    (cdr path))))))))
        cluster-size))
      (ceiling
       (+
        96
        (*
         32
         (len
          (m1-file->contents
           (mv-nth
            0
            (hifat-find-file
             (m1-file->contents (cdr (assoc-equal (car path) fs)))
             (take (+ -1 (len (cdr path)))
                   (cdr path))))))))
       cluster-size)))
    (m1-file-alist-p fs)
    (hifat-no-dups-p fs)
    (fat32-filename-list-p path))
   (equal
    (+
     (hifat-cluster-count fs cluster-size)
     (- (hifat-cluster-count
         (m1-file->contents (cdr (assoc-equal (car path) fs)))
         cluster-size))
     (hifat-cluster-count
      (mv-nth 0
              (hifat-place-file
               (m1-file->contents (cdr (assoc-equal (car path) fs)))
               (cdr path)
               file))
      cluster-size))
    (+
     (hifat-cluster-count fs cluster-size)
     (hifat-cluster-count (m1-file->contents file)
                          cluster-size)
     (ceiling (+ 64
                 (* 32 (len (m1-file->contents file))))
              cluster-size)
     (-
      (ceiling
       (+ 64
          (* 32
             (len (m1-file->contents
                   (mv-nth 0
                           (hifat-find-file fs
                                            (take (len (cdr path))
                                                  path)))))))
       cluster-size))
     (ceiling
      (+ 96
         (* 32
            (len (m1-file->contents
                  (mv-nth 0
                          (hifat-find-file fs
                                           (take (len (cdr path))
                                                 path)))))))
      cluster-size))))
  :hints (("goal" :expand ((hifat-find-file fs
                                            (cons (car path)
                                                  (take (len (cddr path))
                                                        (cdr path))))
                           (take (+ 1 (len (cddr path)))
                                 path))
           :cases ((equal (consp (cdr (take (+ 1 (len (cddr path)))
                                            path)))
                          (< 1
                             (len (take (+ 1 (len (cddr path)))
                                        path))))))))

(encapsulate
  ()

  (local
   (defthmd
     hifat-cluster-count-of-hifat-place-file-lemma-5
     (implies
      (and (m1-file-alist-p fs)
           (hifat-no-dups-p fs)
           (fat32-filename-list-p path)
           (m1-file-p file)
           (integerp cluster-size)
           (<= 512 cluster-size))
      (equal
       (hifat-cluster-count
        (mv-nth 0 (hifat-place-file fs path file))
        cluster-size)
       (b*
           ((new-contents (m1-file->contents file))
            ((when
                 (not (zp (mv-nth 1
                                  (hifat-place-file fs path file)))))
             (hifat-cluster-count fs cluster-size))
            ;; This may be inaccurate because the parent directory's length
            ;; will change.
            ((when
                 (and (not (zp (mv-nth 1 (hifat-find-file fs path))))
                      (m1-regular-file-p file)))
             (+
              (hifat-cluster-count fs cluster-size)
              (len (make-clusters new-contents cluster-size))
              (nfix
               (ceiling
                (*
                 32
                 (+
                  3
                  (len
                   (m1-file->contents
                    (mv-nth
                     0
                     (hifat-find-file fs (butlast path 1)))))))
                cluster-size))
              (-
               (nfix
                (ceiling
                 (*
                  32
                  (+
                   2
                   (len
                    (m1-file->contents
                     (mv-nth
                      0
                      (hifat-find-file fs (butlast path 1)))))))
                 cluster-size)))))
            ;; This may be inaccurate because the parent directory's length
            ;; will change.
            ((when
                 (not (zp (mv-nth 1 (hifat-find-file fs path)))))
             (+ (hifat-cluster-count fs cluster-size)
                (hifat-cluster-count new-contents cluster-size)
                (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                               cluster-size))
                (nfix
                 (ceiling
                  (*
                   32
                   (+
                    3
                    (len
                     (m1-file->contents
                      (mv-nth
                       0
                       (hifat-find-file fs (butlast path 1)))))))
                  cluster-size))
                (-
                 (nfix
                  (ceiling
                   (*
                    32
                    (+
                     2
                     (len
                      (m1-file->contents
                       (mv-nth
                        0
                        (hifat-find-file fs (butlast path 1)))))))
                   cluster-size)))))
            (old-file (mv-nth 0 (hifat-find-file fs path)))
            (old-contents (m1-file->contents old-file))
            ((when (and (m1-regular-file-p file)
                        (m1-regular-file-p old-file)))
             (+ (hifat-cluster-count fs cluster-size)
                (len (make-clusters new-contents cluster-size))
                (- (len (make-clusters old-contents cluster-size)))))
            ((when (m1-regular-file-p file))
             (+ (hifat-cluster-count fs cluster-size)
                (len (make-clusters new-contents cluster-size))
                (- (hifat-cluster-count old-contents cluster-size))
                (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                                  cluster-size)))))
            ((when (m1-regular-file-p old-file))
             (+ (hifat-cluster-count fs cluster-size)
                (hifat-cluster-count new-contents cluster-size)
                (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                               cluster-size))
                (- (len (make-clusters old-contents cluster-size))))))
         (+ (hifat-cluster-count fs cluster-size)
            (hifat-cluster-count new-contents cluster-size)
            (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                           cluster-size))
            (- (hifat-cluster-count old-contents cluster-size))
            (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                              cluster-size)))))))
     :hints
     (("goal" :in-theory
       (e/d (nfix hifat-place-file hifat-find-file
                  hifat-cluster-count-of-hifat-place-file-lemma-3)
            ((:rewrite nfix-when-natp)))
       :induct (hifat-place-file fs path file)))))

  (defthm
    hifat-cluster-count-of-hifat-place-file
    (implies
     (and (integerp cluster-size)
          (<= 512 cluster-size))
     (equal
      (hifat-cluster-count
       (mv-nth 0 (hifat-place-file fs path file))
       cluster-size)
      (b*
          ((new-contents (m1-file->contents file))
           (fs (hifat-file-alist-fix fs))
           (path (fat32-filename-list-fix path))
           (file (m1-file-fix file))
           ((when
                (not (zp (mv-nth 1
                                 (hifat-place-file fs path file)))))
            (hifat-cluster-count fs cluster-size))
           ;; This may be inaccurate because the parent directory's length
           ;; will change.
           ((when
                (and (not (zp (mv-nth 1 (hifat-find-file fs path))))
                     (m1-regular-file-p file)))
            (+
             (hifat-cluster-count fs cluster-size)
             (len (make-clusters new-contents cluster-size))
             (nfix
              (ceiling
               (*
                32
                (+
                 3
                 (len
                  (m1-file->contents
                   (mv-nth
                    0
                    (hifat-find-file fs (butlast path 1)))))))
               cluster-size))
             (-
              (nfix
               (ceiling
                (*
                 32
                 (+
                  2
                  (len
                   (m1-file->contents
                    (mv-nth
                     0
                     (hifat-find-file fs (butlast path 1)))))))
                cluster-size)))))
           ;; This may be inaccurate because the parent directory's length
           ;; will change.
           ((when
                (not (zp (mv-nth 1 (hifat-find-file fs path)))))
            (+ (hifat-cluster-count fs cluster-size)
               (hifat-cluster-count new-contents cluster-size)
               (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                              cluster-size))
               (nfix
                (ceiling
                 (*
                  32
                  (+
                   3
                   (len
                    (m1-file->contents
                     (mv-nth
                      0
                      (hifat-find-file fs (butlast path 1)))))))
                 cluster-size))
               (-
                (nfix
                 (ceiling
                  (*
                   32
                   (+
                    2
                    (len
                     (m1-file->contents
                      (mv-nth
                       0
                       (hifat-find-file fs (butlast path 1)))))))
                  cluster-size)))))
           (old-file (mv-nth 0 (hifat-find-file fs path)))
           (old-contents (m1-file->contents old-file))
           ((when (and (m1-regular-file-p file)
                       (m1-regular-file-p old-file)))
            (+ (hifat-cluster-count fs cluster-size)
               (len (make-clusters new-contents cluster-size))
               (- (len (make-clusters old-contents cluster-size)))))
           ((when (m1-regular-file-p file))
            (+ (hifat-cluster-count fs cluster-size)
               (len (make-clusters new-contents cluster-size))
               (- (hifat-cluster-count old-contents cluster-size))
               (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                                 cluster-size)))))
           ((when (m1-regular-file-p old-file))
            (+ (hifat-cluster-count fs cluster-size)
               (hifat-cluster-count new-contents cluster-size)
               (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                              cluster-size))
               (- (len (make-clusters old-contents cluster-size))))))
        (+ (hifat-cluster-count fs cluster-size)
           (hifat-cluster-count new-contents cluster-size)
           (nfix (ceiling (* 32 (+ 2 (len new-contents)))
                          cluster-size))
           (- (hifat-cluster-count old-contents cluster-size))
           (- (nfix (ceiling (* 32 (+ 2 (len old-contents)))
                             cluster-size)))))))
    :hints
    (("goal"
      :use (:instance
            hifat-cluster-count-of-hifat-place-file-lemma-5
            (fs (hifat-file-alist-fix fs))
            (path (fat32-filename-list-fix path))
            (file (m1-file-fix file)))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-disjoint-lemma-1
  (implies
   (and (>= (d-e-first-cluster d-e)
            *ms-first-data-cluster*)
        (equal (mv-nth 1
                       (d-e-clusterchain fat32-in-memory d-e))
               0)
        (< (d-e-first-cluster d-e)
           (+ *ms-first-data-cluster*
              (count-of-clusters fat32-in-memory)))
        (< (nfix n1)
           (len (find-n-free-clusters (effective-fat fat32-in-memory)
                                      n2)))
        (lofat-fs-p fat32-in-memory))
   (not
    (member-equal (nth n1
                       (find-n-free-clusters (effective-fat fat32-in-memory)
                                             n2))
                  (mv-nth 0
                          (d-e-clusterchain fat32-in-memory d-e)))))
  :hints
  (("goal"
    :in-theory (e/d (nth-when->=-n-len-l)
                    (non-free-index-listp-correctness-2))
    :use
    (:instance non-free-index-listp-correctness-2
               (fa-table (effective-fat fat32-in-memory))
               (x (mv-nth 0
                          (d-e-clusterchain fat32-in-memory d-e)))
               (key (nth n1
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               n2)))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-disjoint-lemma-2
  (implies
   (and
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (fat32-filename-fix (car path))))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (fat32-filename-fix (car path)))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (<= 2 (d-e-first-cluster d-e))
    (< (d-e-first-cluster d-e)
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (<=
     1
     (count-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path))))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path)))))))
        0 nil)))))
   (not
    (member-equal
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth
              '0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (fat32-filename-fix (car path))))))
        (make-list-ac
         (len
          (mv-nth
           '0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path)))))))
         '0
         'nil))
       '1))
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory d-e)))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-listp-correctness-2 . 1))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e)))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (fat32-filename-fix (car path)))))))
           0 nil))
         1)))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (fat32-filename-fix (car path))))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path)))))))
         0 nil))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (d-e-p d-e)
    (equal
     (mv-nth '1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     '0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not (intersectp-equal
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0))
   (equal (d-e-clusterchain-contents
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     root-d-e path file))
           d-e)
          (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints (("goal" :induct (lofat-place-file fat32-in-memory
                                            root-d-e path file)
           :in-theory
           (e/d ()
                ((:rewrite
                  d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
                  . 5))))))

(defthm
  lofat-place-file-correctness-1-lemma-8
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p root-d-e)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0)
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       (car path)))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      '0
      (lofat-place-file
       fat32-in-memory
       (mv-nth
        '0
        (find-d-e
         (make-d-e-list
          (mv-nth
           '0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (cdr path)
       file))
     root-d-e)
    (d-e-clusterchain-contents fat32-in-memory root-d-e)))
  :hints
  (("goal"
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-place-file-disjoint))
    :use
    ((:instance
      (:rewrite d-e-clusterchain-contents-of-lofat-place-file-disjoint)
      (d-e root-d-e)
      (file file)
      (path (cdr path))
      (root-d-e
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path))))
      (fat32-in-memory fat32-in-memory))))))

(defthm lofat-place-file-correctness-1-lemma-9
  (implies (and (not (zp (cluster-size fat32-in-memory)))
                (< 0 (length (lofat-file->contents file))))
           (< 0
              (len (make-clusters (lofat-file->contents file)
                                  (cluster-size fat32-in-memory)))))
  :hints (("goal" :in-theory (enable make-clusters)))
  :rule-classes :linear)

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-1
  (implies
   (and
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit)))
    (<=
     1
     (count-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path)))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        0 nil)))))
   (not
    (member-equal
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth '0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (car path)))))
        (make-list-ac
         (len
          (mv-nth
           '0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path))))))
         '0
         'nil))
       '1))
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory d-e)))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-listp-correctness-2 . 1))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e)))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (car path))))))
           0 nil))
         1)))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (car path)))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path))))))
         0 nil))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-2
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (<=
     1
     (count-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (car path))))))
           (cadr path)))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list
                   (mv-nth
                    0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
                  (car path))))))
             (cadr path))))))
        0 nil))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (member-equal
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth
              '0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth
                '0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   '0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
                 (car path))))))
            (car (cdr path))))))
        (make-list-ac
         (len
          (mv-nth
           '0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             '0
             (find-d-e
              (make-d-e-list
               (mv-nth
                '0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  '0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     '0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (car (cdr path)))))))
         '0
         'nil))
       '1))
     (mv-nth
      '0
      (d-e-clusterchain
       fat32-in-memory
       (mv-nth
        '0
        (find-d-e
         (make-d-e-list
          (mv-nth '0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
         (car path))))))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-listp-correctness-2 . 1))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (x
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (car path))))))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (cadr path)))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e (make-d-e-list
                                   (mv-nth 0
                                           (d-e-clusterchain-contents
                                            fat32-in-memory d-e)))
                                  (car path))))))
                (cadr path))))))
           0 nil))
         1)))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
                 (car path))))))
            (cadr path)))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (cadr path))))))
         0 nil))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-4
  (implies (equal (mv-nth 1 (find-d-e d-e-list filename))
                  0)
           (< 0 (len d-e-list)))
  :rule-classes
  (:linear
   (:linear
    :corollary
    (implies (and (equal (mv-nth 1 (find-d-e d-e-list filename))
                         0)
                  (not (zp x)))
             (< 0 (* x (len d-e-list)))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-5
  (implies
   (and (<= 2 (d-e-first-cluster d-e))
        (equal (mv-nth 1
                       (d-e-clusterchain fat32-in-memory d-e))
               0)
        (no-duplicatesp-equal
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e))))
   (equal
    (count-free-clusters
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory d-e))
      (make-list-ac
       (len (mv-nth 0
                    (d-e-clusterchain fat32-in-memory d-e)))
       0 nil)))
    (+ (count-free-clusters (effective-fat fat32-in-memory))
       (len (mv-nth 0
                    (d-e-clusterchain fat32-in-memory d-e)))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-6
  (and
   (implies
    (and (d-e-directory-p d-e)
         (<= 2 (d-e-first-cluster d-e)))
    (equal (mv-nth 1
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e)
                                       *ms-max-dir-size*))
           (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))))
   (implies
    (and (not (d-e-directory-p d-e))
         (<= 2 (d-e-first-cluster d-e)))
    (equal (mv-nth 1
                   (clear-clusterchain fat32-in-memory
                                       (d-e-first-cluster d-e)
                                       (d-e-file-size d-e)))
           (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e)))))
  :hints (("goal" :in-theory (enable d-e-clusterchain-contents
                                     clear-clusterchain-correctness-1))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-7
  t
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and (<= 2 (d-e-first-cluster d-e))
          (lofat-fs-p fat32-in-memory)
          (d-e-directory-p d-e))
     (equal
      (effective-fat (mv-nth 0
                             (clear-clusterchain fat32-in-memory
                                                 (d-e-first-cluster d-e)
                                                 *ms-max-dir-size*)))
      (if
       (equal (mv-nth 1
                      (clear-clusterchain fat32-in-memory
                                          (d-e-first-cluster d-e)
                                          *ms-max-dir-size*))
              0)
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e))
        (make-list-ac
         (len (mv-nth 0
                      (d-e-clusterchain fat32-in-memory d-e)))
         0 nil))
       (effective-fat fat32-in-memory))))
    :hints (("goal" :in-theory (enable d-e-clusterchain
                                       d-e-clusterchain-contents))))
   (:rewrite
    :corollary
    (implies
     (and (<= 2 (d-e-first-cluster d-e))
          (lofat-fs-p fat32-in-memory)
          (not (d-e-directory-p d-e)))
     (equal
      (effective-fat (mv-nth 0
                             (clear-clusterchain fat32-in-memory
                                                 (d-e-first-cluster d-e)
                                                 (d-e-file-size d-e))))
      (if
       (equal (mv-nth 1
                      (clear-clusterchain fat32-in-memory
                                          (d-e-first-cluster d-e)
                                          (d-e-file-size d-e)))
              0)
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e))
        (make-list-ac
         (len (mv-nth 0
                      (d-e-clusterchain fat32-in-memory d-e)))
         0 nil))
       (effective-fat fat32-in-memory))))
    :hints (("goal" :in-theory (enable d-e-clusterchain
                                       d-e-clusterchain-contents))))))

;; Consider changing to remove free variables...
(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-10
  (implies (<= 2
               (d-e-first-cluster
                (mv-nth 0
                        (find-d-e d-e-list (car path)))))
           (> (len d-e-list) 0))
  :rule-classes :linear)

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-11
  (implies
   (and
    (d-e-directory-p
     (mv-nth
      0
      (find-d-e
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (car path))))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path))))))
        (cadr path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (<=
     1
     (count-free-clusters
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (car path))))))
           (cadr path)))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list
                   (mv-nth
                    0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
                  (car path))))))
             (cadr path))))))
        0 nil))))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))))
   (not
    (member-equal
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
                 (car path))))))
            (cadr path)))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (cadr path))))))
         0 nil))
       1))
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e)))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-listp-correctness-2 . 1))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e)))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (cadr path)))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e (make-d-e-list
                                   (mv-nth 0
                                           (d-e-clusterchain-contents
                                            fat32-in-memory d-e)))
                                  (car path))))))
                (cadr path))))))
           0 nil))
         1)))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
                 (car path))))))
            (cadr path)))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path))))))
              (cadr path))))))
         0 nil))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-12
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p d-e)
    (d-e-directory-p d-e)
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (<=
     (+
      32
      (*
       32
       (len
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e))))))
     2097152)
    (equal
     (mv-nth
      1
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster d-e)
       (nats=>string
        (flatten
         (place-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (d-e-set-first-cluster-file-size
           (d-e-set-filename
            '(0 0 0 0 0 0 0 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
            (d-e-filename (lofat-file->d-e file)))
           0 0))))))
     0))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      0
      (update-dir-contents
       fat32-in-memory
       (d-e-first-cluster d-e)
       (nats=>string
        (flatten
         (place-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory d-e)))
          (d-e-set-first-cluster-file-size
           (d-e-set-filename
            '(0 0 0 0 0 0 0 0 0 0 0 0
                0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
            (d-e-filename (lofat-file->d-e file)))
           0 0))))))
     d-e)
    (if
     (equal
      (mv-nth
       1
       (update-dir-contents
        fat32-in-memory
        (d-e-first-cluster d-e)
        (nats=>string
         (flatten
          (place-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (d-e-set-first-cluster-file-size
            (d-e-set-filename
             '(0 0 0 0 0 0 0 0 0 0 0 0
                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
             (d-e-filename (lofat-file->d-e file)))
            0 0))))))
      0)
     (cons
      (implode
       (append
        (explode
         (nats=>string
          (flatten
           (place-d-e
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (d-e-set-first-cluster-file-size
             (d-e-set-filename
              '(0 0 0 0 0 0 0 0 0 0 0 0
                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              (d-e-filename (lofat-file->d-e file)))
             0 0)))))
        (make-list-ac
         (+
          (-
           (len
            (explode
             (nats=>string
              (flatten
               (place-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (d-e-set-first-cluster-file-size
                 (d-e-set-filename
                  '(0 0 0 0 0 0 0 0 0 0 0 0
                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                  (d-e-filename (lofat-file->d-e file)))
                 0 0)))))))
          (*
           (cluster-size fat32-in-memory)
           (len
            (make-clusters
             (nats=>string
              (flatten
               (place-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
                (d-e-set-first-cluster-file-size
                 (d-e-set-filename
                  '(0 0 0 0 0 0 0 0 0 0 0 0
                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                  (d-e-filename (lofat-file->d-e file)))
                 0 0))))
             (cluster-size fat32-in-memory)))))
         (code-char 0) nil)))
      '(0))
     (d-e-clusterchain-contents fat32-in-memory d-e)))))

(make-event
 `(defthm
    d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
    (implies (and (equal (nth 0 (explode filename))
                         (code-char 0))
                  (useful-d-e-list-p d-e-list))
             (equal (mv-nth 1 (find-d-e d-e-list filename))
                    *enoent*))
    :hints (("goal" :in-theory (enable useful-d-e-list-p)))
    :rule-classes
    (:rewrite
     (:rewrite
      :corollary
      (implies (and (equal (mv-nth 1 (find-d-e d-e-list filename))
                           0)
                    (useful-d-e-list-p d-e-list))
               (not (equal (nth 0 (explode filename))
                           ,(code-char 0))))))))

(defthm
  d-e-clusterchain-contents-of-lofat-place-file-coincident-1
  (b*
      (((mv clusterchain-contents error-code)
        (d-e-clusterchain-contents fat32-in-memory d-e))
       (new-d-e
        (if
         (or (< 0
                (len (explode (lofat-file->contents file))))
             (lofat-directory-file-p file))
         (if
          (<=
           2
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))))
          (if
           (<
            (d-e-first-cluster
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents fat32-in-memory d-e)))
               (car path))))
            (+ 2 (count-of-clusters fat32-in-memory)))
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
                   (car path)))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth
                       0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
                     (car path))))))
                0 nil))
              1))
            (if (lofat-directory-file-p file)
                0
                (len (explode (lofat-file->contents file)))))
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (if (lofat-directory-file-p file)
                0
                (len (explode (lofat-file->contents file))))))
          (if
           (equal
            (mv-nth
             1
             (find-d-e
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))
            0)
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents fat32-in-memory d-e)))
              (car path)))
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (if (lofat-directory-file-p file)
                0
                (len (explode (lofat-file->contents file)))))
           (d-e-set-first-cluster-file-size
            (d-e-install-directory-bit
             (make-d-e-with-filename (car path))
             (lofat-directory-file-p file))
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (if (lofat-directory-file-p file)
                0
                (len (explode (lofat-file->contents file)))))))
         (if
          (equal
           (mv-nth
            1
            (find-d-e
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path)))
           0)
          (d-e-set-first-cluster-file-size
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents fat32-in-memory d-e)))
             (car path)))
           0 0)
          (d-e-set-first-cluster-file-size
           (d-e-install-directory-bit (make-d-e-with-filename (car path))
                                          (lofat-directory-file-p file))
           0 0))))
       (new-contents
        (nats=>chars (insert-d-e (string=>nats clusterchain-contents)
                                     new-d-e))))
    (implies
     (and
      (lofat-fs-p fat32-in-memory)
      (d-e-p d-e)
      (d-e-directory-p d-e)
      (fat32-filename-list-p path)
      (equal error-code 0)
      (equal
       (mv-nth 3
               (lofat-to-hifat-helper fat32-in-memory
                                      (make-d-e-list clusterchain-contents)
                                      entry-limit))
       0)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory d-e))
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      (make-d-e-list clusterchain-contents)
                                      entry-limit)))
      (equal (mv-nth 1
                     (lofat-place-file fat32-in-memory d-e path file))
             0)
      (lofat-file-p file))
     (equal
      (d-e-clusterchain-contents
       (mv-nth 0
               (lofat-place-file fat32-in-memory d-e path file))
       d-e)
      (if
       (atom (cdr path))
       (mv
        (implode
         (append
          new-contents
          (make-list-ac
           (- (* (cluster-size fat32-in-memory)
                 (len (make-clusters (implode new-contents)
                                     (cluster-size fat32-in-memory))))
              (len new-contents))
           (code-char 0)
           nil)))
        0)
       (d-e-clusterchain-contents fat32-in-memory d-e)))))
  :hints
  (("goal"
    :expand (lofat-place-file fat32-in-memory d-e path file)
    :do-not-induct t
    :in-theory
    (e/d (update-dir-contents-correctness-1 nats=>string)
         (explode-of-d-e-filename clear-clusterchain-correctness-1
                                      effective-fat-of-clear-clusterchain)))))

(defthm
  d-e-clusterchain-of-lofat-place-file-disjoint
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (d-e-p d-e)
    (equal
     (mv-nth '1
             (d-e-clusterchain fat32-in-memory root-d-e))
     '0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (not (intersectp-equal
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain fat32-in-memory d-e))
           0)
    (<= 2 (d-e-first-cluster d-e))
    (<= 2 (d-e-first-cluster root-d-e)))
   (equal (d-e-clusterchain
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     root-d-e path file))
           d-e)
          (d-e-clusterchain fat32-in-memory d-e)))
  :hints (("goal" :induct (lofat-place-file fat32-in-memory
                                            root-d-e path file)
           :in-theory
           (disable
            (:rewrite
             d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
             . 5)))))

(defthm
  lofat-to-hifat-helper-of-lofat-place-file-disjoint
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit1))
     0)
    (not
     (member-intersectp-equal
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit2))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        entry-limit1))))
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit2)))
    (useful-d-e-list-p d-e-list)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit1)))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit2)))
    (lofat-fs-p fat32-in-memory)
    (d-e-p root-d-e)
    (d-e-directory-p root-d-e)
    (mv-let (ignore-0 error-code)
      (d-e-clusterchain-contents fat32-in-memory root-d-e)
      (declare (ignore ignore-0))
      (mv-let (clusterchain ignore-0)
        (d-e-clusterchain fat32-in-memory root-d-e)
        (declare (ignore ignore-0))
        (and (equal error-code 0)
             (no-duplicatesp-equal clusterchain)))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-place-file fat32-in-memory root-d-e path file))
     d-e-list entry-limit2)
    (lofat-to-hifat-helper fat32-in-memory
                           d-e-list entry-limit2)))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list)
     (member-intersectp-is-commutative
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nth-of-nats=>chars)
      (:rewrite nth-of-effective-fat)
      (:linear nth-when-d-e-p)
      (:rewrite place-contents-expansion-1)
      (:rewrite place-contents-expansion-2)
      (:definition find-d-e)
      (:rewrite explode-of-d-e-filename)
      (:rewrite length-when-stringp)
      (:rewrite len-of-nats=>chars)
      (:rewrite len-of-insert-d-e)
      (:rewrite d-e-fix-when-d-e-p)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit2)
    :do-not-induct t)))

(defthm
  lofat-place-file-correctness-1-lemma-11
  (implies
   (and (useful-d-e-list-p d-e-list)
        (not (d-e-directory-p (d-e-fix d-e)))
        (zp (mv-nth 3
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit)))
        (> (nfix entry-limit)
           (hifat-entry-count
            (mv-nth 0
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit)))))
   (equal
    (mv-nth 0
            (lofat-to-hifat-helper fat32-in-memory
                                   (place-d-e d-e-list d-e)
                                   entry-limit))
    (put-assoc-equal
     (d-e-filename d-e)
     (m1-file
      d-e
      (if (or (< (d-e-first-cluster (d-e-fix d-e))
                 2)
              (<= (+ 2 (count-of-clusters fat32-in-memory))
                  (d-e-first-cluster (d-e-fix d-e))))
          ""
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory
                                                 (d-e-fix d-e)))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list
                                    entry-limit)))))
  :hints
  (("goal" :in-theory
    (e/d (lofat-to-hifat-helper hifat-entry-count)
         ((:rewrite
           d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
           . 1)
          (:rewrite nth-of-effective-fat)
          (:rewrite nth-of-nats=>chars)
          (:linear nth-when-d-e-p)
          (:rewrite explode-of-d-e-filename)
          (:rewrite take-of-len-free)
          (:rewrite
           hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
          (:rewrite put-assoc-equal-without-change . 2)
          (:rewrite nats=>chars-of-take)
          ))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :do-not-induct t
    :expand (:free (fat32-in-memory d-e d-e-list entry-limit)
                   (lofat-to-hifat-helper fat32-in-memory
                                          (cons d-e d-e-list)
                                          entry-limit)))))

(defthm
  lofat-place-file-correctness-1-lemma-13
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (useful-d-e-list-p d-e-list)
    (<
     (+
      1
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit))))
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory (cdr d-e-list)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))))
     entry-limit))
   (equal (mv-nth 3
                  (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                         (+ -1 entry-limit)))
          0))
  :hints
  (("goal"
    :in-theory
    (enable nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list (cdr d-e-list))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-place-file-correctness-1-lemma-14
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (useful-d-e-list-p d-e-list)
    (<
     (+
      1
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit))))
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory (cdr d-e-list)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))))
     entry-limit)
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))))
   (not-intersectp-list
    x
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                   (+ -1 entry-limit)))))
  :hints
  (("goal"
    :in-theory (enable nfix)
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))))))
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list (cdr d-e-list))))))

;; Hypotheses are minimal.
(defthm
  lofat-place-file-correctness-1-lemma-15
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (not (d-e-directory-p (d-e-fix d-e)))
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
    (> (nfix entry-limit)
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
    (or
     (< (d-e-first-cluster (d-e-fix d-e))
        2)
     (<= (+ 2 (count-of-clusters fat32-in-memory))
         (d-e-first-cluster (d-e-fix d-e)))
     (and
      (equal
       (mv-nth
        1
        (d-e-clusterchain-contents fat32-in-memory (d-e-fix d-e)))
       0)
      (not
       (intersectp-equal x
                         (mv-nth 0
                                 (d-e-clusterchain fat32-in-memory
                                                       (d-e-fix d-e)))))))
    (not-intersectp-list
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))))
   (not-intersectp-list
    x
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   (place-d-e d-e-list d-e)
                                   entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper hifat-entry-count not-intersectp-list)
     ((:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nth-of-effective-fat)
      (:rewrite nth-of-nats=>chars)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite take-of-len-free)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite put-assoc-equal-without-change . 2)
      (:rewrite nats=>chars-of-take)
      (:rewrite hifat-to-lofat-inversion-lemma-2)
      (:REWRITE SUBSETP-CAR-MEMBER)
      (:REWRITE CONSP-OF-ASSOC-OF-HIFAT-FILE-ALIST-FIX)
      (:REWRITE ASSOC-OF-CAR-WHEN-MEMBER)
      (:REWRITE NOT-INTERSECTP-LIST-WHEN-ATOM)
      (:REWRITE SUBDIR-CONTENTS-P-WHEN-ZERO-LENGTH)
      (:DEFINITION BINARY-APPEND)
      (:REWRITE HIFAT-FILE-ALIST-FIX-GUARD-LEMMA-1)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :expand ((:free (fat32-in-memory d-e d-e-list entry-limit)
                    (lofat-to-hifat-helper fat32-in-memory
                                           (cons d-e d-e-list)
                                           entry-limit))
             (:free (x) (intersectp-equal nil x))))))

;; How did I ever think this kind of forcing would be a good idea?
(defthm
  lofat-place-file-correctness-1-lemma-16
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (not (d-e-directory-p (d-e-fix d-e)))
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
    (> (nfix entry-limit)
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
    (or
     (< (d-e-first-cluster (d-e-fix d-e))
        2)
     (<= (+ 2 (count-of-clusters fat32-in-memory))
         (d-e-first-cluster (d-e-fix d-e)))
     (and
      (equal
       (mv-nth
        1
        (d-e-clusterchain-contents fat32-in-memory (d-e-fix d-e)))
       0)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (d-e-fix d-e)))
       x)))
    (not (member-intersectp-equal
          x
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit)))))
   (not
    (member-intersectp-equal
     x
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    (place-d-e d-e-list d-e)
                                    entry-limit)))))
  :hints
  (("goal"
    :induct (member-intersectp-equal
             x
             (mv-nth 2
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit)))
    :in-theory (enable not-intersectp-list))))

;; Hypotheses are minimal.
(defthm
  lofat-place-file-correctness-1-lemma-17
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (not (d-e-directory-p (d-e-fix d-e)))
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
    (> (nfix entry-limit)
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
    (or
     (< (d-e-first-cluster (d-e-fix d-e))
        2)
     (<= (+ 2 (count-of-clusters fat32-in-memory))
         (d-e-first-cluster (d-e-fix d-e)))
     (and
      (equal
       (mv-nth
        1
        (d-e-clusterchain-contents fat32-in-memory (d-e-fix d-e)))
       0)
      (no-duplicatesp-equal
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (d-e-fix d-e))))
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (d-e-fix d-e)))
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))))))
   (equal (mv-nth 3
                  (lofat-to-hifat-helper fat32-in-memory
                                         (place-d-e d-e-list d-e)
                                         entry-limit))
          0))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper hifat-entry-count not-intersectp-list)
     ((:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nth-of-effective-fat)
      (:rewrite nth-of-nats=>chars)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite take-of-len-free)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite put-assoc-equal-without-change . 2)
      (:rewrite nats=>chars-of-take)
      (:rewrite hifat-subsetp-reflexive-lemma-3)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :do-not-induct t
    :expand (:free (fat32-in-memory d-e d-e-list entry-limit)
                   (lofat-to-hifat-helper fat32-in-memory
                                          (cons d-e d-e-list)
                                          entry-limit)))))

(defthm
  lofat-place-file-correctness-1-lemma-19
  (implies
   (and
    (<=
     (len (make-clusters (lofat-file->contents file)
                         (cluster-size fat32-in-memory)))
     (count-free-clusters (effective-fat fat32-in-memory)))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0))
   (not
    (<
     (+ (count-free-clusters (effective-fat fat32-in-memory))
        (len (mv-nth 0
                     (d-e-clusterchain fat32-in-memory root-d-e)))
        (- (len (make-clusters (lofat-file->contents file)
                               (cluster-size fat32-in-memory)))))
     (len
      (make-clusters
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       (cluster-size fat32-in-memory))))))
  :hints (("goal" :in-theory (enable len-of-make-clusters
                                     (:REWRITE LOFAT-TO-HIFAT-INVERSION-LEMMA-15)))))

;; Introduce a rewrite rule gingerly...
(defthm
  lofat-place-file-correctness-1-lemma-20
  (implies (lofat-regular-file-p file)
           (iff (equal (len (explode (lofat-file->contents file)))
                       0)
                (equal (lofat-file->contents file) "")))
  :hints (("goal" :expand (len (explode (lofat-file->contents file))))))

(defthm
  lofat-place-file-correctness-1-lemma-21
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0)
    (<=
     (+
      (len (make-clusters (lofat-file->contents file)
                          (cluster-size fat32-in-memory)))
      (hifat-cluster-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       (cluster-size fat32-in-memory))
      (-
       (hifat-cluster-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          entry-limit))
        (cluster-size fat32-in-memory)))
      (-
       (len
        (make-clusters
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))
         (cluster-size fat32-in-memory)))))
     (count-free-clusters (effective-fat fat32-in-memory)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (<
     (+
      (count-free-clusters (effective-fat fat32-in-memory))
      (len (mv-nth 0
                   (d-e-clusterchain fat32-in-memory root-d-e)))
      (- (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory))))
      (len
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))))
     (len
      (make-clusters
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       (cluster-size fat32-in-memory))))))
  :hints (("goal" :in-theory (enable len-of-make-clusters
                                     (:rewrite lofat-to-hifat-inversion-lemma-15)))))

(defthm
  lofat-place-file-correctness-1-lemma-22
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0)
    (<=
     (+
      (len (make-clusters (lofat-file->contents file)
                          (cluster-size fat32-in-memory)))
      (hifat-cluster-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       (cluster-size fat32-in-memory))
      (-
       (hifat-cluster-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          entry-limit))
        (cluster-size fat32-in-memory)))
      (-
       (len
        (make-clusters
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))
         (cluster-size fat32-in-memory)))))
     (count-free-clusters (effective-fat fat32-in-memory)))
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (<
     (+
      1
      (count-free-clusters (effective-fat fat32-in-memory))
      (len (mv-nth 0
                   (d-e-clusterchain fat32-in-memory root-d-e)))
      (- (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory))))
      (len
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))))
     (len
      (make-clusters
       (mv-nth 0
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       (cluster-size fat32-in-memory))))))
  :hints (("goal" :in-theory (enable len-of-make-clusters
                                     (:REWRITE LOFAT-TO-HIFAT-INVERSION-LEMMA-15)))))

;; I don't like this...
(defthm
  lofat-place-file-correctness-1-lemma-25
  (implies (equal (mv-nth 1
                          (d-e-clusterchain fat32-in-memory d-e))
                  0)
           (not
            (<
             (binary-+
              (count-free-clusters (effective-fat fat32-in-memory))
              (len (mv-nth '0
                           (d-e-clusterchain fat32-in-memory d-e))))
             '1)))
  :hints
  (("goal"
    :in-theory (enable d-e-clusterchain
                       fat32-build-index-list)
    :expand ((fat32-build-index-list (effective-fat fat32-in-memory)
                                     (d-e-first-cluster d-e)
                                     (d-e-file-size d-e)
                                     (cluster-size fat32-in-memory))
             (fat32-build-index-list (effective-fat fat32-in-memory)
                                     (d-e-first-cluster d-e)
                                     2097152
                                     (cluster-size fat32-in-memory)))))
  :rule-classes (:rewrite :linear))

(defthm
  lofat-place-file-correctness-1-lemma-29
  (implies
   (and
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
    (<
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))
       1))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (<
     (binary-+ '2
               (count-of-clusters fat32-in-memory))
     (binary-+
      '1
      (nth
       '0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth '0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
         (make-list-ac
          (len
           (mv-nth '0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
          '0
          'nil))
        '1))))))
  :hints
  (("goal"
    :use
    ((:instance
      (:rewrite painful-debugging-lemma-13)
      (x
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1)))
      (y (+ 2
            (count-of-clusters fat32-in-memory))))))))

(defthm
  lofat-place-file-correctness-1-lemma-31
  (implies
   (and
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit)))))
   (not-intersectp-list
    (list
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))
       1)))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                   (+ -1 entry-limit)))))
  :hints
  (("goal"
    :use
    ((:instance
      (:rewrite non-free-index-list-listp-correctness-1)
      (l (mv-nth 2
                 (lofat-to-hifat-helper
                  fat32-in-memory (cdr d-e-list)
                  (+ -1 entry-limit))))
      (index-list
       (list
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain
                    fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory (car d-e-list))))
            0 nil))
          1))))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain
                 fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain
                   fat32-in-memory (car d-e-list))))
         0 nil))))))))

(defthm
  lofat-place-file-correctness-1-lemma-36
  (implies
   (and
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit)))))
   (not-intersectp-list
    (cons
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))
       1))
     (find-n-free-clusters
      (update-nth
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))
       (fat32-update-lower-28
        (fati
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory (car d-e-list)))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
             0 nil))
           1))
         fat32-in-memory)
        268435455)
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil)))
      (+ -1
         (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory))))))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                   (+ -1 entry-limit)))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite not-intersectp-list-of-append-2))
    :use
    ((:instance
      (:rewrite not-intersectp-list-of-append-2)
      (l (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                        (+ -1 entry-limit))))
      (y
       (find-n-free-clusters
        (update-nth
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory (car d-e-list)))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
             0 nil))
           1))
         (fat32-update-lower-28
          (fati
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list)))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
               0 nil))
             1))
           fat32-in-memory)
          268435455)
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil)))
        (+ -1
           (len (make-clusters (lofat-file->contents file)
                               (cluster-size fat32-in-memory))))))
      (x
       (list
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list))))
            0 nil))
          1)))))))))

(defthm
  lofat-place-file-correctness-1-lemma-26
  (implies
   (and
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list))))
            0 nil))
          1))
        (fat32-update-lower-28
         (fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list))))
              0 nil))
            1))
          fat32-in-memory)
         268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    (d-e-first-cluster (car d-e-list))
                                    (d-e-file-size (car d-e-list)))))
       (car d-e-list)
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))))
     0)
    (consp d-e-list)
    (not (d-e-directory-p (car d-e-list)))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
    (lofat-regular-file-p file))
   (equal
    (d-e-clusterchain
     (mv-nth
      0
      (place-contents
       (update-fati
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list))))
            0 nil))
          1))
        (fat32-update-lower-28
         (fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list))))
              0 nil))
            1))
          fat32-in-memory)
         268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    (d-e-first-cluster (car d-e-list))
                                    (d-e-file-size (car d-e-list)))))
       (car d-e-list)
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))))
     (d-e-set-first-cluster-file-size
      (car d-e-list)
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
         (make-list-ac
          (len
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
          0 nil))
        1))
      (len (explode (lofat-file->contents file)))))
    (mv
     (cons
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
         (make-list-ac
          (len
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
          0 nil))
        1))
      (find-n-free-clusters
       (effective-fat
        (update-fati
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory (car d-e-list)))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
             0 nil))
           1))
         (fat32-update-lower-28
          (fati
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list)))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
               0 nil))
             1))
           fat32-in-memory)
          268435455)
         (mv-nth
          0
          (clear-clusterchain fat32-in-memory
                              (d-e-first-cluster (car d-e-list))
                              (d-e-file-size (car d-e-list))))))
       (+
        -1
        (len
         (make-clusters
          (lofat-file->contents file)
          (cluster-size
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
                 (make-list-ac
                  (len (mv-nth 0
                               (d-e-clusterchain
                                fat32-in-memory (car d-e-list))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster (car d-e-list))
                     (d-e-file-size (car d-e-list)))))))))))
     0)))
  :hints
  (("goal"
    :cases
    ((and
      (< (d-e-first-cluster (car d-e-list))
         '2)
      (>=
       (binary-+
        (count-free-clusters (effective-fat fat32-in-memory))
        (len (mv-nth '0
                     (d-e-clusterchain
                      fat32-in-memory (car d-e-list)))))
       (binary-+
        '-1
        (len (make-clusters (lofat-file->contents$inline file)
                            (cluster-size fat32-in-memory))))))
     (and
      (>= (d-e-first-cluster (car d-e-list))
          '2)
      (>=
       (binary-+
        (count-free-clusters (effective-fat fat32-in-memory))
        (len (mv-nth '0
                     (d-e-clusterchain
                      fat32-in-memory (car d-e-list)))))
       (binary-+
        '-1
        (len (make-clusters (lofat-file->contents$inline file)
                            (cluster-size fat32-in-memory))))))
     (and
      (< (d-e-first-cluster (car d-e-list))
         '2)
      (<
       (binary-+
        (count-free-clusters (effective-fat fat32-in-memory))
        (len (mv-nth '0
                     (d-e-clusterchain
                      fat32-in-memory (car d-e-list)))))
       (binary-+
        '-1
        (len
         (make-clusters (lofat-file->contents$inline file)
                        (cluster-size fat32-in-memory))))))))))

(defthm
  lofat-place-file-correctness-1-lemma-28
  (implies
   (and
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list))))
            0 nil))
          1))
        (fat32-update-lower-28
         (fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list))))
              0 nil))
            1))
          fat32-in-memory)
         268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    (d-e-first-cluster (car d-e-list))
                                    (d-e-file-size (car d-e-list)))))
       (car d-e-list)
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))))
     0)
    (consp d-e-list)
    (not (d-e-directory-p (car d-e-list)))
    (< 0
       (len (explode (lofat-file->contents file))))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
    (lofat-regular-file-p file))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      0
      (place-contents
       (update-fati
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
           (make-list-ac
            (len
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list))))
            0 nil))
          1))
        (fat32-update-lower-28
         (fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list))))
              0 nil))
            1))
          fat32-in-memory)
         268435455)
        (mv-nth 0
                (clear-clusterchain fat32-in-memory
                                    (d-e-first-cluster (car d-e-list))
                                    (d-e-file-size (car d-e-list)))))
       (car d-e-list)
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))))
     (d-e-set-first-cluster-file-size
      (car d-e-list)
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
         (make-list-ac
          (len
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
          0 nil))
        1))
      (len (explode (lofat-file->contents file)))))
    (mv
     (implode
      (append
       (explode (lofat-file->contents file))
       (make-list-ac
        (+
         (min
          (d-e-file-size
           (d-e-set-first-cluster-file-size
            (car d-e-list)
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
                0 nil))
              1))
            (len (explode (lofat-file->contents file)))))
          (*
           (len
            (make-clusters
             (lofat-file->contents file)
             (cluster-size
              (update-fati
               (nth
                0
                (find-n-free-clusters
                 (set-indices-in-fa-table
                  (effective-fat fat32-in-memory)
                  (mv-nth
                   0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
                  (make-list-ac
                   (len (mv-nth 0
                                (d-e-clusterchain
                                 fat32-in-memory (car d-e-list))))
                   0 nil))
                 1))
               (fat32-update-lower-28
                (fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth 0
                            (d-e-clusterchain
                             fat32-in-memory (car d-e-list)))
                    (make-list-ac
                     (len (mv-nth 0
                                  (d-e-clusterchain
                                   fat32-in-memory (car d-e-list))))
                     0 nil))
                   1))
                 fat32-in-memory)
                268435455)
               (mv-nth 0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster (car d-e-list))
                        (d-e-file-size (car d-e-list))))))))
           (cluster-size
            (update-fati
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
                 0 nil))
               1))
             (fat32-update-lower-28
              (fati
               (nth
                0
                (find-n-free-clusters
                 (set-indices-in-fa-table
                  (effective-fat fat32-in-memory)
                  (mv-nth
                   0
                   (d-e-clusterchain fat32-in-memory (car d-e-list)))
                  (make-list-ac
                   (len (mv-nth 0
                                (d-e-clusterchain
                                 fat32-in-memory (car d-e-list))))
                   0 nil))
                 1))
               fat32-in-memory)
              268435455)
             (mv-nth
              0
              (clear-clusterchain fat32-in-memory
                                  (d-e-first-cluster (car d-e-list))
                                  (d-e-file-size (car d-e-list))))))))
         (- (length (lofat-file->contents file))))
        (code-char 0)
        nil)))
     0)))
  :hints
  (("goal"
    :in-theory
    (disable d-e-clusterchain-contents-of-place-contents-coincident-2)
    :use
    (:instance
     d-e-clusterchain-contents-of-place-contents-coincident-2
     (d-e2
      (d-e-set-first-cluster-file-size
       (car d-e-list)
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list)))
         (make-list-ac
          (len
           (mv-nth 0
                   (d-e-clusterchain fat32-in-memory (car d-e-list))))
          0 nil))
        1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e1 (car d-e-list))
     (fat32-in-memory
      (update-fati
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list)))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))
           0 nil))
         1))
       (fat32-update-lower-28
        (fati
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory (car d-e-list)))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
             0 nil))
           1))
         fat32-in-memory)
        268435455)
       (mv-nth 0
               (clear-clusterchain fat32-in-memory
                                   (d-e-first-cluster (car d-e-list))
                                   (d-e-file-size (car d-e-list))))))))))

(defthm lofat-place-file-correctness-lemma-87
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (not
     (member-equal
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      filename))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        filename)))))
          0 nil))
        1))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e d-e-list
                                                          filename))))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory d-e-list
       entry-limit))
     0)
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list
                                                     filename))))
    (< (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list
                                                    filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list))
   (equal
    (fat32-entry-mask
     (fati
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      filename))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        filename)))))
          0 nil))
        1))
      fat32-in-memory))
    0))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable (:rewrite nth-of-set-indices-in-fa-table-when-member)
                        (:rewrite find-n-free-clusters-correctness-5))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory
                                     (mv-nth 0
                                             (find-d-e d-e-list
                                                           filename)))))
      (fa-table (effective-fat fat32-in-memory))
      (n
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e d-e-list
                                                       filename))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e d-e-list
                                                         filename)))))
           0 nil))
         1))))
     (:instance
      (:rewrite find-n-free-clusters-correctness-5)
      (n1 1)
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e d-e-list
                                                            filename))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e d-e-list
                                                       filename)))))
         0 nil)))
      (n2 0))))))

(defthm
  lofat-place-file-correctness-1-lemma-30
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename))))
    (< (d-e-first-cluster (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))))
   (not-intersectp-list
    (list
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename)))))
         0 nil))
       1)))
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
      (+ -1 entry-limit)))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-list-listp-correctness-1))
    :use
    (:instance
     (:rewrite non-free-index-list-listp-correctness-1)
     (l
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit))))
     (index-list
      (list
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename)))))
           0 nil))
         1))))
     (fa-table
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory
                                     (mv-nth 0
                                             (find-d-e (cdr d-e-list)
                                                           filename))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename)))))
        0 nil)))))))

(defthm
  lofat-place-file-correctness-1-lemma-32
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename))))
    (< (d-e-first-cluster (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    filename)))
       (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (member-equal
     (nth
      0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename)))))
         0 nil))
       1))
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list))))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite non-free-index-listp-correctness-2 . 1))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename)))))
           0 nil))
         1)))
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename)))))
         0 nil))))))))

(defthm
  lofat-place-file-correctness-1-lemma-42
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (not (zp entry-limit))
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (useful-d-e-list-p d-e-list))
   (equal
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (put-assoc-equal
       filename2
       (m1-file
        (d-e-set-first-cluster-file-size
         (mv-nth 0
                 (find-d-e (cdr d-e-list)
                               filename1))
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (len (explode (lofat-file->contents file))))
        (lofat-file->contents file))
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                (+ -1 entry-limit)))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (put-assoc-equal
       filename2
       (m1-file
        (d-e-set-first-cluster-file-size
         (mv-nth 0
                 (find-d-e (cdr d-e-list)
                               filename1))
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (len (explode (lofat-file->contents file))))
        (lofat-file->contents file))
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))))
  :hints
  (("goal"
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit1 (- entry-limit 1))
     (entry-limit2 entry-limit)
     (d-e-list (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e (cdr d-e-list)
                                                   filename1))))))))))

(defthm
  lofat-place-file-correctness-1-lemma-43
  (implies
   (and
    (not (zp entry-limit))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename1)))
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (fat32-update-lower-28
             (fati (nth 0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              1))
                   fat32-in-memory)
             268435455)
            fat32-in-memory)
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 filename2)
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))))
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename1)))
         (nats=>string
          (insert-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))))
           (d-e-set-first-cluster-file-size
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  filename2)
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (len (explode (lofat-file->contents file))))))))
       (cdr d-e-list)
       (+ -1 entry-limit)))
     (put-assoc-equal
      filename1
      (m1-file
       (mv-nth 0
               (find-d-e (cdr d-e-list)
                             filename1))
       (put-assoc-equal
        filename2
        (m1-file
         (d-e-set-first-cluster-file-size
          (mv-nth 0
                  (find-d-e (cdr d-e-list)
                                filename1))
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e (cdr d-e-list)
                                                          filename1))))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            filename1)))))
              0 nil))
            1))
          (len (explode (lofat-file->contents file))))
         (lofat-file->contents file))
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e (cdr d-e-list)
                                          filename1)))))
          (+ -1 entry-limit)))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                     (+ -1 entry-limit)))))
    (useful-d-e-list-p d-e-list))
   (equal
    (mv-nth
     0
     (lofat-to-hifat-helper
      (mv-nth
       0
       (update-dir-contents
        (mv-nth
         0
         (place-contents
          (update-fati
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))
           (fat32-update-lower-28
            (fati (nth 0
                       (find-n-free-clusters (effective-fat fat32-in-memory)
                                             1))
                  fat32-in-memory)
            268435455)
           fat32-in-memory)
          (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                filename2)
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          (nth 0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     1))))
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename1)))
        (nats=>string
         (insert-d-e
          (string=>nats (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename1)))))
          (d-e-set-first-cluster-file-size
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 filename2)
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))
           (len (explode (lofat-file->contents file))))))))
      (cdr d-e-list)
      (+ -1 entry-limit)))
    (put-assoc-equal
     filename1
     (m1-file
      (mv-nth 0
              (find-d-e (cdr d-e-list)
                            filename1))
      (put-assoc-equal
       filename2
       (m1-file
        (d-e-set-first-cluster-file-size
         (mv-nth 0
                 (find-d-e (cdr d-e-list)
                               filename1))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename1))))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain fat32-in-memory
                                     (mv-nth 0
                                             (find-d-e (cdr d-e-list)
                                                           filename1)))))
             0 nil))
           1))
         (len (explode (lofat-file->contents file))))
        (lofat-file->contents file))
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename1)))))
                entry-limit))))
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))))
  :hints
  (("goal"
    :use
    (:instance
     (:rewrite lofat-to-hifat-helper-correctness-4)
     (entry-limit2 entry-limit)
     (d-e-list
      (make-d-e-list (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1))))))
     (entry-limit1 (- entry-limit 1))))))

(defthm
  lofat-place-file-correctness-1-lemma-68
  (implies (not (not-intersectp-list '(nil) x))
           (not (non-free-index-listp x fa-table)))
  :hints (("goal" :induct (non-free-index-listp x fa-table)
           :in-theory (enable not-intersectp-list intersectp-equal))))

(defthm
  lofat-place-file-correctness-1-lemma-70
  (implies
   (and
    (not-intersectp-list
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (fat32-update-lower-28
             (fati (nth 0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              1))
                   fat32-in-memory)
             268435455)
            fat32-in-memory)
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 filename2)
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))))
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename1)))
         (nats=>string
          (insert-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))))
           (d-e-set-first-cluster-file-size
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  filename2)
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (len (explode (lofat-file->contents file))))))))
       (cdr d-e-list)
       (+ -1 entry-limit)))
     x)
    (non-free-index-listp x (effective-fat fat32-in-memory)))
   (not-intersectp-list
    (cons
     nil
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (fat32-update-lower-28
             (fati (nth 0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              1))
                   fat32-in-memory)
             268435455)
            fat32-in-memory)
           (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                 filename2)
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))))
         (d-e-first-cluster (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename1)))
         (nats=>string
          (insert-d-e
           (string=>nats (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))))
           (d-e-set-first-cluster-file-size
            (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                  filename2)
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (len (explode (lofat-file->contents file))))))))
       (cdr d-e-list)
       (+ -1 entry-limit))))
    x))
  :hints
  (("goal"
    :in-theory (disable (:rewrite not-intersectp-list-of-append-2))
    :use
    ((:instance
      (:rewrite not-intersectp-list-of-append-2)
      (l x)
      (y
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              (fat32-update-lower-28
               (fati
                (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                fat32-in-memory)
               268435455)
              fat32-in-memory)
             (d-e-set-filename
              '(0 0 0 0 0 0 0 0 0 0 0 0
                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
              filename2)
             (lofat-file->contents file)
             (len (explode (lofat-file->contents file)))
             (nth 0
                  (find-n-free-clusters (effective-fat fat32-in-memory)
                                        1))))
           (d-e-first-cluster (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename1)))
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e (cdr d-e-list)
                                             filename1)))))
             (d-e-set-first-cluster-file-size
              (d-e-set-filename
               '(0 0 0 0 0 0 0 0 0 0 0 0
                   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
               filename2)
              (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              (len (explode (lofat-file->contents file))))))))
         (cdr d-e-list)
         (+ -1 entry-limit))))
      (x (list nil)))))))

(defthm
  lofat-place-file-correctness-1-lemma-72
  (implies
   (and
    (consp d-e-list)
    (<= (+ -1 entry-limit)
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                        (+ -1 entry-limit)))))
    (useful-d-e-list-p d-e-list)
    (not (equal (mv-nth 1
                        (find-d-e (cdr d-e-list)
                                      (d-e-filename (car d-e-list))))
                0))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0))
   (not
    (<
     (hifat-entry-count
      (cons (cons (d-e-filename (car d-e-list))
                  (m1-file (car d-e-list) ""))
            (mv-nth 0
                    (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                           (+ -1 entry-limit)))))
     entry-limit)))
  :hints (("goal" :do-not-induct t
           :in-theory (enable hifat-entry-count)))
  :rule-classes (:rewrite :linear))

(defthm
  lofat-place-file-correctness-1-lemma-73
  (implies
   (and
    (consp d-e-list)
    (<= (+ -1 entry-limit)
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                        (+ -1 entry-limit)))))
    (useful-d-e-list-p d-e-list)
    (not (equal (mv-nth 1
                        (find-d-e (cdr d-e-list)
                                      (d-e-filename (car d-e-list))))
                0))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0))
   (not
    (<
     (hifat-entry-count
      (cons (cons (d-e-filename (car d-e-list))
                  (m1-file (car d-e-list)
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory (car d-e-list)))))
            (mv-nth 0
                    (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                           (+ -1 entry-limit)))))
     entry-limit)))
  :hints (("goal" :in-theory (enable hifat-entry-count)))
  :rule-classes (:rewrite :linear))

(defthm lofat-place-file-correctness-1-lemma-75
  (equal (make-clusters "" cluster-size)
         nil)
  :hints (("goal" :in-theory (enable make-clusters))))

(encapsulate
  ()

  (local (include-book "arithmetic-5/top" :dir :system))

  (set-default-hints
   '((nonlinearp-default-hint stable-under-simplificationp
                              hist pspv)))

  (defthm
    lofat-place-file-correctness-1-lemma-80
    (implies
     (lofat-fs-p fat32-in-memory)
     (iff
      (<
       (count-free-clusters (effective-fat fat32-in-memory))
       (+
        (-
         (ceiling
          (len
           (explode
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (car path)))))))
          (cluster-size fat32-in-memory)))
        (ceiling
         (+
          32
          (len
           (explode
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (car path))))))))
         (cluster-size fat32-in-memory))))
      (and
       (zp (count-free-clusters (effective-fat fat32-in-memory)))
       (equal
        (ceiling
         (+
          32
          (len
           (explode
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (car path))))))))
         (cluster-size fat32-in-memory))
        (+
         1
         (ceiling
          (len
           (explode
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (car path)))))))
          (cluster-size fat32-in-memory)))))))
    :hints (("goal" :do-not-induct t)))

  (defthm
    lofat-place-file-correctness-1-lemma-86
    (implies
     (lofat-fs-p fat32-in-memory)
     (and
      (<=
       (ceiling
        (len
         (explode (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory root-d-e))))
        (cluster-size fat32-in-memory))
       (ceiling
        (+
         32
         (len
          (explode (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory root-d-e)))))
        (cluster-size fat32-in-memory)))
      (>=
       (+
        1
        (ceiling
         (len
          (explode (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory root-d-e))))
         (cluster-size fat32-in-memory)))
       (ceiling
        (+
         32
         (len
          (explode (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory root-d-e)))))
        (cluster-size fat32-in-memory)))))
    :rule-classes :linear))

(defthmd
  lofat-place-file-correctness-1-lemma-83
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0))
   (<=
    (len
     (make-clusters
      (mv-nth 0
              (d-e-clusterchain-contents fat32-in-memory root-d-e))
      (cluster-size fat32-in-memory)))
    (len (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e)))))
  :rule-classes (:rewrite :linear)
  :hints (("goal" :in-theory (enable len-of-make-clusters
                                     lofat-to-hifat-inversion-lemma-15))))

(defthm
  lofat-place-file-correctness-1-lemma-84
  (implies
   (and
    (<=
     1
     (+
      (count-free-clusters (effective-fat fat32-in-memory))
      (ceiling
       (len
        (explode
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))
       (cluster-size fat32-in-memory))))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit)))
    (equal
     (mv-nth 1
             (d-e-clusterchain-contents fat32-in-memory root-d-e))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (member-equal
     (nth
      '0
      (find-n-free-clusters
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         '0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           '0
           (find-d-e
            (make-d-e-list
             (mv-nth
              '0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (make-list-ac
         (ceiling
          (len
           (explode$inline
            (mv-nth
             '0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               '0
               (find-d-e (make-d-e-list
                              (mv-nth '0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))))
          (cluster-size fat32-in-memory))
         '0
         'nil))
       '1))
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory root-d-e)))))
  :hints
  (("goal"
    :in-theory (e/d (lofat-to-hifat-inversion-lemma-15)
                    ((:rewrite non-free-index-listp-correctness-2
                               . 1)))
    :use
    ((:instance
      (:rewrite non-free-index-listp-correctness-2 . 1)
      (fa-table
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth
         0
         (d-e-clusterchain
          fat32-in-memory
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))))
        (make-list-ac
         (ceiling
          (len
           (explode
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))))
          (cluster-size fat32-in-memory))
         0 nil)))
      (x (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e)))
      (key
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))))
          (make-list-ac
           (ceiling
            (len
             (explode
              (mv-nth
               0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
            (cluster-size fat32-in-memory))
           0 nil))
         1))))))))

(defthm
  lofat-place-file-correctness-1-lemma-87
  (implies
   (lofat-fs-p fat32-in-memory)
   (<=
    0
    (+
     (-
      (ceiling
       (+
        64
        (*
         32
         (len
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth 0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))))
            entry-limit)))))
       (cluster-size fat32-in-memory)))
     (ceiling
      (+
       96
       (*
        32
        (len
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
           entry-limit)))))
      (cluster-size fat32-in-memory)))))
  :hints
  (("goal"
    :use
    (:instance
     (:linear painful-debugging-lemma-16)
     (j (cluster-size fat32-in-memory))
     (i1
      (+
       64
       (*
        32
        (len
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
           entry-limit))))))
     (i2
      (+
       96
       (*
        32
        (len
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              fat32-in-memory
              (mv-nth
               0
               (find-d-e (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
           entry-limit)))))))))
  :rule-classes :linear)

(defthm
  lofat-place-file-correctness-1-lemma-88
  (implies
   (lofat-fs-p fat32-in-memory)
   (<=
    (ceiling
     (+
      64
      (*
       32
       (len
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))))
     (cluster-size fat32-in-memory))
    (ceiling
     (+
      96
      (*
       32
       (len
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))))
     (cluster-size fat32-in-memory))))
  :hints
  (("goal"
    :use
    (:instance
     (:linear painful-debugging-lemma-16)
     (j (cluster-size fat32-in-memory))
     (i1
      (+
       64
       (*
        32
        (len
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))))))))
     (i2
      (+
       96
       (*
        32
        (len
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))))))))))))
  :rule-classes :linear)

(defthm
  lofat-place-file-correctness-1-lemma-41
  (implies (and (< (d-e-first-cluster root-d-e)
                   (+ 2 (count-of-clusters fat32-in-memory)))
                (<= 1
                    (count-free-clusters (effective-fat fat32-in-memory))))
           (< (nth '0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         '1))
              (binary-+ '2
                        (count-of-clusters fat32-in-memory))))
  :rule-classes (:rewrite :linear))

;; We've actually gotten pretty close to precisely specifying when there
;; can be a space error and when there can't.
;; - We started off thinking that every directory tree with
;; (hifat-cluster-count ...) evaluating to a number less than the number of
;; available clusters would work, but we realised that would be false given the
;; recursive nature and the fact that other directory trees would, in general,
;; exist.
;;  - We then thought incrementally: the difference between clusters needed by
;; the new tree and the clusters needed by the old tree would be the number of
;; free clusters needed. This is surprisingly close to being true! However,
;; there are issues. Even in the case where we're inserting just one regular
;; file, we're going to have to update its parent directory, potentially
;; increasing its length. That gives us a correctness issue, in that we might
;; be making the directory contents longer than *ms-max-dir-size*. So... we
;; decide that inserting a new directory entry is a good time to pluck out the
;; parent and current directory entries, and discard all other useless entries
;; (i.e. entries for deleted files.) That resolves the correctness issue,
;; because it means that any directory tree which continues to satisfy
;; hifat-bounded-file-alist-p will be fine. However, that also immediately
;; raises the spectre of special treatment for the root directory, which does
;; not have parent and current directory entries. Moreover, since we're
;; changing the number of clusters in the root directory, we'll need to account
;; for those in addition to the hifat-cluster-count of the new tree... and so
;; the number of new clusters needed becomes the difference between the new
;; tree and the old tree in terms of the sum of clusters needed for the root
;; directory and clusters needed for the tree (awkward, I know, but unavoidable
;; given the definition of hifat-cluster-count.) This gives rise to a weird
;; situation where we might need, say, two free clusters for placing the
;; regular file, and we will have exactly two clusters freed up by removing
;; deleted directory entries from the root directories. We should be able to do
;; it, but we can't without entering a domain of utter madness where we
;; free all possible clusters first and then use them as needed, and the
;; atomicity of the various operations recedes far into the distance.
;; - We conclude thinking it's probably best for the *ENOSPC* error condition
;; not to be formally specified at all. We would be hamstringing ourselves
;; pretty severely if we tried to break atomicity and then (likely) had to
;; reimplement a bunch of things. We can still do some obvious things
;; though... we shouldn't be hanging on to useless directory entries when we're
;; adding new ones, and we shouldn't subject ourselves to clusters full of
;; zeroes, both of which point to sticking with the new implementation of
;; insert-d-e.

;; After trimming hypotheses, the theorem has basically stopped making
;; reference to the directory tree returned by hifat-place-file. I'm not
;; completely sure if that's how it should work, but the theorem prover seems
;; to indicate that the hypotheses are consistent and don't imply falsity.
(defthm
  lofat-place-file-correctness-lemma-3
  (implies
   (and
    (syntaxp (variablep entry-limit))
    (not (zp entry-limit))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e (cdr d-e-list)
                                                          filename))
                                    path file))
          (mv-nth 0
                  (find-d-e (cdr d-e-list)
                                filename)))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       filename))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e (cdr d-e-list)
                                                          filename))
                                    path file))
          (mv-nth 0
                  (find-d-e (cdr d-e-list)
                                filename)))))
       entry-limit))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e (cdr d-e-list)
                                                filename)))))
                (+ -1 entry-limit)))
       path
       (m1-file
        (d-e-set-first-cluster-file-size
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e (cdr d-e-list)
                                           filename)))))
           (car path)))
         0 0)
        ""))))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list)
                                               filename)))
    (not
     (m1-regular-file-p
      (mv-nth
       0
       (hifat-find-file
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e (cdr d-e-list)
                                          filename)))))
          (+ -1 entry-limit)))
        path)))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename))
                               path file))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path file))
        (mv-nth 0
                (find-d-e (cdr d-e-list)
                              filename)))))
     entry-limit)
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     filename))
                               path file))
     (make-d-e-list
      (mv-nth
       0
       (d-e-clusterchain-contents
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e (cdr d-e-list)
                                                        filename))
                                  path file))
        (mv-nth 0
                (find-d-e (cdr d-e-list)
                              filename)))))
     (+ -1 entry-limit))))
  :hints
  (("goal"
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit1 entry-limit)
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth 0
                 (lofat-place-file fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         filename))
                                   path file))
         (mv-nth 0
                 (find-d-e (cdr d-e-list)
                               filename))))))
     (fat32-in-memory
      (mv-nth 0
              (lofat-place-file fat32-in-memory
                                (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      filename))
                                path file)))))))

(defthm
  lofat-place-file-correctness-lemma-32
  (implies
   (and
    (consp d-e-list)
    (d-e-directory-p (car d-e-list))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (not
     (intersectp-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory root-d-e))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))))
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (not (zp entry-limit))
    (fat32-masked-entry-p i)
    (<= 2 i)
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal (fat32-entry-mask (fati i fat32-in-memory))
           0)
    (useful-d-e-list-p d-e-list))
   (hifat-equiv
    (cons
     (cons (d-e-filename (car d-e-list))
           (m1-file (d-e-set-first-cluster-file-size (car d-e-list)
                                                         i 0)
                    nil))
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            i
            (fat32-update-lower-28 (fati i fat32-in-memory)
                                   268435455)
            (mv-nth
             0
             (clear-clusterchain fat32-in-memory
                                 (d-e-first-cluster (car d-e-list))
                                 2097152)))
           (car d-e-list)
           (make-empty-subdir-contents
            i (d-e-first-cluster root-d-e))
           0 i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size (car d-e-list)
                                                i 0)))))
       (cdr d-e-list)
       (+ -1 entry-limit))))
    (cons
     (cons (d-e-filename (car d-e-list))
           (m1-file d-e nil))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory (car d-e-list))))
            (+ -1 entry-limit)))))))))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable hifat-equiv
                              hifat-subsetp hifat-file-alist-fix
                              hifat-equiv-of-cons-lemma-5
                              hifat-no-dups-p))))

(defthm
  lofat-place-file-correctness-lemma-35
  (implies
   (and
    (consp d-e-list)
    (not (equal (mv-nth 1
                        (find-d-e (cdr d-e-list)
                                      (d-e-filename (car d-e-list))))
                0))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (useful-d-e-list-p d-e-list))
   (hifat-equiv
    (cons
     (cons (d-e-filename (car d-e-list))
           (m1-file (d-e-set-first-cluster-file-size (car d-e-list)
                                                         i 0)
                    nil))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (cons
     (cons (d-e-filename (car d-e-list))
           (m1-file d-e nil))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :hints (("goal" :in-theory (enable hifat-equiv
                                     hifat-subsetp hifat-no-dups-p
                                     hifat-equiv-of-cons-lemma-5)
           :do-not-induct t)))

(defthmd lofat-place-file-correctness-lemma-45
 (implies
  (and
   (member-equal
    i
    (mv-nth 0
            (d-e-clusterchain fat32-in-memory (car d-e-list))))
   (d-e-directory-p (mv-nth 0
                                (find-d-e (cdr d-e-list) name)))
   (equal
    (mv-nth
     1
     (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
    0)
   (equal (mv-nth 3
                  (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                         (+ -1 entry-limit)))
          0)
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain fat32-in-memory (car d-e-list)))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                   (+ -1 entry-limit))))
   (fat32-masked-entry-p i)
   (useful-d-e-list-p d-e-list))
  (>
   (fat32-entry-mask
    (nth
     i
     (set-indices-in-fa-table
      (effective-fat fat32-in-memory)
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e (cdr d-e-list)
                                                          name))))
      (make-list-ac
       (len
        (mv-nth
         0
         (d-e-clusterchain fat32-in-memory
                               (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     name)))))
       0 nil))))
   0))
 :hints (("goal" :do-not-induct t
          :in-theory (disable lofat-place-file-correctness-lemma-44)
          :use lofat-place-file-correctness-lemma-44))
 :rule-classes :linear)

(defthm
  lofat-place-file-correctness-lemma-47
  (implies
   (and
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list) name)))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            name))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       name)))))
         0 nil))))
     0)
    (useful-d-e-list-p d-e-list))
   (equal
    (mv-nth
     1
     (d-e-clusterchain-contents
      (update-fati
       i
       (fat32-update-lower-28 (fati i fat32-in-memory)
                              268435455)
       (mv-nth 0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0
                         (find-d-e (cdr d-e-list) name)))
                2097152)))
      (car d-e-list)))
    0))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-place-file-correctness-lemma-44)
           :use lofat-place-file-correctness-lemma-44)))

(defthm
  lofat-place-file-correctness-lemma-4
  (implies
   (and
    (d-e-directory-p (mv-nth 0
                                 (find-d-e (cdr d-e-list) name)))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                          (+ -1 entry-limit)))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                    (+ -1 entry-limit))))
    (fat32-masked-entry-p i)
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            name))))
        (make-list-ac
         (len
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e (cdr d-e-list)
                                                       name)))))
         0 nil))))
     0)
    (useful-d-e-list-p d-e-list)
    (case-split
     (member-equal
      i
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory root-d-e)))))
   (hifat-equiv
    (cons
     (cons
      (d-e-filename (car d-e-list))
      (m1-file
       (car d-e-list)
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0
                         (find-d-e (cdr d-e-list) name)))
                2097152)))
             (mv-nth 0
                     (find-d-e (cdr d-e-list) name))
             (make-empty-subdir-contents
              i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth 0
                      (find-d-e (cdr d-e-list) name))
              i 0)))))
         (car d-e-list)))))
     (put-assoc-equal
      name (m1-file d-e nil)
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                     (+ -1 entry-limit)))))
    (cons
     (cons
      (d-e-filename (car d-e-list))
      (m1-file
       (car d-e-list)
       (mv-nth
        0
        (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
     (put-assoc-equal
      name (m1-file d-e nil)
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory (cdr d-e-list)
                                     (+ -1 entry-limit)))))))
  :hints
  (("goal" :in-theory (disable intersectp-member)
    :use
    (:instance
     intersectp-member
     (a i)
     (y (mv-nth 0
                (d-e-clusterchain fat32-in-memory
                                      (mv-nth 0
                                              (find-d-e (cdr d-e-list)
                                                            name)))))
     (x (mv-nth 0
                (d-e-clusterchain fat32-in-memory root-d-e)))))))

(defthm lofat-place-file-correctness-lemma-24
  (implies
   (and
    (consp d-e-list)
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (not
     (intersectp-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory root-d-e))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))))
    (fat32-masked-entry-p i)
    (useful-d-e-list-p d-e-list)
    (case-split
     (member-equal
      i
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory root-d-e)))))
   (not
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))))
     0)))
  :hints
  (("goal"
    :do-not-induct t :in-theory (disable intersectp-member)
    :use (:instance intersectp-member
                    (a i)
                    (y (mv-nth 0
                               (d-e-clusterchain fat32-in-memory root-d-e)))
                    (x (mv-nth 0
                               (d-e-clusterchain fat32-in-memory
                                                     (car d-e-list))))))))

(defthm
  lofat-place-file-correctness-lemma-51
  (implies
   (and
    (consp d-e-list)
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory (car d-e-list)))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))
    (fat32-masked-entry-p i)
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))))
     0)
    (useful-d-e-list-p d-e-list))
   (not-intersectp-list
    (list i)
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory (cdr d-e-list)
      (binary-+
       -1
       (binary-+
        entry-limit
        (unary--
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (binary-+ -1 entry-limit)))))))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (e/d ()
                    ((:rewrite nth-of-set-indices-in-fa-table-when-member)
                     (:rewrite set-indices-in-fa-table-correctness-3)))
    :use
    ((:instance
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (val 0)
      (index-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
      (fa-table (effective-fat fat32-in-memory))
      (n i))
     (:instance
      (:rewrite set-indices-in-fa-table-correctness-3)
      (value-list
       (make-list-ac
        (len
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
        0 nil))
      (index-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
      (fa-table (effective-fat fat32-in-memory))
      (n i))))))

(defthm
  lofat-place-file-correctness-lemma-49
  (implies
   (and
    (consp d-e-list)
    (non-free-index-listp x (effective-fat fat32-in-memory))
    (equal
     (mv-nth
      1
      (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))
     0)
    (not
     (intersectp-equal
      x
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory (car d-e-list)))))
    (fat32-masked-entry-p i)
    (useful-d-e-list-p d-e-list)
    (case-split (member-equal i x)))
   (not
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory (car d-e-list)))
        (make-list-ac
         (len
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory (car d-e-list))))
         0 nil))))
     0)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable intersectp-member
                        (:rewrite set-indices-in-fa-table-correctness-3))
    :use
    ((:instance intersectp-member
      (a i)
      (y (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
      (x x))
     (:instance
      (:rewrite set-indices-in-fa-table-correctness-3)
      (value-list
       (make-list-ac
        (len
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory (car d-e-list))))
        0 nil))
      (index-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory (car d-e-list))))
      (fa-table (effective-fat fat32-in-memory))
      (n i))))))

(defthm
  lofat-place-file-correctness-lemma-40
  (implies
   (and
    (d-e-directory-p (mv-nth 0
                                 (find-d-e d-e-list name)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-place-file fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list name))
                          path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list name))
                             path file))
          (mv-nth 0
                  (find-d-e d-e-list
                                name)))))
       entry-limit))
     0)
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-place-file fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list name))
                          path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list name))
                             path file))
          (mv-nth 0
                  (find-d-e d-e-list
                                name)))))
       entry-limit))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list
                                                name)))))
                (+ -1 entry-limit)))
       path (m1-file d-e nil))))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory d-e-list
                                          (+ -1 entry-limit)))
           0)
    (useful-d-e-list-p d-e-list))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-place-file fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list name))
                          path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list name))
                             path file))
          (mv-nth 0
                  (find-d-e d-e-list
                                name)))))
       (+ -1 entry-limit)))
     0)
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (lofat-place-file fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list name))
                          path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list name))
                             path file))
          (mv-nth 0
                  (find-d-e d-e-list
                                name)))))
       (+ -1 entry-limit)))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth 0
               (lofat-to-hifat-helper
                fat32-in-memory
                (make-d-e-list
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list
                                                name)))))
                (+ -1 entry-limit)))
       path (m1-file d-e nil))))))
  :hints
  (("goal"
    :do-not-induct t
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit1 entry-limit)
     (entry-limit2 (+ -1 entry-limit))
     (d-e-list
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth
          0
          (lofat-place-file fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list name))
                            path file))
         (mv-nth 0
                 (find-d-e d-e-list
                               name))))))
     (fat32-in-memory
      (mv-nth
       0
       (lofat-place-file fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list name))
                         path file)))))))

(defthm
  lofat-place-file-correctness-lemma-55
  (implies
   (and
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (lofat-fs-p fat32-in-memory)
    (< (d-e-first-cluster root-d-e)
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (d-e-p d-e)
    (useful-d-e-list-p d-e-list))
   (equal
    (d-e-clusterchain-contents
     (mv-nth 0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
     d-e)
    (d-e-clusterchain-contents fat32-in-memory d-e)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (e/d
     (useful-d-e-list-p)
     ((:rewrite d-e-clusterchain-contents-of-lofat-place-file-disjoint)))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-lofat-place-file-disjoint)
     (d-e d-e)
     (root-d-e (mv-nth 0 (find-d-e d-e-list name)))
     (entry-limit entry-limit)))))

(defthm
  lofat-place-file-correctness-lemma-56
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (not-intersectp-list
     x
     (mv-nth
      2
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit1)))
    (>=
     (nfix entry-limit2)
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))))
   (not-intersectp-list
    x
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit2))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-58
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (>=
     (nfix entry-limit2)
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))))
   (equal
    (mv-nth 3
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit2))
    0))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-59
  (implies
   (and
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (<=
     (mv-nth
      1
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit1))
     (nfix entry-limit2)))
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              entry-limit2))
     0)
    (<
     (hifat-entry-count
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit2)))
     entry-limit1)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-find-file-correctness-1-lemma-6)
    :use
    ((:instance lofat-find-file-correctness-1-lemma-6
                (entry-limit entry-limit1))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (d-e-list
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list name))))))))))
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and
      (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit1))
             0)
      (<=
       (mv-nth
        1
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit1))
       (nfix entry-limit2)))
     (equal
      (mv-nth 3
              (lofat-to-hifat-helper
               fat32-in-memory
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
               entry-limit2))
      0)))))

(defthm
  lofat-place-file-correctness-lemma-41
  (implies
   (and
    (not
     (member-intersectp-equal
      (set-difference-equal
       x1
       (cons x2
             (mv-nth 2
                     (lofat-to-hifat-helper fat32-in-memory1
                                            d-e-list1 entry-limit1))))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory2
                                     d-e-list2 entry-limit1))))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory2
                                          d-e-list2 entry-limit1))
           0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory1
                                          d-e-list1 entry-limit1))
           0)
    (<= (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory2
                                       d-e-list2 entry-limit1))
        (nfix entry-limit2))
    (<= (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory1
                                       d-e-list1 entry-limit1))
        (nfix entry-limit2)))
   (not
    (member-intersectp-equal
     (set-difference-equal
      x1
      (cons x2
            (mv-nth 2
                    (lofat-to-hifat-helper fat32-in-memory1
                                           d-e-list1 entry-limit2))))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory2
                                    d-e-list2 entry-limit2)))))
  :hints (("goal" :do-not-induct t
           :use ((:instance lofat-to-hifat-helper-correctness-4
                            (d-e-list d-e-list2)
                            (fat32-in-memory fat32-in-memory2))
                 (:instance lofat-to-hifat-helper-correctness-4
                            (d-e-list d-e-list1)
                            (fat32-in-memory fat32-in-memory1))))))


(defthm
  lofat-place-file-correctness-lemma-42
  (implies (equal d-e (d-e-fix nil))
           (not-intersectp-list
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory d-e))
            (mv-nth 2
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable d-e-clusterchain
                              fat32-build-index-list))))

(defthmd
  lofat-place-file-correctness-lemma-67
  (implies
   (and
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (useful-d-e-list-p d-e-list))
   (not
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name))))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list)
     ((:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nfix-when-zp)
      (:rewrite nth-of-nats=>chars)
      (:definition natp)
      (:rewrite nth-of-effective-fat)
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                . 1)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite take-of-len-free)
      (:rewrite natp-of-car-when-nat-listp)))))
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and
      (equal x
             (mv-nth
              0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name)))))
      (<= 2
          (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (useful-d-e-list-p d-e-list))
     (not
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))))))))

(defthm
  lofat-place-file-correctness-lemma-68
  (implies
   (and
    (consp x)
    (member-equal x
                  (mv-nth 2
                          (lofat-to-hifat-helper fat32-in-memory
                                                 d-e-list entry-limit))))
   (not (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list find-d-e)
     ((:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nfix-when-zp)
      (:rewrite nth-of-nats=>chars)
      (:definition natp)
      (:rewrite nth-of-effective-fat)
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                . 1)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite take-of-len-free)
      (:rewrite natp-of-car-when-nat-listp)))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies
     (and
      (consp x)
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))))
     (not
      (member-equal x
                    (mv-nth 2
                            (lofat-to-hifat-helper fat32-in-memory
                                                   d-e-list entry-limit))))))))

(defthm
  lofat-place-file-correctness-lemma-69
  (implies
   (and
    (subsetp-equal (mv-nth 2
                           (lofat-to-hifat-helper fat32-in-memory
                                                  d-e-list entry-limit1))
                   y)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (subsetp-equal (mv-nth 2
                          (lofat-to-hifat-helper fat32-in-memory
                                                 d-e-list entry-limit2))
                  y))
  :hints (("goal" :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-57
  (implies
   (and
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (<=
     (mv-nth
      1
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit1))
     (nfix entry-limit2))
    (subsetp-equal
     (mv-nth 2
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              entry-limit1))
     y))
   (subsetp-equal
    (mv-nth 2
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth 0 (find-d-e d-e-list name)))))
             entry-limit2))
    y))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-find-file-correctness-1-lemma-6)
    :use
    ((:instance lofat-find-file-correctness-1-lemma-6
                (entry-limit entry-limit1))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (d-e-list
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e d-e-list name)))))))))))

(defthm
  lofat-place-file-correctness-lemma-70
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (>=
     (nfix entry-limit2)
     (mv-nth
      1
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit1))))
   (subsetp-equal
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit2))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit1))))
  :hints (("goal" :do-not-induct t
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-71
  (implies
   (and (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (useful-d-e-list-p d-e-list))
   (subsetp-equal
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0 (find-d-e d-e-list name)))))
      entry-limit))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list find-d-e)
     ((:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nfix-when-zp)
      (:rewrite nth-of-nats=>chars)
      (:definition natp)
      (:rewrite nth-of-effective-fat)
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                . 1)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite take-of-len-free)
      (:rewrite natp-of-car-when-nat-listp)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :do-not-induct t)))

(defthm
  lofat-place-file-correctness-lemma-74
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (lofat-fs-p fat32-in-memory)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (d-e-p d-e)
    (equal
     (mv-nth
      1
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name))))
     0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit)))
    (not
     (intersectp-equal
      (mv-nth
       0
       (d-e-clusterchain fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))))
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory d-e))))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit)))
    (equal (mv-nth 1
                   (d-e-clusterchain fat32-in-memory d-e))
           0)
    (<= 2 (d-e-first-cluster d-e))
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))))
   (equal
    (d-e-clusterchain
     (mv-nth 0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
     d-e)
    (d-e-clusterchain fat32-in-memory d-e)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-find-file-correctness-1-lemma-6
                        d-e-clusterchain-of-lofat-place-file-disjoint)
    :use
    ((:instance d-e-clusterchain-of-lofat-place-file-disjoint
                (root-d-e (mv-nth 0 (find-d-e d-e-list name))))
     lofat-find-file-correctness-1-lemma-6))))

(defthm
  lofat-place-file-correctness-lemma-46
  (implies
   (and
    (not
     (member-intersectp-equal
      x
      (mv-nth
       2
       (lofat-to-hifat-helper fat32-in-memory
                              d-e-list entry-limit1))))
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (>=
     (nfix entry-limit2)
     (mv-nth
      1
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit1))))
   (not
    (member-intersectp-equal
     x
     (mv-nth
      2
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit2)))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-80
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (<=
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     (nfix entry-limit2)))
   (equal
    (hifat-equiv
     (cons
      x
      (mv-nth
       0
       (lofat-to-hifat-helper fat32-in-memory
                              d-e-list entry-limit2)))
     (cons
      x
      (mv-nth
       0
       (lofat-to-hifat-helper fat32-in-memory
                              d-e-list entry-limit1))))
    t))
  :hints
  (("goal"
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-48
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory d-e)))
              entry-limit))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory d-e)))
               name))))
    (<
     (d-e-first-cluster
      (mv-nth 0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory d-e)))
               name)))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (not
    (<
     (binary-+
      -1
      (binary-+
       (count-free-clusters (effective-fat fat32-in-memory))
       (binary-+
        (len
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory d-e)))
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory d-e)))
             name))))))))
     0)))
  :hints (("goal" :do-not-induct t))
  :rule-classes (:rewrite :linear))

(defthm
  lofat-place-file-correctness-lemma-50
  (implies (and (non-free-index-list-listp l fa-table)
                (equal (fat32-entry-mask (nth key fa-table))
                       0))
           (non-free-index-list-listp l (update-nth key val fa-table)))
  :hints (("Goal" :in-theory (enable nfix))))

(defthm
  lofat-place-file-correctness-lemma-53
  (implies
   (and
    (fat32-masked-entry-list-p value-list)
    (equal (len index-list)
           (len value-list))
    (lofat-fs-p fat32-in-memory)
    (equal
     (mv-nth
      '3
      (lofat-to-hifat-helper
       (stobj-set-indices-in-fa-table fat32-in-memory index-list value-list)
       d-e-list entry-limit))
     '0)
    (not-intersectp-list
     index-list
     (mv-nth
      2
      (lofat-to-hifat-helper
       (stobj-set-indices-in-fa-table fat32-in-memory index-list value-list)
       d-e-list entry-limit))))
   (non-free-index-list-listp
    (mv-nth
     2
     (lofat-to-hifat-helper
      (stobj-set-indices-in-fa-table fat32-in-memory index-list value-list)
      d-e-list entry-limit))
    (effective-fat fat32-in-memory)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (e/d nil
                    (non-free-index-list-listp-of-lofat-to-hifat-helper))
    :use
    (:instance non-free-index-list-listp-of-lofat-to-hifat-helper
               (fat32-in-memory
                (stobj-set-indices-in-fa-table fat32-in-memory
                                               index-list value-list))))))

;; Hypotheses minimised...
(defthm
  lofat-place-file-correctness-lemma-99
  (implies
   (and
    (>= (d-e-first-cluster
         (mv-nth 0 (find-d-e d-e-list name)))
        *ms-first-data-cluster*)
    (< (d-e-first-cluster
        (mv-nth 0 (find-d-e d-e-list name)))
       (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory)))
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit))
     0))
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain
             fat32-in-memory
             (mv-nth 0 (find-d-e d-e-list name))))
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (place-d-e
       d-e-list
       (d-e-set-first-cluster-file-size
        (mv-nth 0 (find-d-e d-e-list name))
        0 0))
      entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper find-d-e
                            place-d-e not-intersectp-list)
     ((:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite nth-of-effective-fat)
      (:rewrite nth-of-nats=>chars)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:linear nth-when-d-e-p)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:rewrite explode-of-d-e-filename)
      (:rewrite d-e-list-p-of-cdr-when-d-e-list-p)
      (:rewrite
       d-e-p-when-member-equal-of-d-e-list-p)))
    :induct (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit)
    :do-not-induct t)))

(defthm
  lofat-place-file-correctness-lemma-101
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1)))
    (<= (+ y
           (hifat-entry-count
            (mv-nth 0
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit1))))
        x))
   (<= (+ y
          (hifat-entry-count
           (mv-nth 0
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit2))))
       x))
  :hints (("goal" :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-104
  (implies
   (and (natp entry-limit)
        (useful-d-e-list-p d-e-list))
   (not
    (< entry-limit
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper
                 fat32-in-memory
                 d-e-list (+ -1 entry-limit)))))))
  :instructions
  (:promote (:dv 1)
            (:apply-linear lofat-to-hifat-helper-correctness-3)
            :top (:bash ("Goal" :in-theory (enable nfix))))
  :rule-classes :linear)

(defthm
  lofat-place-file-correctness-lemma-106
  (implies
   (and
    (not (equal (mv-nth 1
                        (find-d-e d-e-list
                                      (d-e-filename d-e)))
                0))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (equal
     (strip-cars fs)
     (strip-cars (mv-nth 0
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit))))
    (useful-d-e-list-p d-e-list))
   (not (consp (assoc-equal (d-e-filename d-e)
                            fs))))
  :hints
  (("goal"
    :in-theory (disable (:rewrite member-of-strip-cars))
    :use
    ((:instance (:rewrite member-of-strip-cars)
                (alist fs)
                (x (d-e-filename d-e)))
     (:instance
      (:rewrite member-of-strip-cars)
      (alist (mv-nth 0
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit)))
      (x (d-e-filename d-e)))))))

(defthm
  lofat-place-file-correctness-lemma-109
  (implies
   (and
    (useful-d-e-list-p d-e-list)
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
    (>= (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
        *ms-first-data-cluster*)
    (> (+ 2 (count-of-clusters fat32-in-memory))
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))))
   (member-equal
    (mv-nth
     0
     (d-e-clusterchain fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name))))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))
  :hints (("goal" :in-theory (enable find-d-e lofat-to-hifat-helper))))

(defthm
  lofat-place-file-correctness-lemma-110
  (implies
   (and
    (member-equal
     i
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list2 name)))))
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list2 name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list2 name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list2 entry-limit2))
           0)
    (useful-d-e-list-p d-e-list2)
    (not (member-intersectp-equal
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list1 entry-limit1))
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list2 entry-limit2)))))
   (not-intersectp-list
    (list i)
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list1 entry-limit1))))
  :hints
  (("goal"
    :in-theory
    (e/d ()
         ((:rewrite lofat-place-file-correctness-1-lemma-13)
          (:rewrite lofat-place-file-correctness-1-lemma-14)
          (:definition member-intersectp-equal)
          (:rewrite lofat-place-file-correctness-1-lemma-17)
          (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
          (:rewrite lofat-place-file-correctness-lemma-56)
          (:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
          (:rewrite lofat-place-file-correctness-1-lemma-11)
          (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                    . 3)
          (:definition free-index-listp)
          (:rewrite lofat-place-file-correctness-1-lemma-15)
          (:rewrite nth-of-effective-fat)))
    :restrict
    ((not-intersectp-list-when-subsetp-1
      ((y
        (mv-nth
         0
         (d-e-clusterchain fat32-in-memory
                               (mv-nth 0
                                       (find-d-e d-e-list2 name)))))))
     (intersectp-member-when-not-member-intersectp
      ((lst2
        (mv-nth 2
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list2 entry-limit2)))))))))

;; Not great, but...
(defthm
  lofat-place-file-correctness-lemma-111
  (implies
   (and
    (not (zp entry-limit))
    (not (equal (mv-nth 1
                        (find-d-e d-e-list
                                      (d-e-filename d-e)))
                0))
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (not (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name))))
    (member-equal
     i
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory d-e-list
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents fat32-in-memory d-e)))
            (+ -1 entry-limit))))))))
     0)
    (equal
     (strip-cars
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (place-contents
          (update-fati
           i
           (fat32-update-lower-28 (fati i fat32-in-memory)
                                  268435455)
           (mv-nth 0
                   (clear-clusterchain
                    fat32-in-memory
                    (d-e-first-cluster
                     (mv-nth 0 (find-d-e d-e-list name)))
                    (d-e-file-size
                     (mv-nth 0 (find-d-e d-e-list name))))))
          (mv-nth 0 (find-d-e d-e-list name))
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          i))
        (place-d-e d-e-list
                       (d-e-set-first-cluster-file-size
                        (mv-nth 0 (find-d-e d-e-list name))
                        i
                        (len (explode (lofat-file->contents file)))))
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (+ -1 entry-limit)))))))))
     (strip-cars
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory d-e-list
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (+ -1 entry-limit))))))))))
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p i)
    (lofat-regular-file-p file)
    (useful-d-e-list-p d-e-list)
    (<= 2 i)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory d-e)))
       (+ -1 entry-limit)))
     0)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents fat32-in-memory d-e)))
        (+ -1 entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory d-e-list
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (+ -1 entry-limit))))))))))
    (consp
     (assoc-equal
      (d-e-filename d-e)
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (place-contents
          (update-fati
           i
           (fat32-update-lower-28 (fati i fat32-in-memory)
                                  268435455)
           (mv-nth 0
                   (clear-clusterchain
                    fat32-in-memory
                    (d-e-first-cluster
                     (mv-nth 0 (find-d-e d-e-list name)))
                    (d-e-file-size
                     (mv-nth 0 (find-d-e d-e-list name))))))
          (mv-nth 0 (find-d-e d-e-list name))
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          i))
        (place-d-e d-e-list
                       (d-e-set-first-cluster-file-size
                        (mv-nth 0 (find-d-e d-e-list name))
                        i
                        (len (explode (lofat-file->contents file)))))
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             (mv-nth
              0
              (place-contents
               (update-fati
                i
                (fat32-update-lower-28 (fati i fat32-in-memory)
                                       268435455)
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0 (find-d-e d-e-list name)))
                  (d-e-file-size
                   (mv-nth 0 (find-d-e d-e-list name))))))
               (mv-nth 0 (find-d-e d-e-list name))
               (lofat-file->contents file)
               (len (explode (lofat-file->contents file)))
               i))
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory d-e)))
             (+ -1 entry-limit)))))))))))
   (equal
    (mv-nth
     3
     (lofat-to-hifat-helper
      (update-fati
       i
       (fat32-update-lower-28 (fati i fat32-in-memory)
                              268435455)
       (mv-nth
        0
        (clear-clusterchain
         fat32-in-memory
         (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
         (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
      (place-d-e d-e-list
                     (d-e-set-first-cluster-file-size
                      (mv-nth 0 (find-d-e d-e-list name))
                      i
                      (len (explode (lofat-file->contents file)))))
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth
          0
          (lofat-to-hifat-helper
           (mv-nth
            0
            (place-contents
             (update-fati
              i
              (fat32-update-lower-28 (fati i fat32-in-memory)
                                     268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0 (find-d-e d-e-list name)))
                (d-e-file-size
                 (mv-nth 0 (find-d-e d-e-list name))))))
             (mv-nth 0 (find-d-e d-e-list name))
             (lofat-file->contents file)
             (len (explode (lofat-file->contents file)))
             i))
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents fat32-in-memory d-e)))
           (+ -1 entry-limit))))))))
    0))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (e/d nil
         ((:rewrite lofat-place-file-correctness-1-lemma-14)
          (:rewrite lofat-place-file-correctness-1-lemma-13)
          (:rewrite lofat-place-file-correctness-1-lemma-17)
          (:definition member-intersectp-equal)
          (:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
          (:rewrite lofat-place-file-correctness-lemma-56)
          (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
          (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                    . 3)
          (:rewrite lofat-place-file-correctness-1-lemma-11)
          (:rewrite lofat-place-file-correctness-1-lemma-15)
          (:definition free-index-listp)
          (:rewrite hifat-to-lofat-inversion-lemma-17)
          (:rewrite nth-of-effective-fat)
          (:linear hifat-entry-count-when-hifat-subsetp))))))

;; Not great, but OK for now.
(defthm
  lofat-place-file-correctness-lemma-54
  (implies
   (and
    (not (equal (mv-nth 1
                        (find-d-e (cdr d-e-list)
                                      (d-e-filename (car d-e-list))))
                0))
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e (cdr d-e-list)
                                                     name))))
    (< (d-e-first-cluster (mv-nth 0
                                      (find-d-e (cdr d-e-list) name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (not (d-e-directory-p (mv-nth 0
                                      (find-d-e (cdr d-e-list)
                                                    name))))
    (member-equal
     i
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e (cdr d-e-list)
                                                         name)))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (equal
     (strip-cars
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (place-contents
          (update-fati
           i
           (fat32-update-lower-28 (fati i fat32-in-memory)
                                  268435455)
           (mv-nth
            0
            (clear-clusterchain
             fat32-in-memory
             (d-e-first-cluster
              (mv-nth 0
                      (find-d-e (cdr d-e-list) name)))
             (d-e-file-size (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      name))))))
          (mv-nth 0
                  (find-d-e (cdr d-e-list) name))
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          i))
        (place-d-e (cdr d-e-list)
                       (d-e-set-first-cluster-file-size
                        (mv-nth 0
                                (find-d-e (cdr d-e-list) name))
                        i
                        (len (explode (lofat-file->contents file)))))
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))
     (strip-cars
      (mv-nth
       0
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit))))))))))
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (lofat-fs-p fat32-in-memory)
    (fat32-masked-entry-p i)
    (lofat-regular-file-p file)
    (useful-d-e-list-p d-e-list)
    (<= 2 i)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       (+ -1 entry-limit)))
     0)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
        (+ -1 entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory (cdr d-e-list)
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))))
   (not
    (consp
     (assoc-equal
      (d-e-filename (car d-e-list))
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (place-contents
          (update-fati
           i
           (fat32-update-lower-28 (fati i fat32-in-memory)
                                  268435455)
           (mv-nth
            0
            (clear-clusterchain
             fat32-in-memory
             (d-e-first-cluster
              (mv-nth 0
                      (find-d-e (cdr d-e-list) name)))
             (d-e-file-size (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      name))))))
          (mv-nth 0
                  (find-d-e (cdr d-e-list) name))
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          i))
        (place-d-e (cdr d-e-list)
                       (d-e-set-first-cluster-file-size
                        (mv-nth 0
                                (find-d-e (cdr d-e-list) name))
                        i
                        (len (explode (lofat-file->contents file)))))
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             (mv-nth
              0
              (place-contents
               (update-fati
                i
                (fat32-update-lower-28 (fati i fat32-in-memory)
                                       268435455)
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e (cdr d-e-list) name)))
                  (d-e-file-size (mv-nth 0
                                             (find-d-e (cdr d-e-list)
                                                           name))))))
               (mv-nth 0
                       (find-d-e (cdr d-e-list) name))
               (lofat-file->contents file)
               (len (explode (lofat-file->contents file)))
               i))
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit))))))))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable (:rewrite member-of-strip-cars)
             (:rewrite lofat-place-file-correctness-1-lemma-13)
             (:rewrite lofat-place-file-correctness-1-lemma-14)
             (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
             (:rewrite lofat-place-file-correctness-1-lemma-11)
             (:rewrite not-intersectp-list-of-lofat-to-hifat-helper)
             (:rewrite lofat-place-file-correctness-1-lemma-17)
             (:rewrite lofat-place-file-correctness-1-lemma-15)
             (:rewrite hifat-to-lofat-inversion-lemma-17)
             (:rewrite lofat-place-file-correctness-lemma-9)
             (:definition member-intersectp-equal))
    :use
    (:instance
     (:rewrite member-of-strip-cars)
     (alist
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth
         0
         (place-contents
          (update-fati
           i
           (fat32-update-lower-28 (fati i fat32-in-memory)
                                  268435455)
           (mv-nth
            0
            (clear-clusterchain
             fat32-in-memory
             (d-e-first-cluster
              (mv-nth 0
                      (find-d-e (cdr d-e-list) name)))
             (d-e-file-size (mv-nth 0
                                        (find-d-e (cdr d-e-list)
                                                      name))))))
          (mv-nth 0
                  (find-d-e (cdr d-e-list) name))
          (lofat-file->contents file)
          (len (explode (lofat-file->contents file)))
          i))
        (place-d-e (cdr d-e-list)
                       (d-e-set-first-cluster-file-size
                        (mv-nth 0
                                (find-d-e (cdr d-e-list) name))
                        i
                        (len (explode (lofat-file->contents file)))))
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             (mv-nth
              0
              (place-contents
               (update-fati
                i
                (fat32-update-lower-28 (fati i fat32-in-memory)
                                       268435455)
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e (cdr d-e-list) name)))
                  (d-e-file-size (mv-nth 0
                                             (find-d-e (cdr d-e-list)
                                                           name))))))
               (mv-nth 0
                       (find-d-e (cdr d-e-list) name))
               (lofat-file->contents file)
               (len (explode (lofat-file->contents file)))
               i))
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory (car d-e-list))))
             (+ -1 entry-limit)))))))))
     (x (d-e-filename (car d-e-list)))))))

(defthmd lofat-place-file-correctness-lemma-62
  (equal (set-equiv (list* x1 x2 y1)
                    (cons x2 y2))
         (set-equiv (remove-equal x2 (list* x1 y1))
                    (remove-equal x2 y2)))
  :instructions ((:dive 1 1)
                 (:rewrite commutativity-2-of-cons-under-flatten-equiv-lemma-1)
                 :up (:rewrite cons-equal-under-set-equiv-1)
                 :top :bash))

(defthm
  set-indices-in-fa-table-when-atom
  (implies (atom index-list)
           (equal (set-indices-in-fa-table fa-table index-list value-list)
                  fa-table))
  :hints (("goal" :in-theory (enable set-indices-in-fa-table))))

(defthm get-clusterchain-under-iff
  (implies (lofat-fs-p fat32-in-memory)
           (iff (mv-nth 0
                        (get-clusterchain fat32-in-memory
                                          masked-next-cluster length))
                (not (zp length))))
  :hints (("goal" :in-theory (enable fat32-build-index-list))))

(defthm d-e-clusterchain-under-iff
  (implies (lofat-fs-p fat32-in-memory)
           (iff (mv-nth 0
                        (d-e-clusterchain fat32-in-memory d-e))
                (or (d-e-directory-p d-e)
                    (not (zp (d-e-file-size d-e))))))
  :hints (("goal" :in-theory (e/d (d-e-clusterchain)
                                  (get-clusterchain-alt))))
  :rule-classes
  (:rewrite
   (:rewrite
    :corollary
    (implies (lofat-fs-p fat32-in-memory)
             (equal
              (consp (mv-nth 0
                             (d-e-clusterchain fat32-in-memory d-e)))
              (or (d-e-directory-p d-e)
                  (not (zp (d-e-file-size d-e))))))
    :hints (("goal" :in-theory (e/d ()
                                    (get-clusterchain-alt)))))
   (:rewrite
    :corollary
    (implies (and
              (lofat-fs-p fat32-in-memory)
              (zp (d-e-file-size d-e))
              (not (d-e-directory-p d-e)))
             (equal
              (mv-nth 0
                      (d-e-clusterchain fat32-in-memory d-e))
              nil)))))

(defthm lofat-place-file-correctness-lemma-118
  (equal (clear-clusterchain fat32-in-memory first-cluster 0)
         (mv fat32-in-memory (- *eio*)))
  :hints (("goal" :in-theory (enable clear-clusterchain
                                     fat32-build-index-list))))

;; (defthm
;;   lofat-place-file-correctness-lemma-121
;;   (implies
;;    (and
;;     (<= 2
;;         (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
;;     (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
;;        (+ 2 (count-of-clusters fat32-in-memory)))
;;     (member-equal
;;      i
;;      (mv-nth
;;       0
;;       (d-e-clusterchain fat32-in-memory
;;                             (mv-nth 0 (find-d-e d-e-list name)))))
;;     (equal (mv-nth 3
;;                    (lofat-to-hifat-helper fat32-in-memory
;;                                           d-e-list entry-limit))
;;            0)
;;     (flatten-equiv
;;      (mv-nth
;;       2
;;       (lofat-to-hifat-helper
;;        (mv-nth
;;         0
;;         (place-contents
;;          (update-fati
;;           i
;;           (fat32-update-lower-28 (fati i fat32-in-memory)
;;                                  268435455)
;;           (mv-nth
;;            0
;;            (clear-clusterchain
;;             fat32-in-memory
;;             (d-e-first-cluster
;;              (mv-nth 0 (find-d-e d-e-list name)))
;;             (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
;;          (mv-nth 0 (find-d-e d-e-list name))
;;          (lofat-file->contents file)
;;          (len (explode (lofat-file->contents file)))
;;          i))
;;        (place-d-e d-e-list
;;                       (d-e-set-first-cluster-file-size
;;                        (mv-nth 0 (find-d-e d-e-list name))
;;                        i
;;                        (len (explode (lofat-file->contents file)))))
;;        entry-limit))
;;      (cons
;;       (cons
;;        i
;;        (find-n-free-clusters
;;         (update-nth
;;          i
;;          (fat32-update-lower-28 (fati i fat32-in-memory)
;;                                 268435455)
;;          (set-indices-in-fa-table
;;           (effective-fat fat32-in-memory)
;;           (mv-nth
;;            0
;;            (d-e-clusterchain fat32-in-memory
;;                                  (mv-nth 0 (find-d-e d-e-list name))))
;;           (make-list-ac
;;            (len (mv-nth 0
;;                         (d-e-clusterchain
;;                          fat32-in-memory
;;                          (mv-nth 0 (find-d-e d-e-list name)))))
;;            0 nil)))
;;         (+ -1
;;            (len (make-clusters (lofat-file->contents file)
;;                                (cluster-size fat32-in-memory))))))
;;       (remove-equal
;;        (mv-nth
;;         0
;;         (d-e-clusterchain fat32-in-memory
;;                               (mv-nth 0 (find-d-e d-e-list name))))
;;        (mv-nth 2
;;                (lofat-to-hifat-helper fat32-in-memory
;;                                       d-e-list entry-limit)))))
;;     (< i
;;        (+ 2 (count-of-clusters fat32-in-memory)))
;;     (useful-d-e-list-p d-e-list)
;;     (equal (mv-nth 1
;;                    (d-e-clusterchain-contents fat32-in-memory d-e))
;;            0)
;;     (not-intersectp-list
;;      (mv-nth 0
;;              (d-e-clusterchain fat32-in-memory d-e))
;;      (mv-nth 2
;;              (lofat-to-hifat-helper fat32-in-memory
;;                                     d-e-list entry-limit))))
;;    (not-intersectp-list
;;     (mv-nth 0
;;             (d-e-clusterchain fat32-in-memory d-e))
;;     (mv-nth
;;      2
;;      (lofat-to-hifat-helper
;;       (mv-nth
;;        0
;;        (place-contents
;;         (update-fati
;;          i
;;          (fat32-update-lower-28 (fati i fat32-in-memory)
;;                                 268435455)
;;          (mv-nth
;;           0
;;           (clear-clusterchain
;;            fat32-in-memory
;;            (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
;;            (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
;;         (mv-nth 0 (find-d-e d-e-list name))
;;         (lofat-file->contents file)
;;         (len (explode (lofat-file->contents file)))
;;         i))
;;       (place-d-e d-e-list
;;                      (d-e-set-first-cluster-file-size
;;                       (mv-nth 0 (find-d-e d-e-list name))
;;                       i
;;                       (len (explode (lofat-file->contents file)))))
;;       entry-limit))))
;;   :instructions
;;   (:promote
;;    (:=
;;     (mv-nth
;;      2
;;      (lofat-to-hifat-helper
;;       (mv-nth
;;        0
;;        (place-contents
;;         (update-fati
;;          i
;;          (fat32-update-lower-28 (fati i fat32-in-memory)
;;                                 268435455)
;;          (mv-nth
;;           0
;;           (clear-clusterchain
;;            fat32-in-memory
;;            (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
;;            (d-e-file-size (mv-nth 0 (find-d-e d-e-list name))))))
;;         (mv-nth 0 (find-d-e d-e-list name))
;;         (lofat-file->contents file)
;;         (len (explode (lofat-file->contents file)))
;;         i))
;;       (place-d-e d-e-list
;;                      (d-e-set-first-cluster-file-size
;;                       (mv-nth 0 (find-d-e d-e-list name))
;;                       i
;;                       (len (explode (lofat-file->contents file)))))
;;       entry-limit))
;;     (cons
;;      (cons
;;       i
;;       (find-n-free-clusters
;;        (update-nth
;;         i
;;         (fat32-update-lower-28 (fati i fat32-in-memory)
;;                                268435455)
;;         (set-indices-in-fa-table
;;          (effective-fat fat32-in-memory)
;;          (mv-nth
;;           0
;;           (d-e-clusterchain fat32-in-memory
;;                                 (mv-nth 0 (find-d-e d-e-list name))))
;;          (make-list-ac
;;           (len (mv-nth 0
;;                        (d-e-clusterchain
;;                         fat32-in-memory
;;                         (mv-nth 0 (find-d-e d-e-list name)))))
;;           0 nil)))
;;        (+ -1
;;           (len (make-clusters (lofat-file->contents file)
;;                               (cluster-size fat32-in-memory))))))
;;      (remove-equal
;;       (mv-nth
;;        0
;;        (d-e-clusterchain fat32-in-memory
;;                              (mv-nth 0 (find-d-e d-e-list name))))
;;       (mv-nth 2
;;               (lofat-to-hifat-helper fat32-in-memory
;;                                      d-e-list entry-limit))))
;;     :equiv flatten-equiv)
;;    :x :bash (:dive 1)
;;    (:rewrite intersectp-is-commutative)
;;    :x (:rewrite intersectp-is-commutative)
;;    (:rewrite lofat-to-hifat-helper-of-hifat-to-lofat-helper-disjoint-lemma-1)
;;    :bash))

(defthm flatten-equiv-of-remove-of-nil
  (flatten-equiv (remove-equal nil x) x)
  :hints (("goal" :in-theory (e/d (flatten-equiv)
                                  ()))))

(defthm flatten-equiv-of-cons-when-atom
  (implies (atom x)
           (flatten-equiv (cons x y) y))
  :hints (("goal" :in-theory (e/d (flatten-equiv)
                                  ()))))

(defcong flatten-equiv flatten-equiv (cons x y) 2
  :hints (("goal" :in-theory (e/d (flatten-equiv)
                                  ()))))

(defthm
  lofat-place-file-correctness-lemma-63
  (implies
   (flatten-equiv
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (place-contents
        (update-fati
         i
         (fat32-update-lower-28 (fati i fat32-in-memory)
                                268435455)
         (mv-nth
          0
          (clear-clusterchain
           fat32-in-memory
           (d-e-first-cluster
            (mv-nth 0
                    (find-d-e d-e-list name)))
           (d-e-file-size (mv-nth 0
                                      (find-d-e d-e-list
                                                    name))))))
        (mv-nth 0
                (find-d-e d-e-list name))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        i))
      (place-d-e d-e-list
                     (d-e-set-first-cluster-file-size
                      (mv-nth 0
                              (find-d-e d-e-list name))
                      i
                      (len (explode (lofat-file->contents file)))))
      entry-limit))
    (cons
     (cons
      i
      (find-n-free-clusters
       (update-nth
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      name))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        name)))))
          0 nil)))
       (+ -1
          (len (make-clusters (lofat-file->contents file)
                              (cluster-size fat32-in-memory))))))
     (remove-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e d-e-list
                                                          name))))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory d-e-list
                                     entry-limit)))))
   (flatten-equiv
    (list*
     (cons
      i
      (find-n-free-clusters
       (update-nth
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      name))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        name)))))
          0 nil)))
       (+ -1
          (len (make-clusters (lofat-file->contents file)
                              (cluster-size fat32-in-memory))))))
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (remove-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e d-e-list
                                                          name))))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory d-e-list
                                     entry-limit))))
    (cons
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (place-contents
         (update-fati
          i
          (fat32-update-lower-28 (fati i fat32-in-memory)
                                 268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0
                     (find-d-e d-e-list name)))
            (d-e-file-size (mv-nth 0
                                       (find-d-e d-e-list
                                                     name))))))
         (mv-nth 0
                 (find-d-e d-e-list name))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         i))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0
                               (find-d-e d-e-list name))
                       i
                       (len (explode (lofat-file->contents file)))))
       entry-limit)))))
  :instructions
  (:promote
   (:=
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (place-contents
        (update-fati
         i
         (fat32-update-lower-28 (fati i fat32-in-memory)
                                268435455)
         (mv-nth
          0
          (clear-clusterchain
           fat32-in-memory
           (d-e-first-cluster
            (mv-nth 0
                    (find-d-e d-e-list name)))
           (d-e-file-size (mv-nth 0
                                      (find-d-e d-e-list
                                                    name))))))
        (mv-nth 0
                (find-d-e d-e-list name))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        i))
      (place-d-e d-e-list
                     (d-e-set-first-cluster-file-size
                      (mv-nth 0
                              (find-d-e d-e-list name))
                      i
                      (len (explode (lofat-file->contents file)))))
      entry-limit))
    (cons
     (cons
      i
      (find-n-free-clusters
       (update-nth
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      name))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        name)))))
          0 nil)))
       (+ -1
          (len (make-clusters (lofat-file->contents file)
                              (cluster-size fat32-in-memory))))))
     (remove-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e d-e-list
                                                          name))))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory d-e-list
                                     entry-limit))))
    :equiv flatten-equiv)
   :bash))

(defthm
  lofat-place-file-correctness-lemma-125
  (implies
   (and
    (equal (fat32-entry-mask (fati i fat32-in-memory))
           0)
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list
                                                     name))))
    (< (d-e-first-cluster (mv-nth 0
                                      (find-d-e d-e-list name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory d-e-list
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory d-e)))
                   entry-limit)))))))
     0)
    (flatten-equiv
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (place-contents
         (update-fati
          i
          (fat32-update-lower-28 (fati i fat32-in-memory)
                                 268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0
                     (find-d-e d-e-list name)))
            (d-e-file-size (mv-nth 0
                                       (find-d-e d-e-list
                                                     name))))))
         (mv-nth 0
                 (find-d-e d-e-list name))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         i))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0
                               (find-d-e d-e-list name))
                       i
                       (len (explode (lofat-file->contents file)))))
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory d-e)))
                   entry-limit)))))))
     (cons
      (cons
       i
       (find-n-free-clusters
        (update-nth
         i
         (fat32-update-lower-28 (fati i fat32-in-memory)
                                268435455)
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain fat32-in-memory
                                 (mv-nth 0
                                         (find-d-e d-e-list
                                                       name))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain fat32-in-memory
                                   (mv-nth 0
                                           (find-d-e d-e-list
                                                         name)))))
           0 nil)))
        (+ -1
           (len (make-clusters (lofat-file->contents file)
                               (cluster-size fat32-in-memory))))))
      (remove-equal
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory
                                     (mv-nth 0
                                             (find-d-e d-e-list
                                                           name))))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory d-e-list
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory d-e)))
              entry-limit))))))))))
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (fat32-masked-entry-p i)
    (useful-d-e-list-p d-e-list)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     0)
    (not
     (member-intersectp-equal
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory d-e)))
        entry-limit))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory d-e-list
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory d-e)))
             entry-limit))))))))))
   (not
    (member-intersectp-equal
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory d-e)))
       entry-limit))
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth
        0
        (place-contents
         (update-fati
          i
          (fat32-update-lower-28 (fati i fat32-in-memory)
                                 268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0
                     (find-d-e d-e-list name)))
            (d-e-file-size (mv-nth 0
                                       (find-d-e d-e-list
                                                     name))))))
         (mv-nth 0
                 (find-d-e d-e-list name))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         i))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0
                               (find-d-e d-e-list name))
                       i
                       (len (explode (lofat-file->contents file)))))
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory d-e)))
                   entry-limit))))))))))
  :instructions
  (:promote
   (:=
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth
       0
       (place-contents
        (update-fati
         i
         (fat32-update-lower-28 (fati i fat32-in-memory)
                                268435455)
         (mv-nth
          0
          (clear-clusterchain
           fat32-in-memory
           (d-e-first-cluster
            (mv-nth 0
                    (find-d-e d-e-list name)))
           (d-e-file-size (mv-nth 0
                                      (find-d-e d-e-list
                                                    name))))))
        (mv-nth 0
                (find-d-e d-e-list name))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        i))
      (place-d-e d-e-list
                     (d-e-set-first-cluster-file-size
                      (mv-nth 0
                              (find-d-e d-e-list name))
                      i
                      (len (explode (lofat-file->contents file)))))
      (+
       -1 entry-limit
       (-
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory d-e)))
                  entry-limit)))))))
    (cons
     (cons
      i
      (find-n-free-clusters
       (update-nth
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain fat32-in-memory
                                (mv-nth 0
                                        (find-d-e d-e-list
                                                      name))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain fat32-in-memory
                                  (mv-nth 0
                                          (find-d-e d-e-list
                                                        name)))))
          0 nil)))
       (+ -1
          (len (make-clusters (lofat-file->contents file)
                              (cluster-size fat32-in-memory))))))
     (remove-equal
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory
                                    (mv-nth 0
                                            (find-d-e d-e-list
                                                          name))))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory d-e-list
        (+
         -1 entry-limit
         (-
          (hifat-entry-count
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory d-e)))
             entry-limit)))))))))
    :equiv flatten-equiv)
   (:dive 1)
   (:rewrite member-intersectp-is-commutative)
   :x :top
   :bash :bash))

(defund-nx flatten-equiv-hack-1
  (i fat32-in-memory d-e-list name file)
  (mv-nth
   0
   (d-e-clusterchain
    (mv-nth
     0
     (place-contents
      (update-fati
       i
       (fat32-update-lower-28 (fati i fat32-in-memory)
                              268435455)
       (mv-nth
        0
        (clear-clusterchain
         fat32-in-memory
         (d-e-first-cluster
          (mv-nth 0
                  (find-d-e d-e-list name)))
         (d-e-file-size (mv-nth 0
                                    (find-d-e d-e-list name))))))
      (mv-nth 0
              (find-d-e d-e-list name))
      (lofat-file->contents file)
      (len (explode (lofat-file->contents file)))
      i))
    (d-e-set-first-cluster-file-size
     (mv-nth 0
             (find-d-e d-e-list name))
     i
     (len (explode (lofat-file->contents file)))))))

(defund-nx flatten-equiv-hack-2
  (fat32-in-memory d-e-list name entry-limit)
  (remove-equal
   (mv-nth 0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth 0
                    (find-d-e d-e-list name))))
   (mv-nth 2
           (lofat-to-hifat-helper fat32-in-memory
                                  d-e-list entry-limit))))

(defthm
  lofat-place-file-correctness-lemma-64
  (implies
   (and (true-listp x) (true-listp w))
   (equal (flatten-equiv (list* w x z)
                         (list* x y))
          (flatten-equiv (remove-equal x (list* w (true-list-list-fix z)))
                         (remove-equal x (true-list-list-fix y)))))
  :instructions
  ((:bash ("goal" :in-theory (e/d (flatten-equiv cons-equal-under-set-equiv-1)
                                  ())))
   (:dive 1 2)
   (:rewrite commutativity-2-of-cons-under-flatten-equiv-lemma-1)
   :up (:rewrite cons-equal-under-set-equiv-1)
   :top (:bash ("goal" :in-theory (e/d nil ())))))

(defthm
  true-list-listp-of-flatten-equiv-hack-2
  (true-list-listp (flatten-equiv-hack-2 fat32-in-memory
                                         d-e-list name entry-limit))
  :hints (("goal" :do-not-induct t
           :in-theory (enable flatten-equiv-hack-2))))

(defthm lofat-place-file-correctness-lemma-65
  (flatten-equiv (append x (cons y z))
                 (cons y (append x z)))
  :hints (("goal" :in-theory (e/d (flatten-equiv)
                                  ()))))

(encapsulate
  ()

  (local
   (in-theory
    (e/d
     (lofat-to-hifat-helper find-d-e
                            place-d-e hifat-entry-count
                            lofat-to-hifat-helper-correctness-4)
     ((:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite nth-of-nats=>chars)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:linear nth-when-d-e-p)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:rewrite explode-of-d-e-filename)
      (:rewrite d-e-list-p-of-cdr-when-d-e-list-p)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
      (:rewrite intersectp-when-subsetp)
      (:rewrite subsetp-trans2)
      (:rewrite subsetp-when-atom-left)
      (:rewrite subsetp-when-atom-right)
      (:rewrite m1-file-p-of-cdar-when-m1-file-alist-p)
      (:rewrite subsetp-car-member)
      (:definition binary-append)
      (:rewrite m1-directory-file-p-when-m1-file-p)
      (:rewrite hifat-to-lofat-inversion-lemma-2)
      intersect-with-subset
      (:definition assoc-equal)
      (:rewrite consp-of-assoc-of-hifat-file-alist-fix)
      (:rewrite fat32-filename-p-of-caar-when-m1-file-alist-p)
      (:rewrite subdir-contents-p-when-zero-length)
      (:rewrite m1-file-alist-p-when-subsetp-equal)
      (:rewrite fat32-filename-p-correctness-1)
      (:rewrite m1-directory-file-p-correctness-1)
      (:rewrite m1-regular-file-p-correctness-1)
      (:rewrite hifat-no-dups-p-of-cdr)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)))))

  (defthm
    lofat-place-file-correctness-lemma-100
    (implies
     (and
      (>= (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
          *ms-first-data-cluster*)
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit1))
             0)
      (not (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))))
     (and
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         0 0))
         entry-limit1))
       0)
      (subsetp-equal
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list name))
                         0 0))
         entry-limit1))
       (cons nil
             (mv-nth 2
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit1))))))
    :hints
    (("goal"
      :induct (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit1)
      :do-not-induct t
      :expand (:free (d-e d-e-list)
                     (lofat-to-hifat-helper fat32-in-memory
                                            (cons d-e d-e-list)
                                            entry-limit1))))))

(defthm
  lofat-place-file-correctness-lemma-114
  (implies
   (and
    (<=
     (len
      (make-clusters
       (nats=>string
        (insert-d-e
         (string=>nats
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory d-e)))
         (d-e-set-first-cluster-file-size
          (mv-nth 0 (find-d-e d-e-list name))
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name))))
             (make-list-ac
              (len (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
              0 nil))
            1))
          (len (explode (lofat-file->contents file))))))
       (cluster-size fat32-in-memory)))
     (+
      (count-free-clusters (effective-fat fat32-in-memory))
      (- (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory))))
      (len (mv-nth 0
                   (d-e-clusterchain fat32-in-memory d-e)))
      (len
       (mv-nth
        0
        (d-e-clusterchain fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list name)))))))
    (lofat-fs-p fat32-in-memory))
   (not
    (<
     (+
      -1
      (count-free-clusters (effective-fat fat32-in-memory))
      (- (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory))))
      (len (mv-nth 0
                   (d-e-clusterchain fat32-in-memory d-e)))
      (len
       (mv-nth
        0
        (d-e-clusterchain fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list name))))))
     0)))
  :hints (("Goal" :do-not-induct t)))

(encapsulate
  ()

  (local (include-book "std/lists/intersectp" :dir :system))

  (local
   (in-theory (e/d (lofat-place-file)
                   ((:rewrite
                     lofat-place-file-correctness-1-lemma-14)
                    (:rewrite intersectp-when-subsetp)
                    (:linear nth-when-d-e-p)
                    (:rewrite
                     d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-3)
                    (:definition find-d-e)
                    (:rewrite append-atom-under-list-equiv)
                    (:rewrite
                     not-intersectp-list-of-lofat-to-hifat-helper)
                    (:rewrite consp-of-make-list-ac)
                    (:linear make-clusters-correctness-2)
                    (:rewrite hifat-to-lofat-inversion-lemma-17)
                    (:rewrite
                     d-e-p-when-member-equal-of-d-e-list-p)
                    (:rewrite
                     d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-11)
                    (:definition place-d-e)
                    (:rewrite
                     lofat-place-file-correctness-lemma-5)
                    (:definition free-index-listp)
                    (:definition binary-append)
                    (:definition unsigned-byte-p)
                    (:rewrite
                     lofat-to-hifat-helper-of-place-contents)
                    (:rewrite
                     lofat-to-hifat-helper-of-update-fati)
                    (:rewrite
                     d-e-first-cluster-of-d-e-set-first-cluster-file-size)
                    (:rewrite
                     fat32-masked-entry-fix-when-fat32-masked-entry-p)
                    (:rewrite
                     lofat-to-hifat-helper-of-clear-clusterchain)
                    (:rewrite
                     lofat-place-file-correctness-1-lemma-17)
                    (:rewrite
                     lofat-to-hifat-helper-of-update-dir-contents)
                    (:definition member-intersectp-equal)
                    (:rewrite
                     lofat-place-file-correctness-1-lemma-15)))))

  (defthm
    lofat-place-file-correctness-lemma-66
    (implies
     (and
      (member-equal
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path)))))))
           0 nil))
         1))
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path)))))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (d-e-directory-p
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (fat32-filename-fix (car path)))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))))
     (not
      (member-equal
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path)))))))
           0 nil))
         1))
       x)))
    :hints
    (("goal"
      :in-theory (disable nth-of-effective-fat
                          (:rewrite nth-of-set-indices-in-fa-table-when-member))
      :use
      ((:instance
        (:rewrite nth-of-set-indices-in-fa-table-when-member)
        (val 0)
        (index-list
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path)))))))
        (fa-table (effective-fat fat32-in-memory))
        (n
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path)))))))
             0 nil))
           1))))
       (:instance
        nth-of-effective-fat
        (n
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path)))))))
             0 nil))
           1))))))))

  (defthm
    lofat-place-file-correctness-lemma-86
    (implies
     (and
      (equal
       (mv-nth
        2
        (place-contents
         (update-fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path))))))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))))
              0 nil))
            1))
          (fat32-update-lower-28
           (fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            fat32-in-memory)
           268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (fat32-filename-fix (car path)))))
            2097152)))
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path))))
         (make-empty-subdir-contents
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path))))))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))))
              0 nil))
            1))
          (d-e-first-cluster root-d-e))
         0
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path)))))))
             0 nil))
           1))))
       0)
      (d-e-directory-p root-d-e)
      (member-equal
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path)))))))
           0 nil))
         1))
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path)))))))
      (equal
       (mv-nth
        1
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path)))))
              2097152)))
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path))))
           (make-empty-subdir-contents
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            (d-e-first-cluster root-d-e))
           0
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path))))))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (fat32-filename-fix (car path)))))))
               0 nil))
             1))))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            0)))))
       0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not (intersectp-equal
            x
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory root-d-e))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (lofat-fs-p fat32-in-memory)
      (d-e-p root-d-e)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit)))
      (equal
       (mv-nth 1
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       0)
      (<
       (d-e-first-cluster
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (fat32-filename-fix (car path)))))
       (+ 2 (count-of-clusters fat32-in-memory)))
      (d-e-directory-p
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (fat32-filename-fix (car path)))))
      (<=
       (+
        64
        (*
         32
         (len
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e))))))
       2097152)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))))
     (not
      (intersectp-equal
       x
       (mv-nth
        0
        (d-e-clusterchain
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path))))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (fat32-filename-fix (car path)))))))
                    0 nil))
                  1))
                fat32-in-memory)
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))
                2097152)))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (fat32-filename-fix (car path))))
             (make-empty-subdir-contents
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              (d-e-first-cluster root-d-e))
             0
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (fat32-filename-fix (car path))))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (fat32-filename-fix (car path)))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              0)))))
         root-d-e)))))
    :hints (("goal" :do-not-induct t
             :in-theory (e/d
                         (update-dir-contents)
                         ((:rewrite
                           d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
                           . 5))))))

  (defthm
    lofat-place-file-correctness-lemma-85
    (implies
     (and
      (d-e-directory-p root-d-e)
      (equal (mv-nth 1
                     (lofat-place-file fat32-in-memory root-d-e path file))
             0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not (intersectp-equal
            x
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory root-d-e))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (lofat-fs-p fat32-in-memory)
      (d-e-p root-d-e)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit)))
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit)))
      (equal
       (mv-nth '1
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       '0))
     (not
      (intersectp-equal
       x
       (mv-nth
        0
        (d-e-clusterchain
         (mv-nth 0
                 (lofat-place-file fat32-in-memory root-d-e path file))
         root-d-e)))))
    :hints (("goal" :do-not-induct t
             :expand (lofat-place-file fat32-in-memory
                                       root-d-e path file)
             :in-theory
             (e/d ()
                  ((:rewrite
                    d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
                    . 5))))))

  (defthm
    lofat-place-file-correctness-lemma-88
    (implies
     (and
      (d-e-directory-p root-d-e)
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (lofat-fs-p fat32-in-memory)
      (d-e-p root-d-e)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit)))
      (equal
       (mv-nth '1
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       '0))
     (equal
      (mv-nth
       1
       (d-e-clusterchain-contents
        (mv-nth 0
                (lofat-place-file fat32-in-memory root-d-e path file))
        root-d-e))
      0))
    :hints (("goal" :do-not-induct t
             :expand (lofat-place-file fat32-in-memory
                                       root-d-e path file)
             :in-theory
             (e/d ()
                  ((:rewrite
                    d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
                    . 5))))))

  (defthm
    lofat-place-file-correctness-lemma-86
    (implies
     (and
      (equal
       (mv-nth
        2
        (place-contents
         (update-fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path))))))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))))
              0 nil))
            1))
          (fat32-update-lower-28
           (fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            fat32-in-memory)
           268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (fat32-filename-fix (car path)))))
            2097152)))
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path))))
         (make-empty-subdir-contents
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth
              0
              (d-e-clusterchain
               fat32-in-memory
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path))))))
             (make-list-ac
              (len
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))))
              0 nil))
            1))
          (d-e-first-cluster root-d-e))
         0
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))))
            (make-list-ac
             (len
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path)))))))
             0 nil))
           1))))
       0)
      (d-e-directory-p root-d-e)
      (member-equal
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth
           0
           (d-e-clusterchain
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))))
          (make-list-ac
           (len
            (mv-nth
             0
             (d-e-clusterchain
              fat32-in-memory
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path)))))))
           0 nil))
         1))
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (fat32-filename-fix (car path)))))))
      (equal
       (mv-nth
        1
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list (mv-nth 0
                                            (d-e-clusterchain-contents
                                             fat32-in-memory root-d-e)))
                 (fat32-filename-fix (car path)))))
              2097152)))
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (fat32-filename-fix (car path))))
           (make-empty-subdir-contents
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            (d-e-first-cluster root-d-e))
           0
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (fat32-filename-fix (car path))))))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (fat32-filename-fix (car path)))))))
               0 nil))
             1))))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (fat32-filename-fix (car path))))
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth
                0
                (d-e-clusterchain
                 fat32-in-memory
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path))))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path)))))))
                0 nil))
              1))
            0)))))
       0)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not (intersectp-equal
            x
            (mv-nth 0
                    (d-e-clusterchain fat32-in-memory root-d-e))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (lofat-fs-p fat32-in-memory)
      (d-e-p root-d-e)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit)))
      (equal
       (mv-nth 1
               (d-e-clusterchain-contents fat32-in-memory root-d-e))
       0)
      (<
       (d-e-first-cluster
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (fat32-filename-fix (car path)))))
       (+ 2 (count-of-clusters fat32-in-memory)))
      (d-e-directory-p
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (fat32-filename-fix (car path)))))
      (<=
       (+
        64
        (*
         32
         (len
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e))))))
       2097152)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))))
     (not
      (intersectp-equal
       x
       (mv-nth
        0
        (d-e-clusterchain
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path))))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (fat32-filename-fix (car path)))))))
                    0 nil))
                  1))
                fat32-in-memory)
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth 0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (fat32-filename-fix (car path)))))
                2097152)))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (fat32-filename-fix (car path))))
             (make-empty-subdir-contents
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              (d-e-first-cluster root-d-e))
             0
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (fat32-filename-fix (car path))))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (fat32-filename-fix (car path)))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               0
               (find-d-e
                (make-d-e-list
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (fat32-filename-fix (car path))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth 0
                              (d-e-clusterchain-contents
                               fat32-in-memory root-d-e)))
                     (fat32-filename-fix (car path))))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (fat32-filename-fix (car path)))))))
                  0 nil))
                1))
              0)))))
         root-d-e)))))
    :hints (("goal" :do-not-induct t
             :in-theory (e/d
                         (update-dir-contents)
                         ((:rewrite
                           d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
                           . 5)))))))

(defthm
  lofat-place-file-correctness-lemma-93
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (not
     (member-intersectp-equal
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit1))
      y))
    (<=
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     (nfix entry-limit2)))
   (not
    (member-intersectp-equal
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit2))
     y)))
  :hints
  (("goal"
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-116
  (implies
   (and
    (equal (len (mv-nth 0
                        (d-e-clusterchain fat32-in-memory d-e)))
           (+ 1
              (- (count-free-clusters (effective-fat fat32-in-memory)))))
    (equal (mv-nth 1
                   (d-e-clusterchain-contents fat32-in-memory d-e))
           0)
    (no-duplicatesp-equal
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory d-e)))
    (fat32-masked-entry-p i)
    (<= 2 i)
    (< i
       (+ 2 (count-of-clusters fat32-in-memory)))
    (equal
     (fat32-entry-mask
      (nth
       i
       (set-indices-in-fa-table
        (effective-fat fat32-in-memory)
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory d-e))
        (make-list-ac
         (+ 1
            (- (count-free-clusters (effective-fat fat32-in-memory))))
         0 nil))))
     0))
   (atom
    (find-n-free-clusters
     (update-nth
      i
      (fat32-update-lower-28 (fati i fat32-in-memory)
                             268435455)
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory d-e))
       (make-list-ac
        (+ 1
           (- (count-free-clusters (effective-fat fat32-in-memory))))
        0 nil)))
     (+
      -1
      (len
       (make-clusters
        (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
        (cluster-size fat32-in-memory)))))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (lofat-to-hifat-helper not-intersectp-list)
     ((:rewrite nth-of-nats=>chars)
      (:linear nth-when-d-e-p)
      (:rewrite explode-of-d-e-filename)
      (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
      (:rewrite subdir-contents-p-when-zero-length)
      (:rewrite natp-of-car-when-nat-listp)
      (:rewrite count-free-clusters-of-set-indices-in-fa-table-lemma-1)
      (:rewrite integerp-of-car-when-integer-listp)
      (:rewrite make-d-e-list-of-clear-d-e-lemma-1)
      (:rewrite subsetp-when-atom-right)
      (:rewrite
       d-e-clusterchain-contents-of-update-dir-contents-coincident)
      (:definition char)
      (:definition binary-append)
      (:rewrite free-index-list-listp-of-update-nth-lemma-1)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
      (:rewrite len-of-nats=>chars)
      (:rewrite len-of-insert-d-e)
      (:rewrite subsetp-when-atom-left)
      (:rewrite str::explode-when-not-stringp)
      (:rewrite
       fat32-build-index-list-of-effective-fat-of-place-contents-disjoint)
      (:rewrite member-when-atom)
      (:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
      (:rewrite d-e-clusterchain-contents-of-update-dir-contents-disjoint)
      (:rewrite non-free-index-listp-of-update-nth)
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (:rewrite lofat-place-file-correctness-1-lemma-16)
      (:rewrite d-e-list-p-of-cdr-when-d-e-list-p)
      (:rewrite lofat-place-file-correctness-1-lemma-11)
      (:rewrite natp-of-car-when-nat-listp)
      (:definition make-list-ac)
      (:rewrite useful-d-e-list-p-of-place-d-e)
      (:rewrite nth-of-set-indices-in-fa-table-when-member)
      (:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:rewrite intersectp-when-subsetp)
      (:rewrite subsetp-car-member)
      (:rewrite hifat-to-lofat-inversion-lemma-2)
      (:rewrite subsetp-implies-subsetp-cdr)
      (:definition assoc-equal)
      (:rewrite place-contents-expansion-2)
      (:rewrite assoc-of-car-when-member)
      (:rewrite flatten-subset-no-duplicatesp-lemma-2)
      (:rewrite consp-of-assoc-of-hifat-file-alist-fix)
      (:rewrite put-assoc-equal-without-change . 2)
      (:rewrite fat32-filename-p-correctness-1)
      (:rewrite free-index-listp-correctness-1)
      (:rewrite stringp-when-nonempty-stringp)
      (:rewrite m1-file-alist-p-when-subsetp-equal)
      (:rewrite d-e-clusterchain-of-update-dir-contents)
      (:rewrite d-e-clusterchain-of-clear-clusterchain)
      (:rewrite d-e-clusterchain-contents-of-clear-clusterchain)
      (:rewrite lofat-find-file-correctness-1-lemma-7)
      (:rewrite lofat-to-hifat-helper-of-update-dir-contents)
      (:rewrite lofat-to-hifat-helper-after-delete-and-clear-1-lemma-3)
      (:rewrite lofat-place-file-correctness-1-lemma-17)
      (:rewrite lofat-place-file-correctness-1-lemma-15)
      (:rewrite natp-of-caar-when-file-table-p)
      (:rewrite natp-of-caar-when-fd-table-p)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-9)
      (:rewrite m1-regular-file-p-correctness-1)
      (:rewrite member-intersectp-is-commutative-lemma-2)
      (:rewrite fati-of-clear-clusterchain . 3)
      (:rewrite hifat-no-dups-p-of-cdr)
      (:rewrite file-table-p-when-subsetp-equal)
      (:rewrite fd-table-p-when-subsetp-equal)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite effective-fat-of-clear-clusterchain . 3)
      (:rewrite effective-fat-of-clear-clusterchain . 2)
      (:rewrite file-table-p-when-not-consp)
      (:rewrite
       d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-4)
      (:definition len)
      (:rewrite m1-file-p-of-cdar-when-m1-file-alist-p)
      (:rewrite m1-file-alist-p-of-lofat-to-hifat-helper)
      (:rewrite not-intersectp-list-when-subsetp-1)
      (:rewrite m1-directory-file-p-when-m1-file-p)
      (:rewrite m1-file-fix-when-m1-file-p)
      (:definition nfix)
      (:rewrite fat32-filename-fix-when-fat32-filename-p)
      (:type-prescription assoc-when-zp-len)))
    :do-not-induct t))
  :rule-classes
  ((:rewrite
    :corollary
    (implies
     (and
      (equal (len (mv-nth 0
                          (d-e-clusterchain fat32-in-memory d-e)))
             (+ 1
                (- (count-free-clusters (effective-fat fat32-in-memory)))))
      (equal (mv-nth 1
                     (d-e-clusterchain-contents fat32-in-memory d-e))
             0)
      (no-duplicatesp-equal
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory d-e)))
      (fat32-masked-entry-p i)
      (<= 2 i)
      (< i
         (+ 2 (count-of-clusters fat32-in-memory)))
      (equal
       (fat32-entry-mask
        (nth
         i
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory d-e))
          (make-list-ac
           (+ 1
              (- (count-free-clusters (effective-fat fat32-in-memory))))
           0 nil))))
       0))
     (equal
      (find-n-free-clusters
       (update-nth
        i
        (fat32-update-lower-28 (fati i fat32-in-memory)
                               268435455)
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory d-e))
         (make-list-ac
          (+ 1
             (- (count-free-clusters (effective-fat fat32-in-memory))))
          0 nil)))
       (+
        -1
        (len
         (make-clusters
          (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
          (cluster-size fat32-in-memory)))))
      nil)))))

;; This really could be disabled, and probably should - it doesn't seem like
;; any lemmas are actively using it, and when enabled it causes some wild
;; case-splitting in lofat-place-file-correctness-lemma-143.
(defthmd
  lofat-place-file-correctness-lemma-75
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (fat32-filename-list-p path)
    (equal
     (mv-nth 1
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
     0)
    (lofat-file-p file)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0))
   (equal
    (d-e-clusterchain-contents
     (mv-nth '0
             (lofat-place-file fat32-in-memory
                               (mv-nth '0
                                       (find-d-e d-e-list name))
                               path file))
     (mv-nth '0
             (find-d-e d-e-list name)))
    (if
     (atom (cdr path))
     (mv
      (implode
       (append
        (nats=>chars
         (insert-d-e
          (string=>nats
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0 (find-d-e d-e-list name)))))
          (cond
           ((or (< 0
                   (len (explode (lofat-file->contents file))))
                (lofat-directory-file-p file))
            (cond
             ((<=
               2
               (d-e-first-cluster
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
                  (car path)))))
              (if
               (<
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
                   (car path))))
                (+ 2 (count-of-clusters fat32-in-memory)))
               (d-e-set-first-cluster-file-size
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
                  (car path)))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth
                         0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list name)))))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth
                           0
                           (d-e-clusterchain-contents
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
                         (car path))))))
                    0 nil))
                  1))
                (if (lofat-directory-file-p file)
                    0
                    (len (explode (lofat-file->contents file)))))
               (d-e-set-first-cluster-file-size
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
                  (car path)))
                (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                (if (lofat-directory-file-p file)
                    0
                    (len (explode (lofat-file->contents file)))))))
             ((equal
               (mv-nth
                1
                (find-d-e
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
                 (car path)))
               0)
              (d-e-set-first-cluster-file-size
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
                 (car path)))
               (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               (if (lofat-directory-file-p file)
                   0
                   (len (explode (lofat-file->contents file))))))
             (t
              (d-e-set-first-cluster-file-size
               (d-e-install-directory-bit
                (make-d-e-with-filename (car path))
                (lofat-directory-file-p file))
               (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               (if (lofat-directory-file-p file)
                   0
                   (len (explode (lofat-file->contents file))))))))
           ((equal
             (mv-nth
              1
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
               (car path)))
             0)
            (d-e-set-first-cluster-file-size
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth 0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
               (car path)))
             0 0))
           (t (d-e-set-first-cluster-file-size
               (d-e-install-directory-bit
                (make-d-e-with-filename (car path))
                (lofat-directory-file-p file))
               0 0)))))
        (make-list-ac
         (+
          (*
           (cluster-size fat32-in-memory)
           (len
            (make-clusters
             (implode
              (nats=>chars
               (insert-d-e
                (string=>nats
                 (mv-nth 0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list name)))))
                (cond
                 ((or (< 0
                         (len (explode (lofat-file->contents file))))
                      (lofat-directory-file-p file))
                  (cond
                   ((<=
                     2
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth
                          0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
                        (car path)))))
                    (if
                     (<
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth
                           0
                           (d-e-clusterchain-contents
                            fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list name)))))
                         (car path))))
                      (+ 2 (count-of-clusters fat32-in-memory)))
                     (d-e-set-first-cluster-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth
                          0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
                        (car path)))
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth
                               0
                               (d-e-clusterchain-contents
                                fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list name)))))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth
                                 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory
                                  (mv-nth
                                   0 (find-d-e d-e-list name)))))
                               (car path))))))
                          0 nil))
                        1))
                      (if (lofat-directory-file-p file)
                          0
                          (len (explode (lofat-file->contents file)))))
                     (d-e-set-first-cluster-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth
                          0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name)))))
                        (car path)))
                      (nth
                       0
                       (find-n-free-clusters (effective-fat fat32-in-memory)
                                             1))
                      (if (lofat-directory-file-p file)
                          0
                          (len (explode (lofat-file->contents file)))))))
                   ((equal
                     (mv-nth
                      1
                      (find-d-e
                       (make-d-e-list
                        (mv-nth
                         0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list name)))))
                       (car path)))
                     0)
                    (d-e-set-first-cluster-file-size
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth
                         0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list name)))))
                       (car path)))
                     (nth
                      0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            1))
                     (if (lofat-directory-file-p file)
                         0
                         (len (explode (lofat-file->contents file))))))
                   (t
                    (d-e-set-first-cluster-file-size
                     (d-e-install-directory-bit
                      (make-d-e-with-filename (car path))
                      (lofat-directory-file-p file))
                     (nth
                      0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            1))
                     (if (lofat-directory-file-p file)
                         0
                         (len (explode (lofat-file->contents file))))))))
                 ((equal
                   (mv-nth
                    1
                    (find-d-e
                     (make-d-e-list
                      (mv-nth
                       0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
                     (car path)))
                   0)
                  (d-e-set-first-cluster-file-size
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth
                       0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
                     (car path)))
                   0 0))
                 (t (d-e-set-first-cluster-file-size
                     (d-e-install-directory-bit
                      (make-d-e-with-filename (car path))
                      (lofat-directory-file-p file))
                     0 0))))))
             (cluster-size fat32-in-memory))))
          (-
           (len
            (nats=>chars
             (insert-d-e
              (string=>nats
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              (cond
               ((or (< 0
                       (len (explode (lofat-file->contents file))))
                    (lofat-directory-file-p file))
                (cond
                 ((<=
                   2
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth
                        0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
                      (car path)))))
                  (if
                   (<
                    (d-e-first-cluster
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth
                         0
                         (d-e-clusterchain-contents
                          fat32-in-memory
                          (mv-nth 0 (find-d-e d-e-list name)))))
                       (car path))))
                    (+ 2 (count-of-clusters fat32-in-memory)))
                   (d-e-set-first-cluster-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth
                        0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
                      (car path)))
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth
                             0
                             (d-e-clusterchain-contents
                              fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list name)))))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth
                               0
                               (d-e-clusterchain-contents
                                fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list name)))))
                             (car path))))))
                        0 nil))
                      1))
                    (if (lofat-directory-file-p file)
                        0
                        (len (explode (lofat-file->contents file)))))
                   (d-e-set-first-cluster-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth
                        0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth 0 (find-d-e d-e-list name)))))
                      (car path)))
                    (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1))
                    (if (lofat-directory-file-p file)
                        0
                        (len (explode (lofat-file->contents file)))))))
                 ((equal
                   (mv-nth
                    1
                    (find-d-e
                     (make-d-e-list
                      (mv-nth
                       0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
                     (car path)))
                   0)
                  (d-e-set-first-cluster-file-size
                   (mv-nth
                    0
                    (find-d-e
                     (make-d-e-list
                      (mv-nth
                       0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
                     (car path)))
                   (nth 0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              1))
                   (if (lofat-directory-file-p file)
                       0
                       (len (explode (lofat-file->contents file))))))
                 (t
                  (d-e-set-first-cluster-file-size
                   (d-e-install-directory-bit
                    (make-d-e-with-filename (car path))
                    (lofat-directory-file-p file))
                   (nth 0
                        (find-n-free-clusters (effective-fat fat32-in-memory)
                                              1))
                   (if (lofat-directory-file-p file)
                       0
                       (len (explode (lofat-file->contents file))))))))
               ((equal
                 (mv-nth
                  1
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
                   (car path)))
                 0)
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  0
                  (find-d-e
                   (make-d-e-list
                    (mv-nth
                     0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
                   (car path)))
                 0 0))
               (t (d-e-set-first-cluster-file-size
                   (d-e-install-directory-bit
                    (make-d-e-with-filename (car path))
                    (lofat-directory-file-p file))
                   0 0))))))))
         (code-char 0)
         nil)))
      0)
     (d-e-clusterchain-contents
      fat32-in-memory
      (mv-nth 0 (find-d-e d-e-list name))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-lofat-place-file-coincident-1)
     (:rewrite
      d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
      . 5)
     (:rewrite lofat-find-file-correctness-1-lemma-6)
     lofat-place-file)
    :use
    ((:instance
      (:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-1)
      (file file)
      (path path)
      (d-e (mv-nth 0 (find-d-e d-e-list name)))
      (fat32-in-memory fat32-in-memory))
     (:rewrite lofat-find-file-correctness-1-lemma-6))
    :expand
    (:with
     lofat-place-file-correctness-lemma-18
     (member-equal
      (nth
       '0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          '0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            '0
            (find-d-e
             (make-d-e-list
              (mv-nth '0
                      (d-e-clusterchain-contents
                       fat32-in-memory
                       (mv-nth '0
                               (find-d-e d-e-list name)))))
             (car path)))))
         (make-list-ac
          (len
           (mv-nth
            '0
            (d-e-clusterchain
             fat32-in-memory
             (mv-nth
              '0
              (find-d-e
               (make-d-e-list
                (mv-nth '0
                        (d-e-clusterchain-contents
                         fat32-in-memory
                         (mv-nth '0
                                 (find-d-e d-e-list name)))))
               (car path))))))
          '0
          'nil))
        '1))
      (mv-nth
       '0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         '0
         (find-d-e
          (make-d-e-list
           (mv-nth '0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth '0
                            (find-d-e d-e-list name)))))
          (car path))))))))))

(defthmd
  lofat-place-file-correctness-lemma-76
  (implies
   (and
    (hifat-equiv (mv-nth 0
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit1))
                 fs)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (equal (hifat-entry-count
           (mv-nth 0
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit2)))
          (hifat-entry-count fs)))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-78
  (implies
   (and
    (not
     (member-intersectp-equal
      (set-difference-equal
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory1
                                      d-e-list1 entry-limit1)))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory2
                                     d-e-list2 entry-limit1))))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory1
                                          d-e-list1 entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory1
                                       d-e-list1 entry-limit1)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory2
                                          d-e-list2 entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory2
                                       d-e-list2 entry-limit1))))
   (not (member-intersectp-equal
         (set-difference-equal
          x
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory1
                                         d-e-list1 entry-limit2)))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory2
                                        d-e-list2 entry-limit2)))))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use ((:instance lofat-to-hifat-helper-correctness-4
                            (fat32-in-memory fat32-in-memory1)
                            (d-e-list d-e-list1))
                 (:instance lofat-to-hifat-helper-correctness-4
                            (fat32-in-memory fat32-in-memory2)
                            (d-e-list d-e-list2))))))

(defthm
  lofat-place-file-correctness-lemma-79
  (implies
   (and
    (hifat-equiv
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory1
                                    d-e-list1 entry-limit1))
     (mv-nth 0
             (hifat-place-file
              (mv-nth 0
                      (lofat-to-hifat-helper fat32-in-memory2
                                             d-e-list2 entry-limit1))
              path file)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory1
                                          d-e-list1 entry-limit1))
           0)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory2
                                          d-e-list2 entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory2
                                       d-e-list2 entry-limit1)))
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory1
                                       d-e-list1 entry-limit1))))
   (equal
    (hifat-equiv
     (mv-nth 0
             (lofat-to-hifat-helper fat32-in-memory1
                                    d-e-list1 entry-limit2))
     (mv-nth 0
             (hifat-place-file
              (mv-nth 0
                      (lofat-to-hifat-helper fat32-in-memory2
                                             d-e-list2 entry-limit2))
              path file)))
    t))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use ((:instance lofat-to-hifat-helper-correctness-4
                            (fat32-in-memory fat32-in-memory1)
                            (d-e-list d-e-list1))
                 (:instance lofat-to-hifat-helper-correctness-4
                            (fat32-in-memory fat32-in-memory2)
                            (d-e-list d-e-list2))))))

(defthm
  lofat-place-file-correctness-lemma-81
  (implies
   (and
    (hifat-equiv
     fs1
     (put-assoc-equal
      name
      (m1-file
       d-e
       (mv-nth 0
               (hifat-place-file
                (mv-nth 0
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit1))
                path file)))
      fs2))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (equal
    (hifat-equiv
     (cons x fs1)
     (cons
      x
      (put-assoc-equal
       name
       (m1-file
        d-e
        (mv-nth 0
                (hifat-place-file
                 (mv-nth 0
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit2))
                 path file)))
       fs2)))
    t))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-82
  (implies
   (and (lofat-fs-p fat32-in-memory)
        (not (d-e-directory-p d-e))
        (case-split (not (< '0 (d-e-file-size d-e)))))
   (not-intersectp-list
    (mv-nth 0
            (d-e-clusterchain fat32-in-memory d-e))
    (mv-nth
     2
     (lofat-to-hifat-helper
      (mv-nth 0
              (lofat-place-file fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list name))
                                path file))
      (make-d-e-list
       (mv-nth
        0
        (d-e-clusterchain-contents
         (mv-nth 0
                 (lofat-place-file fat32-in-memory
                                   (mv-nth 0 (find-d-e d-e-list name))
                                   path file))
         (mv-nth 0 (find-d-e d-e-list name)))))
      entry-limit))))
  :hints (("goal" :do-not-induct t)))

(defthm
  lofat-place-file-correctness-lemma-83
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (<=
     x
     (binary-+
      y
      (binary-+
       z
       (unary--
        (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit1)))))))
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (<=
    x
    (binary-+
     y
     (binary-+
      z
      (unary--
       (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit2))))))))
  :hints (("goal" :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-84
  (implies
   (and
    (< 0
       (mv-nth 1
               (hifat-place-file
                (mv-nth 0
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit1))
                path file)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (< 0
      (mv-nth 1
              (hifat-place-file
               (mv-nth 0
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit2))
               path file))))
  :hints (("goal" :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4))
  :rule-classes :linear)

;; Don't ask.
(defthm
  lofat-place-file-correctness-lemma-89
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory (car d-e-list)
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       entry-limit))
     0)
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory (car d-e-list)
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list))))
       entry-limit))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit)))
       path (m1-file d-e nil))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit))))))))
     0)
    (not (zp entry-limit))
    (<
     (+
      1
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit))))
      (hifat-entry-count
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory (cdr d-e-list)
         (+
          -1 entry-limit
          (-
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit))))))))))
     entry-limit)
    (useful-d-e-list-p d-e-list)
    (consp (cdr path)))
   (hifat-equiv
    (cons
     (cons
      (d-e-filename (car d-e-list))
      (m1-file
       (car d-e-list)
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth 0
                 (lofat-place-file fat32-in-memory (car d-e-list)
                                   path file))
         (make-d-e-list (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory (car d-e-list))))
         (+ -1 entry-limit)))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth
           0
           (lofat-to-hifat-helper
            (mv-nth 0
                    (lofat-place-file fat32-in-memory (car d-e-list)
                                      path file))
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory (car d-e-list))))
            (+ -1 entry-limit)))))))))
    (cons
     (cons
      (d-e-filename (car d-e-list))
      (m1-file
       (car d-e-list)
       (mv-nth
        0
        (hifat-place-file
         (mv-nth 0
                 (lofat-to-hifat-helper
                  fat32-in-memory
                  (make-d-e-list
                   (mv-nth 0
                           (d-e-clusterchain-contents
                            fat32-in-memory (car d-e-list))))
                  (+ -1 entry-limit)))
         path (m1-file d-e nil)))))
     (mv-nth
      0
      (lofat-to-hifat-helper
       fat32-in-memory (cdr d-e-list)
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))))))
  :hints
  (("goal"
    :do-not-induct t
    :use
    ((:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (entry-limit2
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))
        (hifat-entry-count
         (m1-file->contents
          (mv-nth
           0
           (hifat-find-file
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit)))
            path))))))
      (d-e-list (cdr d-e-list))
      (fat32-in-memory fat32-in-memory))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1
       (+
        -1 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (entry-limit2
       (+
        -2 entry-limit
        (-
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper
                   fat32-in-memory
                   (make-d-e-list
                    (mv-nth 0
                            (d-e-clusterchain-contents
                             fat32-in-memory (car d-e-list))))
                   (+ -1 entry-limit)))))))
      (d-e-list (cdr d-e-list))
      (fat32-in-memory fat32-in-memory))
     (:instance
      lofat-to-hifat-helper-correctness-4
      (entry-limit1 entry-limit)
      (entry-limit2 (+ -1 entry-limit))
      (d-e-list
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents fat32-in-memory (car d-e-list)))))
      (fat32-in-memory
       (mv-nth 0
               (lofat-place-file fat32-in-memory (car d-e-list)
                                 path file))))))))

(defthm
  lofat-place-file-correctness-lemma-90
  (implies (fat32-filename-p name)
           (not (useless-d-e-p (make-d-e-with-filename name))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-d-e-with-filename))))

(defund m1-file-hifat-file-alist-fix (d-e fs)
  (m1-file d-e (hifat-file-alist-fix fs)))

(defthm
  m1-file-hifat-file-alist-fix-congruence
  (implies
   (hifat-equiv fs1 fs2)
   (hifat-equiv (cons (cons name
                            (m1-file-hifat-file-alist-fix d-e fs1))
                      y)
                (cons (cons name
                            (m1-file-hifat-file-alist-fix d-e fs2))
                      y)))
  :rule-classes (:congruence)
  :instructions
  ((:bash ("goal" :in-theory (enable m1-file-hifat-file-alist-fix)))
   (:claim (and (hifat-equiv (hifat-file-alist-fix fs1)
                             (hifat-file-alist-fix fs2))
                (m1-file-alist-p (hifat-file-alist-fix fs1))
                (m1-file-alist-p (hifat-file-alist-fix fs2)))
           :hints :none)
   (:rewrite lofat-place-file-correctness-lemma-2)
   (:bash ("goal" :in-theory (enable hifat-equiv)))))

(defthm m1-file-hifat-file-alist-fix-normalisation
  (implies (equal (hifat-file-alist-fix fs) fs)
           (equal (m1-file d-e fs)
                  (m1-file-hifat-file-alist-fix d-e fs)))
  :hints (("goal" :in-theory (enable m1-file-hifat-file-alist-fix))))

(theory-invariant (incompatible (:definition m1-file-hifat-file-alist-fix)
                                (:rewrite m1-file-hifat-file-alist-fix-normalisation)))

(defthm
  m1-file->contents-of-m1-file-hifat-file-alist-fix
  (equal (m1-file->contents (m1-file-hifat-file-alist-fix d-e fs))
         (hifat-file-alist-fix fs))
  :hints
  (("goal" :in-theory (e/d (m1-file-hifat-file-alist-fix)
                           (m1-file-hifat-file-alist-fix-normalisation)))))

(defthm
  lofat-place-file-correctness-lemma-91
  (implies
   (and
    (hifat-equiv (mv-nth 0
                         (lofat-to-hifat-helper fat32-in-memory
                                                d-e-list entry-limit1))
                 fs)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit1))))
   (hifat-equiv (mv-nth 0
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit2))
                fs))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-to-hifat-helper-correctness-4)
           :use lofat-to-hifat-helper-correctness-4)))

(defthm
  m1-file-p-of-m1-file-hifat-file-alist-fix
  (m1-file-p (m1-file-hifat-file-alist-fix d-e fs))
  :hints
  (("goal" :in-theory (e/d (m1-file-hifat-file-alist-fix)
                           (m1-file-hifat-file-alist-fix-normalisation)))))

(defthm
  lofat-place-file-correctness-lemma-92
  (implies
   (and
    (d-e-directory-p (mv-nth 0
                                 (find-d-e d-e-list name)))
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory d-e-list
                                          entry-limit1))
           0)
    (>= (nfix entry-limit2)
        (mv-nth 1
                (lofat-to-hifat-helper
                 fat32-in-memory
                 (make-d-e-list
                  (mv-nth 0
                          (d-e-clusterchain-contents
                           fat32-in-memory
                           (mv-nth 0
                                   (find-d-e d-e-list
                                                 name)))))
                 entry-limit1)))
    (useful-d-e-list-p d-e-list))
   (equal
    (hifat-equiv
     (mv-nth
      0
      (hifat-place-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list
                                         name)))))
         entry-limit2))
       path file))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list
                                         name)))))
         entry-limit1))
       path file)))
    t))
 :hints
 (("goal"
   :use
   (:instance
    lofat-to-hifat-helper-correctness-4
    (d-e-list
     (make-d-e-list (mv-nth 0
                                (d-e-clusterchain-contents
                                     fat32-in-memory
                                     (mv-nth 0
                                             (find-d-e d-e-list
                                                           name))))))
    (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-place-file-correctness-lemma-95
  (implies
   (and
    (hifat-equiv
     y
     (put-assoc-equal
      name
      (m1-file-hifat-file-alist-fix
       (mv-nth 0 (find-d-e d-e-list2 name))
       (mv-nth
        0
        (hifat-place-file
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0 (find-d-e d-e-list2 name)))))
           entry-limit1))
         path
         (m1-file-hifat-file-alist-fix d-e nil))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list2 entry-limit1))))
    (<=
     (mv-nth
      1
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list2 name)))))
       entry-limit1))
     (nfix entry-limit2))
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list2 name)))
    (useful-d-e-list-p d-e-list2)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list2 entry-limit1))
           0))
   (equal
    (hifat-equiv
     (cons x y)
     (cons
      x
      (put-assoc-equal
       name
       (m1-file-hifat-file-alist-fix
        (mv-nth 0 (find-d-e d-e-list2 name))
        (mv-nth
         0
         (hifat-place-file
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list2 name)))))
            entry-limit2))
          path
          (m1-file-hifat-file-alist-fix d-e nil))))
       (mv-nth 0
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list2 entry-limit1)))))
    t))
  :hints
  (("goal"
    :do-not-induct t
    :use
    (:instance
     lofat-to-hifat-helper-correctness-4
     (entry-limit2 entry-limit2)
     (d-e-list
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0 (find-d-e d-e-list2 name))))))
     (fat32-in-memory fat32-in-memory)))))

(defthm
  lofat-place-file-correctness-lemma-96
  (implies
   (and
    (useful-d-e-list-p d-e-list2)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list2 entry-limit1))
           0)
    (not
     (member-intersectp-equal
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list1 entry-limit2))
      (mv-nth
       2
       (lofat-to-hifat-helper
        fat32-in-memory
        (make-d-e-list
         (mv-nth 0
                 (d-e-clusterchain-contents
                  fat32-in-memory
                  (mv-nth 0 (find-d-e d-e-list2 name)))))
        entry-limit1))))
    (zp (mv-nth 3
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list1 entry-limit2)))
    (useful-d-e-list-p d-e-list1)
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list2 name))))
     (mv-nth
      2
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents
                 fat32-in-memory
                 (mv-nth 0 (find-d-e d-e-list2 name)))))
       entry-limit1)))
    (not-intersectp-list
     (mv-nth
      0
      (d-e-clusterchain fat32-in-memory
                            (mv-nth 0 (find-d-e d-e-list2 name))))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list1 entry-limit2)))
    (lofat-fs-p fat32-in-memory)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list2 name)))
    (let ((mv (d-e-clusterchain-contents
               fat32-in-memory
               (mv-nth 0 (find-d-e d-e-list2 name))))
          (root-d-e (mv-nth 0 (find-d-e d-e-list2 name))))
         (let ((ignore-0 (hide (mv-nth 0 mv)))
               (error-code (mv-nth 1 mv)))
              (mv-let (clusterchain ignore-0)
                (d-e-clusterchain fat32-in-memory root-d-e)
                (declare (ignore ignore-0))
                (and (equal error-code 0)
                     (no-duplicatesp-equal clusterchain))))))
   (equal
    (lofat-to-hifat-helper
     (mv-nth 0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list2 name))
                               path file))
     d-e-list1 entry-limit2)
    (lofat-to-hifat-helper fat32-in-memory
                           d-e-list1 entry-limit2)))
  :hints
  (("goal"
    :in-theory (disable lofat-to-hifat-helper-of-lofat-place-file-disjoint)
    :use (:instance lofat-to-hifat-helper-of-lofat-place-file-disjoint
                    (root-d-e (mv-nth '0
                                          (find-d-e d-e-list2 name)))
                    (d-e-list d-e-list1)))))

(encapsulate
  ()

  (local
   (in-theory
    (disable
     (:definition intersectp-equal)
     (:rewrite
      lofat-place-file-correctness-lemma-70)
     (:rewrite
      member-intersectp-of-set-difference$-lemma-2)
     (:definition len)
     (:rewrite subsetp-append1)
     (:rewrite
      nth-of-set-indices-in-fa-table-when-member)
     (:rewrite not-intersectp-list-when-subsetp-1)
     (:rewrite subsetp-trans2)
     (:rewrite subsetp-trans)
     (:rewrite natp-of-car-when-nat-listp)
     (:rewrite
      d-e-p-when-member-equal-of-d-e-list-p)
     (:linear
      lofat-place-file-correctness-1-lemma-25)
     (:definition make-list-ac)
     (:rewrite
      not-intersectp-list-of-set-difference$-lemma-1)
     (:rewrite
      d-e-clusterchain-of-clear-clusterchain)
     (:rewrite
      d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-10)
     (:rewrite
      nat-listp-if-fat32-masked-entry-list-p)
     (:rewrite member-of-append)
     (:definition binary-append)
     (:rewrite member-when-atom)
     (:rewrite put-assoc-equal-without-change . 2))))

  ;; this is chosen to be the same as an earlier induction scheme. let's see
  ;; how it goes..
  (local
   (defun-nx
     induction-scheme
     (d-e-list entry-limit fat32-in-memory x)
     (cond
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit))
        (d-e-directory-p (car d-e-list))
        (>= (d-e-first-cluster (car d-e-list))
            2)
        (> (+ (count-of-clusters fat32-in-memory)
              2)
           (d-e-first-cluster (car d-e-list))))
       (induction-scheme
        (cdr d-e-list)
        (+
         entry-limit
         (-
          (+
           1
           (hifat-entry-count
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory (car d-e-list))))
              (+ -1 entry-limit)))))))
        fat32-in-memory
        (append
         (mv-nth 0
                 (d-e-clusterchain
                  fat32-in-memory (car d-e-list)))
         (flatten
          (mv-nth
           2
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory (car d-e-list))))
            (+ -1 entry-limit))))
         x)))
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit))
        ;; (not (d-e-directory-p (car d-e-list)))
        (>= (d-e-first-cluster (car d-e-list))
            2)
        (> (+ (count-of-clusters fat32-in-memory)
              2)
           (d-e-first-cluster (car d-e-list))))
       (induction-scheme
        (cdr d-e-list)
        (- entry-limit 1)
        fat32-in-memory
        (append
         (mv-nth 0
                 (d-e-clusterchain
                  fat32-in-memory (car d-e-list)))
         x)))
      ((and
        (not (atom d-e-list))
        (not (zp entry-limit)))
       (induction-scheme
        (cdr d-e-list)
        (- entry-limit 1)
        fat32-in-memory
        x))
      (t
       (mv d-e-list entry-limit fat32-in-memory x)))))

  ;; this is derived from a subgoal of lofat-place-file-correctness-1-lemma-1, by
  ;; means of the following proof-builder instructions.
  ;; ((:in-theory (enable fat32-filename-list-p))
  ;;  (:claim
  ;;   (and
  ;;    (equal
  ;;     (make-d-e-list
  ;;      (mv-nth
  ;;       0
  ;;       (d-e-clusterchain-contents fat32-in-memory root-d-e)))
  ;;     d-e-list)
  ;;    (equal path (list filename)))
  ;;   :hints :none)
  ;;  (:=
  ;;   (make-d-e-list
  ;;    (mv-nth 0
  ;;            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
  ;;   d-e-list)
  ;;  (:= path (list filename))
  ;;  :drop :bash)
  ;; the hypotheses have been minimised.
  (defthm
    lofat-place-file-correctness-1-lemma-23
    (implies
     (and
      (equal (mv-nth 1 (find-d-e d-e-list filename))
             0)
      (< 0
         (len (explode (lofat-file->contents file))))
      (lofat-fs-p fat32-in-memory)
      (useful-d-e-list-p d-e-list)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (lofat-regular-file-p file)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (<= 2
          (d-e-first-cluster (mv-nth 0
                                         (find-d-e d-e-list filename))))
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (not (d-e-directory-p (mv-nth 0
                                        (find-d-e d-e-list filename))))
      (zp
       (mv-nth
        2
        (place-contents
         (update-fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename))))
             (make-list-ac
              (len (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))
              0 nil))
            1))
          (fat32-update-lower-28
           (fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            fat32-in-memory)
           268435455)
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0 (find-d-e d-e-list filename)))
            (d-e-file-size (mv-nth 0
                                       (find-d-e d-e-list filename))))))
         (mv-nth 0 (find-d-e d-e-list filename))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename))))
            (make-list-ac
             (len (mv-nth 0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth 0
                                   (find-d-e d-e-list filename)))))
             0 nil))
           1))))))
     (and
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename))))
                 (make-list-ac
                  (len
                   (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list filename)))
                     (d-e-file-size
                      (mv-nth 0
                              (find-d-e d-e-list filename))))))
           (mv-nth 0 (find-d-e d-e-list filename))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename)))))
               0 nil))
             1))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (mv-nth 0 (find-d-e d-e-list filename))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename)))))
               0 nil))
             1))
           (len (explode (lofat-file->contents file)))))
         entry-limit)))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename))))
                 (make-list-ac
                  (len
                   (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth 0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth 0 (find-d-e d-e-list filename)))
                     (d-e-file-size
                      (mv-nth 0
                              (find-d-e d-e-list filename))))))
           (mv-nth 0 (find-d-e d-e-list filename))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename)))))
               0 nil))
             1))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (mv-nth 0 (find-d-e d-e-list filename))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename)))))
               0 nil))
             1))
           (len (explode (lofat-file->contents file)))))
         entry-limit))
       0)
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename)))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster
               (mv-nth 0 (find-d-e d-e-list filename)))
              (d-e-file-size
               (mv-nth 0
                       (find-d-e d-e-list filename))))))
           (mv-nth 0 (find-d-e d-e-list filename))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename)))))
               0 nil))
             1))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (mv-nth 0 (find-d-e d-e-list filename))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e d-e-list filename)))))
               0 nil))
             1))
           (len (explode (lofat-file->contents file)))))
         entry-limit))
       (put-assoc-equal
        filename
        (m1-file
         (d-e-set-first-cluster-file-size
          (mv-nth 0 (find-d-e d-e-list filename))
          (nth 0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename))))
                 (make-list-ac
                  (len
                   (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))
                  0 nil))
                1))
          (len (explode (lofat-file->contents file))))
         (lofat-file->contents file))
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))))
    :hints
    (("goal"
      :in-theory
      (e/d
       (lofat-to-hifat-helper not-intersectp-list)
       ((:rewrite
         d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
         . 1)
        (:rewrite lofat-place-file-correctness-1-lemma-13)
        (:rewrite nth-of-nats=>chars)
        (:rewrite lofat-place-file-correctness-1-lemma-14)
        (:linear nth-when-d-e-p)
        (:rewrite explode-of-d-e-filename)
        (:rewrite take-of-len-free)
        (:rewrite lofat-place-file-correctness-1-lemma-17)
        (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
        (:rewrite lofat-place-file-correctness-1-lemma-15)
        (:rewrite subdir-contents-p-when-zero-length)
        (:linear lofat-to-hifat-helper-correctness-3)))
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (:free (d-e fat32-in-memory
                               d-e-list entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             (cons d-e d-e-list)
                                             entry-limit)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (equal (mv-nth 1 (find-d-e d-e-list filename))
               0)
        (< 0
           (len (explode (lofat-file->contents file))))
        (lofat-fs-p fat32-in-memory)
        (useful-d-e-list-p d-e-list)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (lofat-regular-file-p file)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (<= 2
            (d-e-first-cluster (mv-nth 0
                                           (find-d-e d-e-list filename))))
        (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
           (+ 2 (count-of-clusters fat32-in-memory)))
        (not (d-e-directory-p (mv-nth 0
                                          (find-d-e d-e-list filename))))
        (zp
         (mv-nth
          2
          (place-contents
           (update-fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len (mv-nth 0
                             (d-e-clusterchain
                              fat32-in-memory
                              (mv-nth 0
                                      (find-d-e d-e-list filename)))))
                0 nil))
              1))
            (fat32-update-lower-28
             (fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename))))
                 (make-list-ac
                  (len
                   (mv-nth 0
                           (d-e-clusterchain
                            fat32-in-memory
                            (mv-nth 0
                                    (find-d-e d-e-list filename)))))
                  0 nil))
                1))
              fat32-in-memory)
             268435455)
            (mv-nth
             0
             (clear-clusterchain
              fat32-in-memory
              (d-e-first-cluster
               (mv-nth 0 (find-d-e d-e-list filename)))
              (d-e-file-size (mv-nth 0
                                         (find-d-e d-e-list filename))))))
           (mv-nth 0 (find-d-e d-e-list filename))
           (lofat-file->contents file)
           (len (explode (lofat-file->contents file)))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename))))
              (make-list-ac
               (len (mv-nth 0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list filename)))))
               0 nil))
             1))))))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (place-contents
            (update-fati
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename))))
                (make-list-ac
                 (len
                  (mv-nth 0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth 0
                                   (find-d-e d-e-list filename)))))
                 0 nil))
               1))
             (fat32-update-lower-28
              (fati
               (nth
                0
                (find-n-free-clusters
                 (set-indices-in-fa-table
                  (effective-fat fat32-in-memory)
                  (mv-nth 0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth 0
                                   (find-d-e d-e-list filename))))
                  (make-list-ac
                   (len
                    (mv-nth 0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth 0
                                     (find-d-e d-e-list filename)))))
                   0 nil))
                 1))
               fat32-in-memory)
              268435455)
             (mv-nth 0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth 0 (find-d-e d-e-list filename)))
                      (d-e-file-size
                       (mv-nth 0
                               (find-d-e d-e-list filename))))))
            (mv-nth 0 (find-d-e d-e-list filename))
            (lofat-file->contents file)
            (len (explode (lofat-file->contents file)))
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))))
          (place-d-e
           d-e-list
           (d-e-set-first-cluster-file-size
            (mv-nth 0 (find-d-e d-e-list filename))
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            (len (explode (lofat-file->contents file)))))
          entry-limit)))))))

  ;; hypotheses are minimal.
  (defthm
    lofat-place-file-correctness-1-lemma-34
    (implies
     (and
      (equal (mv-nth 1 (find-d-e d-e-list filename))
             0)
      (lofat-fs-p fat32-in-memory)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (<= 2
          (d-e-first-cluster (mv-nth 0
                                         (find-d-e d-e-list filename))))
      (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
         (+ 2 (count-of-clusters fat32-in-memory)))
      (not (d-e-directory-p (mv-nth 0
                                        (find-d-e d-e-list filename))))
      (useful-d-e-list-p d-e-list))
     (and
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (clear-clusterchain
           fat32-in-memory
           (d-e-first-cluster
            (mv-nth 0 (find-d-e d-e-list filename)))
           (d-e-file-size (mv-nth 0
                                      (find-d-e d-e-list filename)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list filename))
                         0 0))
         entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (clear-clusterchain
           fat32-in-memory
           (d-e-first-cluster
            (mv-nth 0 (find-d-e d-e-list filename)))
           (d-e-file-size (mv-nth 0
                                      (find-d-e d-e-list filename)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list filename))
                         0 0))
         entry-limit)))
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0 (find-d-e d-e-list filename)))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e d-e-list filename)))))
         (place-d-e d-e-list
                        (d-e-set-first-cluster-file-size
                         (mv-nth 0 (find-d-e d-e-list filename))
                         0 0))
         entry-limit))
       (put-assoc-equal
        filename
        (m1-file (d-e-set-first-cluster-file-size
                  (mv-nth 0 (find-d-e d-e-list filename))
                  0 0)
                 "")
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))))
    :hints
    (("goal"
      :in-theory
      (e/d
       (lofat-to-hifat-helper not-intersectp-list)
       ((:rewrite
         d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
         . 1)
        (:rewrite lofat-place-file-correctness-1-lemma-13)
        (:rewrite nth-of-nats=>chars)
        (:rewrite lofat-place-file-correctness-1-lemma-14)
        (:linear nth-when-d-e-p)
        (:rewrite explode-of-d-e-filename)
        (:rewrite take-of-len-free)
        (:rewrite lofat-place-file-correctness-1-lemma-17)
        (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
        (:rewrite lofat-place-file-correctness-1-lemma-15)
        (:rewrite subdir-contents-p-when-zero-length)
        (:linear lofat-to-hifat-helper-correctness-3)))
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :do-not-induct t
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (:free (d-e fat32-in-memory
                               d-e-list entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             (cons d-e d-e-list)
                                             entry-limit)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (equal (mv-nth 1 (find-d-e d-e-list filename))
               0)
        (lofat-fs-p fat32-in-memory)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (<= 2
            (d-e-first-cluster (mv-nth 0
                                           (find-d-e d-e-list filename))))
        (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
           (+ 2 (count-of-clusters fat32-in-memory)))
        (not (d-e-directory-p (mv-nth 0
                                          (find-d-e d-e-list filename))))
        (useful-d-e-list-p d-e-list))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (clear-clusterchain
            fat32-in-memory
            (d-e-first-cluster
             (mv-nth 0 (find-d-e d-e-list filename)))
            (d-e-file-size (mv-nth 0
                                       (find-d-e d-e-list filename)))))
          (place-d-e d-e-list
                         (d-e-set-first-cluster-file-size
                          (mv-nth 0 (find-d-e d-e-list filename))
                          0 0))
          entry-limit)))))))

  (local (include-book "std/lists/intersectp" :dir :system))

  ;; hypotheses minimised. like most of these lemmas, this has the x in
  ;; (not-intersectp-list x ...) as a free variable - but d-e in
  ;; (m1-file d-e nil) in the rhs is also a free variable. <sigh>
  (defthm
    lofat-place-file-correctness-lemma-6
    (implies
     (and
      (fat32-masked-entry-p i)
      (equal
       (mv-nth
        2
        (place-contents
         (update-fati i
                      (fat32-update-lower-28 (fati i fat32-in-memory)
                                             *ms-end-of-clusterchain*)
                      fat32-in-memory)
         (d-e-install-directory-bit (make-d-e-with-filename name)
                                        t)
         (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
         0 i))
       0)
      (good-root-d-e-p root-d-e fat32-in-memory)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (fat32-filename-p name)
      (equal (mv-nth 3
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit))
             0)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (not-intersectp-list
       x
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit)))
      (not (equal (mv-nth 1 (find-d-e d-e-list name))
                  0))
      (useful-d-e-list-p d-e-list)
      (zp (fat32-entry-mask (nth i (effective-fat fat32-in-memory))))
      (<= 2 i)
      (< i (len (effective-fat fat32-in-memory)))
      (integerp entry-limit)
      (> entry-limit
         (hifat-entry-count
          (mv-nth 0
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit)))))
     (and
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati i
                          (fat32-update-lower-28 (fati i fat32-in-memory)
                                                 *ms-end-of-clusterchain*)
                          fat32-in-memory)
             (d-e-install-directory-bit (make-d-e-with-filename name)
                                            t)
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (d-e-install-directory-bit (make-d-e-with-filename name)
                                             t)
              i 0)))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           i 0))
         entry-limit))
       0)
      (hifat-equiv
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati i
                          (fat32-update-lower-28 (fati i fat32-in-memory)
                                                 *ms-end-of-clusterchain*)
                          fat32-in-memory)
             (d-e-install-directory-bit (make-d-e-with-filename name)
                                            t)
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (d-e-install-directory-bit (make-d-e-with-filename name)
                                             t)
              i 0)))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           i 0))
         entry-limit))
       (put-assoc-equal
        name (m1-file d-e nil)
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati i
                          (fat32-update-lower-28 (fati i fat32-in-memory)
                                                 *ms-end-of-clusterchain*)
                          fat32-in-memory)
             (d-e-install-directory-bit (make-d-e-with-filename name)
                                            t)
             (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
             0 i))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (d-e-install-directory-bit (make-d-e-with-filename name)
                                             t)
              i 0)))))
         (place-d-e
          d-e-list
          (d-e-set-first-cluster-file-size
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           i 0))
         entry-limit)))))
    :hints
    (("goal"
      :in-theory
      (e/d
       (lofat-to-hifat-helper not-intersectp-list hifat-entry-count)
       ((:e d-e-fix)
        (:rewrite
         d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
         . 1)
        (:rewrite lofat-place-file-correctness-1-lemma-13)
        (:rewrite nth-of-nats=>chars)
        (:rewrite lofat-place-file-correctness-1-lemma-14)
        (:linear nth-when-d-e-p)
        (:rewrite explode-of-d-e-filename)
        (:rewrite lofat-place-file-correctness-1-lemma-17)
        (:rewrite lofat-to-hifat-helper-of-clear-clusterchain)
        (:rewrite lofat-place-file-correctness-1-lemma-15)
        (:rewrite subdir-contents-p-when-zero-length)
        (:linear lofat-to-hifat-helper-correctness-3)
        (:rewrite lofat-to-hifat-helper-of-update-dir-contents)
        (:rewrite
         d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-15)
        (:rewrite natp-of-car-when-nat-listp)
        (:rewrite count-free-clusters-of-set-indices-in-fa-table-lemma-1)
        (:rewrite integerp-of-car-when-integer-listp)
        (:rewrite nat-listp-if-fat32-masked-entry-list-p)
        (:rewrite make-d-e-list-of-clear-d-e-lemma-1)
        (:rewrite subsetp-when-atom-right)
        (:rewrite
         d-e-clusterchain-contents-of-update-dir-contents-coincident)
        (:definition char)
        (:definition binary-append)
        (:rewrite free-index-list-listp-of-update-nth-lemma-1)
        (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
        (:rewrite len-of-nats=>chars)
        (:rewrite len-of-insert-d-e)
        (:rewrite subsetp-when-atom-left)
        (:rewrite str::explode-when-not-stringp)
        (:rewrite
         fat32-build-index-list-of-effective-fat-of-place-contents-disjoint)
        (:rewrite member-when-atom)
        (:rewrite place-contents-expansion-2)))
      :induct (induction-scheme d-e-list
                                entry-limit fat32-in-memory x)
      :expand ((:free (fat32-in-memory entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
               (:free (x1 x2 y)
                      (not-intersectp-list x1 (cons x2 y)))
               (:free (d-e fat32-in-memory
                               d-e-list entry-limit)
                      (lofat-to-hifat-helper fat32-in-memory
                                             (cons d-e d-e-list)
                                             entry-limit)))))
    :rule-classes
    ((:rewrite
      :corollary
      (implies
       (and
        (fat32-masked-entry-p i)
        (equal
         (mv-nth
          2
          (place-contents
           (update-fati i
                        (fat32-update-lower-28 (fati i fat32-in-memory)
                                               *ms-end-of-clusterchain*)
                        fat32-in-memory)
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         0)
        (good-root-d-e-p root-d-e fat32-in-memory)
        (non-free-index-listp x (effective-fat fat32-in-memory))
        (fat32-filename-p name)
        (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (not-intersectp-list
         (mv-nth 0
                 (d-e-clusterchain fat32-in-memory root-d-e))
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (not-intersectp-list
         x
         (mv-nth 2
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        (not (equal (mv-nth 1 (find-d-e d-e-list name))
                    0))
        (useful-d-e-list-p d-e-list)
        (zp (fat32-entry-mask (nth i (effective-fat fat32-in-memory))))
        (<= 2 i)
        (< i (len (effective-fat fat32-in-memory)))
        (integerp entry-limit)
        (> entry-limit
           (hifat-entry-count
            (mv-nth 0
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit)))))
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth
           0
           (update-dir-contents
            (mv-nth
             0
             (place-contents
              (update-fati i
                           (fat32-update-lower-28 (fati i fat32-in-memory)
                                                  *ms-end-of-clusterchain*)
                           fat32-in-memory)
              (d-e-install-directory-bit (make-d-e-with-filename name)
                                             t)
              (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
              0 i))
            (d-e-first-cluster root-d-e)
            (nats=>string
             (insert-d-e
              (string=>nats
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (d-e-set-first-cluster-file-size
               (d-e-install-directory-bit (make-d-e-with-filename name)
                                              t)
               i 0)))))
          (place-d-e
           d-e-list
           (d-e-set-first-cluster-file-size
            (d-e-install-directory-bit (make-d-e-with-filename name)
                                           t)
            i 0))
          entry-limit)))))))

  ;; This is so close to being proved!
  (skip-proofs
   (defthm
     lofat-place-file-correctness-lemma-143
     (implies
      (and
       (equal
        (mv-nth 1
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        0)
       (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
       (equal
        (mv-nth
         3
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             (mv-nth 0
                     (lofat-place-file fat32-in-memory
                                       (mv-nth 0 (find-d-e d-e-list name))
                                       path file))
             (mv-nth 0 (find-d-e d-e-list name)))))
          entry-limit))
        0)
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             (mv-nth 0
                     (lofat-place-file fat32-in-memory
                                       (mv-nth 0 (find-d-e d-e-list name))
                                       path file))
             (mv-nth 0 (find-d-e d-e-list name)))))
          entry-limit)))
       (not
        (member-intersectp-equal
         (set-difference-equal
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit))
          (mv-nth
           2
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit)))
         (mv-nth
          2
          (lofat-to-hifat-helper
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     (mv-nth 0 (find-d-e d-e-list name))
                                     path file))
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents
              (mv-nth
               0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
              (mv-nth 0 (find-d-e d-e-list name)))))
           entry-limit))))
       (hifat-equiv
        (mv-nth
         0
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents
             (mv-nth 0
                     (lofat-place-file fat32-in-memory
                                       (mv-nth 0 (find-d-e d-e-list name))
                                       path file))
             (mv-nth 0 (find-d-e d-e-list name)))))
          entry-limit))
        (mv-nth
         0
         (hifat-place-file
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit))
          path (m1-file d-e nil))))
       (good-root-d-e-p root-d-e fat32-in-memory)
       (non-free-index-listp x (effective-fat fat32-in-memory))
       (fat32-filename-list-p path)
       (fat32-filename-p name)
       (equal (mv-nth 3
                      (lofat-to-hifat-helper fat32-in-memory
                                             d-e-list entry-limit))
              0)
       (not-intersectp-list
        (mv-nth 0
                (d-e-clusterchain fat32-in-memory root-d-e))
        (mv-nth 2
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       (not-intersectp-list
        x
        (mv-nth 2
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       (lofat-file-p file)
       (not (lofat-file->contents file))
       (<= 1
           (count-free-clusters (effective-fat fat32-in-memory)))
       (consp path)
       (<= 2
           (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
       (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
          (+ 2 (count-of-clusters fat32-in-memory)))
       (integerp entry-limit)
       (< (hifat-entry-count
           (mv-nth 0
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit)))
          entry-limit)
       (useful-d-e-list-p d-e-list)
       (zp
        (mv-nth
         1
         (hifat-place-file
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit))
          path (m1-file d-e nil)))))
      (and
       (hifat-equiv
        (mv-nth
         0
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          d-e-list entry-limit))
        (put-assoc-equal
         name
         (m1-file
          (mv-nth 0 (find-d-e d-e-list name))
          (mv-nth
           0
           (hifat-place-file
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              entry-limit))
            path (m1-file d-e nil))))
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit))))
       (equal
        (mv-nth
         3
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          d-e-list entry-limit))
        0)
       (not-intersectp-list
        x
        (mv-nth
         2
         (lofat-to-hifat-helper
          (mv-nth 0
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          d-e-list entry-limit)))))
     :hints
     (("goal"
       :in-theory
       (e/d
        (not-intersectp-list hifat-entry-count
                             lofat-to-hifat-helper-correctness-4)
        (;; there's a lot of useless case-splitting because of the following
         ;; rule - disabling it should allow some of these to be handled
         ;; separately...
         lofat-place-file-correctness-lemma-75
         ;; there are some fairly dramatic differences to be seen in how acl2
         ;; creates case splits when lofat-place-file is enabled vs when it is
         ;; disabled. this seems like a good time to decide to keep this
         ;; disabled so we can take greater advantage of the information about
         ;; useless runes.
         lofat-place-file
         (:definition subseq)
         (:definition subseq-list)
         (:rewrite lofat-place-file-correctness-1-lemma-14)
         (:rewrite m1-file-alist-p-of-cdr-when-m1-file-alist-p)
         (:rewrite nfix-when-zp)
         (:definition delete-d-e)
         (:rewrite lofat-place-file-correctness-1-lemma-13)
         (:rewrite nth-of-nats=>chars)
         (:rewrite lofat-place-file-correctness-lemma-3)
         (:rewrite take-of-len-free)
         (:definition place-d-e)
         (:rewrite nats=>chars-of-take)
         (:rewrite lofat-place-file-correctness-lemma-40)
         (:rewrite lofat-place-file-correctness-lemma-57)
         (:rewrite d-e-clusterchain-under-iff . 2)
         (:rewrite intersectp-when-subsetp)
         (:rewrite lofat-to-hifat-helper-of-lofat-remove-file-disjoint-lemma-1
                   . 1)
         (:rewrite disjoint-list-listp-of-lofat-to-hifat-helper)
         (:rewrite not-intersectp-list-of-set-difference$)
         (:rewrite not-intersectp-list-when-atom)
         (:rewrite lofat-find-file-correctness-1-lemma-6)
         (:rewrite m1-file-p-of-cdar-when-m1-file-alist-p)
         (:rewrite fat32-filename-p-correctness-1)
         (:definition no-duplicatesp-equal)
         (:definition assoc-equal)
         (:rewrite fat32-filename-p-of-caar-when-m1-file-alist-p)
         (:rewrite car-of-append)
         (:rewrite subdir-contents-p-when-zero-length)
         (:rewrite d-e-clusterchain-contents-of-lofat-place-file-disjoint)
         (:rewrite hifat-no-dups-p-of-cdr)
         (:type-prescription binary-append)
         (:rewrite lofat-to-hifat-helper-after-delete-and-clear-2-lemma-2
                   . 1)
         (:type-prescription intersectp-equal)
         (:rewrite d-e-clusterchain-of-lofat-place-file-disjoint)
         (:rewrite intersectp-member . 1)
         (:rewrite intersect-with-subset . 6)
         (:rewrite intersect-with-subset . 5)
         (:rewrite intersect-with-subset . 11)
         (:rewrite intersect-with-subset . 9)
         (:rewrite consp-of-append)
         (:rewrite not-intersectp-list-of-set-difference$-lemma-3)
         (:rewrite member-intersectp-with-subset)
         (:rewrite d-e-clusterchain-under-iff . 3)
         (:rewrite lofat-place-file-correctness-lemma-68
                   . 1)
         (:rewrite subsetp-when-atom-right)
         (:rewrite subsetp-when-atom-left)
         (:rewrite lofat-place-file-correctness-lemma-69)
         (:rewrite append-atom-under-list-equiv)
         (:rewrite hifat-subsetp-preserves-assoc)
         (:rewrite consp-of-assoc-when-hifat-equiv-lemma-1)
         (:rewrite lofat-place-file-correctness-lemma-5)
         (:rewrite m1-file-of-m1-file-contents-fix-contents-normalize-const)
         (:rewrite m1-file-of-d-e-fix-d-e-normalize-const)
         (:rewrite rationalp-implies-acl2-numberp)
         (:rewrite lofat-place-file-correctness-lemma-9)
         (:rewrite consp-of-remove-assoc-1)
         (:rewrite member-intersectp-of-set-difference$-1
                   . 1)
         (:rewrite hifat-to-lofat-inversion-lemma-23)
         (:rewrite place-contents-expansion-2)
         (:rewrite nthcdr-when->=-n-len-l)
         (:rewrite d-e-p-of-take)
         (:linear len-of-explode-when-m1-file-contents-p-1)
         (:definition nthcdr)
         (:rewrite then-subseq-empty-1)
         (:linear length-of-d-e-clusterchain-contents
                  . 3)
         (:rewrite unsigned-byte-listp-when-d-e-p)
         (:rewrite d-e-p-of-chars=>nats)
         (:rewrite chars=>nats-of-take)
         (:type-prescription hifat-bounded-file-alist-p)
         (:rewrite take-when-atom)
         (:definition char)
         (:rewrite explode-of-d-e-filename)
         (:linear len-when-hifat-bounded-file-alist-p . 2)
         (:linear len-when-hifat-bounded-file-alist-p . 1)
         (:linear length-of-d-e-clusterchain-contents
                  . 2)
         (:rewrite effective-fat-of-clear-clusterchain . 3)
         (:rewrite find-n-free-clusters-when-zp)
         (:rewrite str::consp-of-explode)
         (:rewrite hifat-to-lofat-inversion-lemma-2)
         (:rewrite m1-regular-file-p-correctness-1)
         (:type-prescription m1-file-fix$inline)
         (:rewrite place-contents-expansion-1)
         (:type-prescription natp-of-place-contents)
         (:rewrite lofat-to-hifat-helper-of-update-dir-contents)
         (:rewrite m1-file->contents$inline-of-m1-file-fix-x-normalize-const)
         (:type-prescription fat32-filename-fix)
         (:rewrite lofat-directory-file-p-when-lofat-file-p)
         (:rewrite fati-of-clear-clusterchain . 3)
         (:rewrite m1-file-p-of-m1-file-fix)
         (:rewrite natp-of-place-contents)
         (:rewrite len-of-find-n-free-clusters)
         (:linear find-n-free-clusters-correctness-7)
         (:rewrite str::explode-when-not-stringp)
         (:definition min)
         (:definition stobj-find-n-free-clusters-correctness-1)
         (:rewrite set-difference$-when-not-intersectp)
         (:rewrite subsetp-member . 1)
         (:linear lofat-remove-file-correctness-1-lemma-27)
         (:rewrite lofat-place-file-correctness-lemma-42)
         (:rewrite member-intersectp-binary-append . 1)
         (:rewrite delete-d-e-correctness-1)
         (:definition remove-assoc-equal)
         (:rewrite abs-find-file-correctness-1-lemma-40)
         (:rewrite hifat-place-file-correctness-3)
         (:rewrite remove-assoc-when-absent-1)
         (:rewrite lofat-place-file-correctness-1-lemma-68)
         (:definition find-d-e)
         (:definition lofat-to-hifat-helper)
         (:definition not-intersectp-list)))
       :induct (induction-scheme d-e-list
                                 entry-limit fat32-in-memory x)
       :expand ((:free (fat32-in-memory entry-limit)
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
                (:free (x1 x2 y)
                       (not-intersectp-list x1 (cons x2 y)))
                (:free (d-e fat32-in-memory
                                d-e-list entry-limit)
                       (lofat-to-hifat-helper fat32-in-memory
                                              (cons d-e d-e-list)
                                              entry-limit))
                (find-d-e d-e-list name))))
     :rule-classes
     ((:rewrite
       :corollary
       (implies
        (and
         (equal
          (mv-nth 1
                  (lofat-place-file fat32-in-memory
                                    (mv-nth 0 (find-d-e d-e-list name))
                                    path file))
          0)
         (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
         (equal
          (mv-nth
           3
           (lofat-to-hifat-helper
            (mv-nth 0
                    (lofat-place-file fat32-in-memory
                                      (mv-nth 0 (find-d-e d-e-list name))
                                      path file))
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               (mv-nth 0
                       (lofat-place-file fat32-in-memory
                                         (mv-nth 0 (find-d-e d-e-list name))
                                         path file))
               (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit))
          0)
         (not-intersectp-list
          x
          (mv-nth
           2
           (lofat-to-hifat-helper
            (mv-nth 0
                    (lofat-place-file fat32-in-memory
                                      (mv-nth 0 (find-d-e d-e-list name))
                                      path file))
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               (mv-nth 0
                       (lofat-place-file fat32-in-memory
                                         (mv-nth 0 (find-d-e d-e-list name))
                                         path file))
               (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit)))
         (not
          (member-intersectp-equal
           (set-difference-equal
            (mv-nth 2
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit))
            (mv-nth
             2
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              entry-limit)))
           (mv-nth
            2
            (lofat-to-hifat-helper
             (mv-nth 0
                     (lofat-place-file fat32-in-memory
                                       (mv-nth 0 (find-d-e d-e-list name))
                                       path file))
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents
                (mv-nth
                 0
                 (lofat-place-file fat32-in-memory
                                   (mv-nth 0 (find-d-e d-e-list name))
                                   path file))
                (mv-nth 0 (find-d-e d-e-list name)))))
             entry-limit))))
         (hifat-equiv
          (mv-nth
           0
           (lofat-to-hifat-helper
            (mv-nth 0
                    (lofat-place-file fat32-in-memory
                                      (mv-nth 0 (find-d-e d-e-list name))
                                      path file))
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents
               (mv-nth 0
                       (lofat-place-file fat32-in-memory
                                         (mv-nth 0 (find-d-e d-e-list name))
                                         path file))
               (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit))
          (mv-nth
           0
           (hifat-place-file
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory
                        (mv-nth 0 (find-d-e d-e-list name)))))
              entry-limit))
            path (m1-file d-e nil))))
         (good-root-d-e-p root-d-e fat32-in-memory)
         (non-free-index-listp x (effective-fat fat32-in-memory))
         (fat32-filename-list-p path)
         (fat32-filename-p name)
         (equal (mv-nth 3
                        (lofat-to-hifat-helper fat32-in-memory
                                               d-e-list entry-limit))
                0)
         (not-intersectp-list
          (mv-nth 0
                  (d-e-clusterchain fat32-in-memory root-d-e))
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit)))
         (not-intersectp-list
          x
          (mv-nth 2
                  (lofat-to-hifat-helper fat32-in-memory
                                         d-e-list entry-limit)))
         (lofat-file-p file)
         (not (lofat-file->contents file))
         (<= 1
             (count-free-clusters (effective-fat fat32-in-memory)))
         (consp path)
         (<= 2
             (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
         (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
            (+ 2 (count-of-clusters fat32-in-memory)))
         (integerp entry-limit)
         (< (hifat-entry-count
             (mv-nth 0
                     (lofat-to-hifat-helper fat32-in-memory
                                            d-e-list entry-limit)))
            entry-limit)
         (useful-d-e-list-p d-e-list))
        (not-intersectp-list
         x
         (mv-nth
          2
          (lofat-to-hifat-helper
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     (mv-nth 0 (find-d-e d-e-list name))
                                     path file))
           d-e-list entry-limit)))))))))

;; This theorem is going to be responsible for introducing some terms of length
;; 32 - let's see what happens...
(defthm
  lofat-place-file-correctness-lemma-17
  (implies
   (and
    (fat32-masked-entry-p i)
    (equal
     (mv-nth
      2
      (place-contents
       (update-fati i
                    (fat32-update-lower-28 (fati i fat32-in-memory)
                                           268435455)
                    fat32-in-memory)
       (d-e-install-directory-bit (make-d-e-with-filename name)
                                      t)
       (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
       0 i))
     0)
    (good-root-d-e-p root-d-e fat32-in-memory)
    (fat32-filename-p name)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (not (equal (mv-nth 1 (find-d-e d-e-list name))
                0))
    (useful-d-e-list-p d-e-list)
    (zp (fat32-entry-mask (nth i (effective-fat fat32-in-memory))))
    (<= 2 i)
    (< i (len (effective-fat fat32-in-memory)))
    (integerp entry-limit)
    (< (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       entry-limit))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati i
                        (fat32-update-lower-28 (fati i fat32-in-memory)
                                               268435455)
                        fat32-in-memory)
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (d-e-install-directory-bit (make-d-e-with-filename name)
                                           t)
            i 0)))))
       (place-d-e
        d-e-list
        (d-e-set-first-cluster-file-size
         (d-e-install-directory-bit (make-d-e-with-filename name)
                                        t)
         i 0))
       entry-limit))
     0)
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (update-dir-contents
         (mv-nth
          0
          (place-contents
           (update-fati i
                        (fat32-update-lower-28 (fati i fat32-in-memory)
                                               268435455)
                        fat32-in-memory)
           (d-e-install-directory-bit (make-d-e-with-filename name)
                                          t)
           (make-empty-subdir-contents i (d-e-first-cluster root-d-e))
           0 i))
         (d-e-first-cluster root-d-e)
         (nats=>string
          (insert-d-e
           (string=>nats
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (d-e-set-first-cluster-file-size
            (d-e-install-directory-bit (make-d-e-with-filename name)
                                           t)
            i 0)))))
       (place-d-e
        d-e-list
        (d-e-set-first-cluster-file-size
         (d-e-install-directory-bit (make-d-e-with-filename name)
                                        t)
         i 0))
       entry-limit))
     (put-assoc-equal
      name (m1-file (d-e-fix nil) nil)
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))))
  :hints (("goal" :do-not-induct t
           :in-theory (disable lofat-place-file-correctness-lemma-6)
           :use (:instance lofat-place-file-correctness-lemma-6
                           (d-e (d-e-fix nil))
                           (x nil)))))

(defthm
  lofat-place-file-correctness-1-lemma-37
  (implies
   (and
    (< 0
       (len (explode (lofat-file->contents file))))
    (lofat-fs-p fat32-in-memory)
    (useful-d-e-list-p d-e-list)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (lofat-regular-file-p file)
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (not (d-e-directory-p (mv-nth 0
                                      (find-d-e d-e-list filename))))
    (zp
     (mv-nth
      2
      (place-contents
       (update-fati
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename))))
           (make-list-ac
            (len (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
            0 nil))
          1))
        (fat32-update-lower-28
         (fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename))))
             (make-list-ac
              (len
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename)))))
              0 nil))
            1))
          fat32-in-memory)
         268435455)
        (mv-nth
         0
         (clear-clusterchain
          fat32-in-memory
          (d-e-first-cluster
           (mv-nth 0 (find-d-e d-e-list filename)))
          (d-e-file-size (mv-nth 0
                                     (find-d-e d-e-list filename))))))
       (mv-nth 0 (find-d-e d-e-list filename))
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth
        0
        (find-n-free-clusters
         (set-indices-in-fa-table
          (effective-fat fat32-in-memory)
          (mv-nth 0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e d-e-list filename))))
          (make-list-ac
           (len (mv-nth 0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth 0
                                 (find-d-e d-e-list filename)))))
           0 nil))
         1))))))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (place-contents
         (update-fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename))))
             (make-list-ac
              (len
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename)))))
              0 nil))
            1))
          (fat32-update-lower-28
           (fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            fat32-in-memory)
           268435455)
          (mv-nth 0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth 0 (find-d-e d-e-list filename)))
                   (d-e-file-size
                    (mv-nth 0
                            (find-d-e d-e-list filename))))))
         (mv-nth 0 (find-d-e d-e-list filename))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename))))
            (make-list-ac
             (len
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename)))))
             0 nil))
           1))))
       (place-d-e
        d-e-list
        (d-e-set-first-cluster-file-size
         (mv-nth 0 (find-d-e d-e-list filename))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename))))
            (make-list-ac
             (len
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename)))))
             0 nil))
           1))
         (len (explode (lofat-file->contents file)))))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (place-contents
         (update-fati
          (nth
           0
           (find-n-free-clusters
            (set-indices-in-fa-table
             (effective-fat fat32-in-memory)
             (mv-nth 0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth 0
                              (find-d-e d-e-list filename))))
             (make-list-ac
              (len
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename)))))
              0 nil))
            1))
          (fat32-update-lower-28
           (fati
            (nth
             0
             (find-n-free-clusters
              (set-indices-in-fa-table
               (effective-fat fat32-in-memory)
               (mv-nth 0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth 0
                                (find-d-e d-e-list filename))))
               (make-list-ac
                (len
                 (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
                0 nil))
              1))
            fat32-in-memory)
           268435455)
          (mv-nth 0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth 0 (find-d-e d-e-list filename)))
                   (d-e-file-size
                    (mv-nth 0
                            (find-d-e d-e-list filename))))))
         (mv-nth 0 (find-d-e d-e-list filename))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename))))
            (make-list-ac
             (len
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename)))))
             0 nil))
           1))))
       (place-d-e
        d-e-list
        (d-e-set-first-cluster-file-size
         (mv-nth 0 (find-d-e d-e-list filename))
         (nth
          0
          (find-n-free-clusters
           (set-indices-in-fa-table
            (effective-fat fat32-in-memory)
            (mv-nth 0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth 0
                             (find-d-e d-e-list filename))))
            (make-list-ac
             (len
              (mv-nth 0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth 0
                               (find-d-e d-e-list filename)))))
             0 nil))
           1))
         (len (explode (lofat-file->contents file)))))
       entry-limit))
     (put-assoc-equal
      filename
      (m1-file
       (d-e-set-first-cluster-file-size
        (mv-nth 0 (find-d-e d-e-list filename))
        (nth
         0
         (find-n-free-clusters
          (set-indices-in-fa-table
           (effective-fat fat32-in-memory)
           (mv-nth 0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth 0
                            (find-d-e d-e-list filename))))
           (make-list-ac
            (len (mv-nth 0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth 0
                                  (find-d-e d-e-list filename)))))
            0 nil))
          1))
        (len (explode (lofat-file->contents file))))
       (lofat-file->contents file))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))))
  :hints (("goal" :in-theory (disable lofat-place-file-correctness-1-lemma-23)
           :use (:instance lofat-place-file-correctness-1-lemma-23
                           (x nil)))))

(defthm
  lofat-place-file-correctness-1-lemma-39
  (implies
   (and
    (lofat-fs-p fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (<= 2
        (d-e-first-cluster (mv-nth 0
                                       (find-d-e d-e-list filename))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list filename)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (not (d-e-directory-p (mv-nth 0
                                      (find-d-e d-e-list filename))))
    (useful-d-e-list-p d-e-list))
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth
        0
        (clear-clusterchain
         fat32-in-memory
         (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (d-e-file-size (mv-nth 0
                                    (find-d-e d-e-list filename)))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list filename))
                       0 0))
       entry-limit))
     0)
    (equal
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth
        0
        (clear-clusterchain
         fat32-in-memory
         (d-e-first-cluster
          (mv-nth 0 (find-d-e d-e-list filename)))
         (d-e-file-size (mv-nth 0
                                    (find-d-e d-e-list filename)))))
       (place-d-e d-e-list
                      (d-e-set-first-cluster-file-size
                       (mv-nth 0 (find-d-e d-e-list filename))
                       0 0))
       entry-limit))
     (put-assoc-equal
      filename
      (m1-file (d-e-set-first-cluster-file-size
                (mv-nth 0 (find-d-e d-e-list filename))
                0 0)
               "")
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))))
  :hints (("goal" :in-theory (disable lofat-place-file-correctness-1-lemma-34)
           :use (:instance lofat-place-file-correctness-1-lemma-34
                           (x nil))
           :do-not-induct t)))

;; This might be useful later.
(defthm
  lofat-place-file-correctness-lemma-12
  (implies
   (and (fat32-masked-entry-p i)
        (< i
           (+ 2 (count-of-clusters fat32-in-memory)))
        (< 0 len)
        (< 0 (cluster-size fat32-in-memory))
        (unsigned-byte-p 32 len))
   (equal (d-e-clusterchain
           (update-fati i
                        (fat32-update-lower-28 (fati i fat32-in-memory)
                                               268435455)
                        fat32-in-memory)
           (d-e-set-first-cluster-file-size d-e i len))
          (mv (list i) 0)))
  :hints (("goal" :do-not-induct t
           :in-theory (enable d-e-clusterchain
                              fat32-build-index-list))))

(defthm
  lofat-place-file-correctness-lemma-13
  (implies
   (and (good-root-d-e-p root-d-e fat32-in-memory)
        (lofat-file-p file)
        (<= (len (make-clusters (lofat-file->contents file)
                                (cluster-size fat32-in-memory)))
            (count-free-clusters (effective-fat fat32-in-memory)))
        (not (lofat-directory-file-p file))
        (< 0
           (len (explode (lofat-file->contents file))))
        (<= 1
            (count-free-clusters (effective-fat fat32-in-memory))))
   (equal
    (d-e-clusterchain
     (mv-nth
      0
      (place-contents
       (update-fati
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (fat32-update-lower-28
         (fati (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               fat32-in-memory)
         268435455)
        fat32-in-memory)
       (d-e-install-directory-bit
        (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                              (car path))
        nil)
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))))
     (d-e-set-first-cluster-file-size
      (d-e-install-directory-bit
       (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (car path))
       nil)
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))
      (len (explode (lofat-file->contents file)))))
    (mv
     (cons
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))
      (find-n-free-clusters
       (update-nth
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (fat32-update-lower-28
         (fati (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               fat32-in-memory)
         268435455)
        (effective-fat fat32-in-memory))
       (+ -1
          (len (make-clusters (lofat-file->contents file)
                              (cluster-size fat32-in-memory))))))
     0)))
  :hints
  (("goal"
    :do-not-induct t
    :expand (lofat-place-file fat32-in-memory root-d-e path file)
    :in-theory
    (e/d (hifat-place-file (:rewrite lofat-to-hifat-inversion-lemma-4)
                           hifat-find-file)
         ((:definition find-d-e)
          (:definition place-d-e)
          (:rewrite d-e-p-when-member-equal-of-d-e-list-p)
          (:rewrite lofat-fs-p-of-lofat-place-file-lemma-1)
          (:rewrite clear-clusterchain-reversibility-lemma-1)
          (:rewrite d-e-clusterchain-of-place-contents-coincident-2)))
    :restrict ((put-assoc-under-hifat-equiv-3 ((file2 (m1-file d-e "")))))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-place-contents-coincident-2)
     (d-e1
      (d-e-set-first-cluster-file-size
       (d-e-install-directory-bit
        (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                              (car path))
        nil)
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e2
      (d-e-install-directory-bit
       (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (car path))
       nil))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm
  lofat-place-file-correctness-lemma-14
  (implies
   (and (good-root-d-e-p root-d-e fat32-in-memory)
        (lofat-file-p file)
        (<= (len (make-clusters (lofat-file->contents file)
                                (cluster-size fat32-in-memory)))
            (count-free-clusters (effective-fat fat32-in-memory)))
        (not (lofat-directory-file-p file))
        (< 0
           (len (explode (lofat-file->contents file)))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      '0
      (place-contents
       (update-fati
        (nth '0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   '1))
        (fat32-update-lower-28
         (fati (nth '0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          '1))
               fat32-in-memory)
         '268435455)
        fat32-in-memory)
       (d-e-install-directory-bit
        (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                              (car path))
        'nil)
       (lofat-file->contents$inline file)
       (len (explode$inline (lofat-file->contents$inline file)))
       (nth '0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  '1))))
     (d-e-set-first-cluster-file-size
      (d-e-install-directory-bit
       (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (car path))
       'nil)
      (nth '0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 '1))
      (len (explode$inline (lofat-file->contents$inline file)))))
    (mv
     (implode
      (append
       (explode (lofat-file->contents file))
       (make-list
        (+ (- (len (explode (lofat-file->contents file))))
           (min (len (explode (lofat-file->contents file)))
                (* (cluster-size fat32-in-memory)
                   (len (make-clusters (lofat-file->contents file)
                                       (cluster-size fat32-in-memory))))))
        :initial-element (code-char 0))))
     0)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable
     (:rewrite d-e-clusterchain-contents-of-place-contents-coincident-2))
    :use
    (:instance
     (:rewrite d-e-clusterchain-contents-of-place-contents-coincident-2)
     (d-e2
      (d-e-set-first-cluster-file-size
       (d-e-install-directory-bit
        (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                              (car path))
        nil)
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e1
      (d-e-install-directory-bit
       (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (car path))
       nil))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm lofat-place-file-correctness-lemma-15
  (zp (+ (- x) (min x y)))
  :rule-classes :type-prescription)

(defthm lofat-place-file-correctness-lemma-16
  (implies (and (equal (m1-file->contents file1)
                       (m1-file->contents file2))
                (m1-regular-file-p (m1-file-fix file1))
                (m1-regular-file-p (m1-file-fix file2)))
           (equal (hifat-equiv (put-assoc-equal name file1 fs)
                               (put-assoc-equal name file2 fs))
                  t))
  :hints (("goal" :in-theory (disable put-assoc-under-hifat-equiv-3)
           :use put-assoc-under-hifat-equiv-3)))

(defthm lofat-place-file-correctness-lemma-19
  (implies (fat32-filename-p name)
           (not (useless-d-e-p (make-d-e-with-filename name))))
  :hints (("goal" :do-not-induct t
           :in-theory (enable make-d-e-with-filename))))

(defthm lofat-place-file-correctness-lemma-20
  (implies (and (equal (m1-file->contents file1) nil)
                (equal (m1-file->contents file2) nil))
           (equal (hifat-equiv (put-assoc-equal name file1 fs)
                               (put-assoc-equal name file2 fs))
                  t))
  :hints (("goal" :in-theory (e/d (m1-directory-file-p) nil)
           :do-not-induct t
           :restrict (((:rewrite put-assoc-under-hifat-equiv-1)
                       ((file1 file2) (file2 file1)))))))

(defthm lofat-place-file-correctness-lemma-23
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (< 0
       (len (explode (lofat-file->contents file))))
    (<= 1
        (count-free-clusters (effective-fat fat32-in-memory))))
   (equal
    (mv-nth
     '2
     (place-contents
      (update-fati
       (nth '0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  '1))
       (fat32-update-lower-28
        (fati (nth '0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         '1))
              fat32-in-memory)
        '268435455)
       fat32-in-memory)
      (d-e-install-directory-bit (make-d-e-with-filename (car path))
                                     'nil)
      (lofat-file->contents$inline file)
      (len (explode$inline (lofat-file->contents$inline file)))
      (nth '0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 '1))))
    '0))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable (:rewrite place-contents-expansion-2))
    :use
    (:instance
     (:rewrite place-contents-expansion-2)
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e
      (d-e-install-directory-bit (make-d-e-with-filename (car path))
                                     nil))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

;; Is there a contradiction in some hypotheses somewhere? Because this really
;; should go through in the rewriter. I can't really fathom why it isn't doing that.
(defthm
  lofat-place-file-correctness-lemma-25
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (lofat-regular-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file)))))
   (equal
    (d-e-clusterchain-contents
     (mv-nth
      0
      (place-contents
       (update-fati
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (fat32-update-lower-28
         (fati (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               fat32-in-memory)
         268435455)
        fat32-in-memory)
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (lofat-file->contents file)
       (len (explode (lofat-file->contents file)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))))
     (d-e-set-first-cluster-file-size
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))
      (len (explode (lofat-file->contents file)))))
    (mv
     (implode
      (append
       (explode (lofat-file->contents file))
       (make-list-ac
        (+
         (min
          (d-e-file-size
           (d-e-set-first-cluster-file-size
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))
            (nth 0
                 (find-n-free-clusters (effective-fat fat32-in-memory)
                                       1))
            (len (explode (lofat-file->contents file)))))
          (*
           (len
            (make-clusters
             (lofat-file->contents file)
             (cluster-size
              (update-fati
               (nth 0
                    (find-n-free-clusters (effective-fat fat32-in-memory)
                                          1))
               (fat32-update-lower-28
                (fati
                 (nth 0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            1))
                 fat32-in-memory)
                268435455)
               fat32-in-memory))))
           (cluster-size
            (update-fati
             (nth 0
                  (find-n-free-clusters (effective-fat fat32-in-memory)
                                        1))
             (fat32-update-lower-28
              (fati (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1))
                    fat32-in-memory)
              268435455)
             fat32-in-memory))))
         (- (length (lofat-file->contents file))))
        (code-char 0) nil)))
     0)))
  :instructions
  (:promote
   (:dive 1)
   (:claim
    (and
     (not
      (d-e-directory-p
       (d-e-set-first-cluster-file-size
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (len (explode (lofat-file->contents file))))))
     (equal
      (mv-nth
       2
       (place-contents
        (update-fati
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (fat32-update-lower-28
          (fati (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                fat32-in-memory)
          268435455)
         fat32-in-memory)
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))))
      0)
     (equal
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))
      (d-e-first-cluster
       (d-e-set-first-cluster-file-size
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (len (explode (lofat-file->contents file))))))
     (not (zp (length (lofat-file->contents file))))
     (<= 2
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1)))
     (stringp (lofat-file->contents file))
     (<=
      (length (lofat-file->contents file))
      (d-e-file-size
       (d-e-set-first-cluster-file-size
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (len (explode (lofat-file->contents file))))))
     (lofat-fs-p
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))
     (not
      (equal
       (fat32-entry-mask
        (fati
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (update-fati
          (nth 0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     1))
          (fat32-update-lower-28
           (fati (nth 0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            1))
                 fat32-in-memory)
           268435455)
          fat32-in-memory)))
       0))
     (<
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))
      (+
       2
       (count-of-clusters
        (update-fati
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (fat32-update-lower-28
          (fati (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                fat32-in-memory)
          268435455)
         fat32-in-memory))))
     (fat32-masked-entry-p
      (nth 0
           (find-n-free-clusters (effective-fat fat32-in-memory)
                                 1))))
    :hints :none)
   (:rewrite d-e-clusterchain-contents-of-place-contents-coincident-2)
   :top
   :bash :bash))

(defthm lofat-place-file-correctness-lemma-26
  (implies
   (and
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory))))
   (<
    0
    (min
     (binary-+
      (count-free-clusters (effective-fat fat32-in-memory))
      (len
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))))
     1)))
  :hints (("goal" :do-not-induct t))
  :rule-classes :linear)

(defthm
  lofat-place-file-correctness-lemma-27
  (implies (and
            (equal (m1-file->contents file1)
                   (m1-file->contents (cdr (assoc-equal name fs))))
            (m1-regular-file-p (m1-file-fix file1))
            (m1-regular-file-p (m1-file-fix (cdr (assoc-equal name fs))))
            (consp (assoc-equal name fs)))
           (hifat-equiv (put-assoc-equal name file1 fs)
                        fs))
  :hints (("goal" :in-theory (disable put-assoc-under-hifat-equiv-3)
           :use (:instance put-assoc-under-hifat-equiv-3
                           (file2 (cdr (assoc-equal name fs))))
           :do-not-induct t)))

(defthm
  lofat-place-file-correctness-lemma-28
  (implies
   (lofat-regular-file-p file)
   (not (m1-file-alist-p (lofat-file->contents file))))
  :hints (("goal" :do-not-induct t
           :in-theory (e/d (lofat-regular-file-p)))))

(defthm
  lofat-place-file-correctness-lemma-29
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (lofat-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file))))
    (<= 1
        (count-free-clusters (effective-fat fat32-in-memory))))
   (not
    (intersectp-equal
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      '0
      (d-e-clusterchain
       (mv-nth
        '0
        (place-contents
         (update-fati
          (nth '0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     '1))
          (fat32-update-lower-28
           (fati (nth '0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            '1))
                 fat32-in-memory)
           '268435455)
          fat32-in-memory)
         (mv-nth
          '0
          (find-d-e
           (make-d-e-list
            (mv-nth
             '0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (lofat-file->contents$inline file)
         (len (explode$inline (lofat-file->contents$inline file)))
         (nth '0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    '1))))
       (d-e-set-first-cluster-file-size
        (mv-nth
         '0
         (find-d-e
          (make-d-e-list
           (mv-nth
            '0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth '0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   '1))
        (len (explode$inline (lofat-file->contents$inline file)))))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-place-contents-coincident-2))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-place-contents-coincident-2)
     (d-e1
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e2
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm
  lofat-place-file-correctness-lemma-30
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (lofat-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file))))
    (<= 1
        (count-free-clusters (effective-fat fat32-in-memory))))
   (not
    (intersectp-equal
     (mv-nth '0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth
      '0
      (d-e-clusterchain
       (mv-nth
        '0
        (place-contents
         (update-fati
          (nth '0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     '1))
          (fat32-update-lower-28
           (fati (nth '0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            '1))
                 fat32-in-memory)
           '268435455)
          fat32-in-memory)
         (mv-nth
          '0
          (find-d-e
           (make-d-e-list
            (mv-nth
             '0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (lofat-file->contents$inline file)
         (len (explode$inline (lofat-file->contents$inline file)))
         (nth '0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    '1))))
       (d-e-set-first-cluster-file-size
        (mv-nth
         '0
         (find-d-e
          (make-d-e-list
           (mv-nth
            '0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth '0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   '1))
        (len (explode$inline (lofat-file->contents$inline file)))))))))
  :hints (("goal" :do-not-induct t)))

(defthm
  lofat-place-file-correctness-lemma-31
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (non-free-index-listp x (effective-fat fat32-in-memory))
    (lofat-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (not
     (d-e-directory-p
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file))))
    (<= 1
        (count-free-clusters (effective-fat fat32-in-memory))))
   (not
    (intersectp-equal
     x
     (mv-nth
      0
      (d-e-clusterchain
       (mv-nth
        0
        (place-contents
         (update-fati
          (nth 0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     1))
          (fat32-update-lower-28
           (fati (nth 0
                      (find-n-free-clusters (effective-fat fat32-in-memory)
                                            1))
                 fat32-in-memory)
           268435455)
          fat32-in-memory)
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (lofat-file->contents file)
         (len (explode (lofat-file->contents file)))
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))))
       (d-e-set-first-cluster-file-size
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))
        (len (explode (lofat-file->contents file)))))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-place-contents-coincident-2))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-place-contents-coincident-2)
     (d-e1
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e2
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm
  lofat-place-file-correctness-lemma-39
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (<=
     2
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (<
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (+ 2 (count-of-clusters fat32-in-memory)))
    (not
     (member-equal
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain
             fat32-in-memory
             (mv-nth
              0
              (find-d-e
               (make-d-e-list (mv-nth 0
                                          (d-e-clusterchain-contents
                                           fat32-in-memory root-d-e)))
               (car path))))))
          0 nil))
        1))
      (mv-nth
       0
       (d-e-clusterchain
        fat32-in-memory
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path))))))))
   (equal
    (fat32-entry-mask
     (fati
      (nth
       0
       (find-n-free-clusters
        (set-indices-in-fa-table
         (effective-fat fat32-in-memory)
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
             (car path)))))
         (make-list-ac
          (len
           (mv-nth
            0
            (d-e-clusterchain
             fat32-in-memory
             (mv-nth 0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
          0 nil))
        1))
      fat32-in-memory))
    0))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable (:rewrite find-n-free-clusters-correctness-5))
    :use
    (:instance
     (:rewrite find-n-free-clusters-correctness-5)
     (n1 1)
     (fa-table
      (set-indices-in-fa-table
       (effective-fat fat32-in-memory)
       (mv-nth
        0
        (d-e-clusterchain
         fat32-in-memory
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))
       (make-list-ac
        (len
         (mv-nth
          0
          (d-e-clusterchain
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path))))))
        0 nil)))
     (n2 0)))))

(defthm
  lofat-place-file-correctness-lemma-72
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (lofat-regular-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (<=
     (+ 2 (count-of-clusters fat32-in-memory))
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file)))))
   (no-duplicatesp-equal
    (mv-nth
     0
     (d-e-clusterchain
      (mv-nth
       0
       (place-contents
        (update-fati
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (fat32-update-lower-28
          (fati (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                fat32-in-memory)
          268435455)
         fat32-in-memory)
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))))
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file))))))))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-place-contents-coincident-2))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-place-contents-coincident-2)
     (d-e1
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e2
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm
  lofat-place-file-correctness-lemma-43
  (implies
   (and
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       fat32-in-memory
       (make-d-e-list
        (mv-nth 0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
       entry-limit))
     0)
    (lofat-regular-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (<=
     (+ 2 (count-of-clusters fat32-in-memory))
     (d-e-first-cluster
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path)))))
    (< 0
       (len (explode (lofat-file->contents file)))))
   (free-index-listp
    (mv-nth
     0
     (d-e-clusterchain
      (mv-nth
       0
       (place-contents
        (update-fati
         (nth 0
              (find-n-free-clusters (effective-fat fat32-in-memory)
                                    1))
         (fat32-update-lower-28
          (fati (nth 0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           1))
                fat32-in-memory)
          268435455)
         fat32-in-memory)
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth
            0
            (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (car path)))
        (lofat-file->contents file)
        (len (explode (lofat-file->contents file)))
        (nth 0
             (find-n-free-clusters (effective-fat fat32-in-memory)
                                   1))))
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file))))))
    (effective-fat fat32-in-memory)))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory
    (disable (:rewrite d-e-clusterchain-of-place-contents-coincident-2))
    :use
    (:instance
     (:rewrite d-e-clusterchain-of-place-contents-coincident-2)
     (d-e1
      (d-e-set-first-cluster-file-size
       (mv-nth
        0
        (find-d-e
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         (car path)))
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (len (explode (lofat-file->contents file)))))
     (first-cluster (nth 0
                         (find-n-free-clusters (effective-fat fat32-in-memory)
                                               1)))
     (file-length (len (explode (lofat-file->contents file))))
     (contents (lofat-file->contents file))
     (d-e2
      (mv-nth
       0
       (find-d-e
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents fat32-in-memory root-d-e)))
        (car path))))
     (fat32-in-memory
      (update-fati
       (nth 0
            (find-n-free-clusters (effective-fat fat32-in-memory)
                                  1))
       (fat32-update-lower-28
        (fati (nth 0
                   (find-n-free-clusters (effective-fat fat32-in-memory)
                                         1))
              fat32-in-memory)
        268435455)
       fat32-in-memory))))))

(defthm
  lofat-place-file-correctness-lemma-60
  (implies
   (and
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (useful-d-e-list-p d-e-list)
    (>= (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
        *ms-first-data-cluster*)
    (> (+ *ms-first-data-cluster*
          (count-of-clusters fat32-in-memory))
       (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))))
   (member-equal
    (mv-nth
     0
     (d-e-clusterchain fat32-in-memory
                           (mv-nth 0 (find-d-e d-e-list name))))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (find-d-e lofat-to-hifat-helper hifat-entry-count)
     ((:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nth-of-effective-fat)
      (:rewrite nth-of-nats=>chars)
      (:linear nth-when-d-e-p)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite nfix-when-zp)
      (:rewrite explode-of-d-e-filename)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p))))))

(defthm
  lofat-place-file-correctness-lemma-52
  (implies
   (and
    (equal
     (mv-nth 3
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))
     0)
    (subsetp-equal
     (mv-nth
      2
      (lofat-to-hifat-helper fat32-in-memory
                             d-e-list entry-limit1))
     y)
    (>=
     (nfix entry-limit2)
     (mv-nth 1
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit1))))
   (subsetp-equal
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit2))
    y))
  :hints
  (("goal"
    :do-not-induct t
    :in-theory (disable lofat-to-hifat-helper-correctness-4)
    :use lofat-to-hifat-helper-correctness-4)))

(defthm
  lofat-place-file-correctness-lemma-61
  (implies
   (and (equal (mv-nth 3
                       (lofat-to-hifat-helper fat32-in-memory
                                              d-e-list entry-limit))
               0)
        (useful-d-e-list-p d-e-list)
        ;; This hypothesis might be removable.
        (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name))))
   (subsetp-equal
    (mv-nth
     2
     (lofat-to-hifat-helper
      fat32-in-memory
      (make-d-e-list
       (mv-nth 0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth 0 (find-d-e d-e-list name)))))
      entry-limit))
    (mv-nth 2
            (lofat-to-hifat-helper fat32-in-memory
                                   d-e-list entry-limit))))
  :hints
  (("goal"
    :in-theory
    (e/d
     (find-d-e lofat-to-hifat-helper hifat-entry-count
                   lofat-to-hifat-helper-correctness-4)
     ((:rewrite
       d-e-clusterchain-contents-of-lofat-place-file-coincident-lemma-13
       . 1)
      (:rewrite nth-of-effective-fat)
      (:rewrite nth-of-nats=>chars)
      (:linear nth-when-d-e-p)
      (:rewrite lofat-place-file-correctness-1-lemma-13)
      (:rewrite lofat-place-file-correctness-1-lemma-14)
      (:rewrite nfix-when-zp)
      (:rewrite explode-of-d-e-filename)
      (:rewrite
       hifat-entry-count-of-lofat-to-hifat-helper-of-delete-d-e-lemma-3)
      (:rewrite d-e-p-when-member-equal-of-d-e-list-p))))))

(defthm
  lofat-place-file-correctness-lemma-144
  (implies
   (and
    (equal
     (mv-nth 1
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
     0)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))
                             path file))
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit))
     0)
    (not-intersectp-list
     nil
     (mv-nth
      2
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))
                             path file))
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit)))
    (not
     (member-intersectp-equal
      (set-difference-equal
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth
            0
            (lofat-place-file fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list name))
                              path file))
           (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))))
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))
                             path file))
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit))
       path (m1-file d-e nil))))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (non-free-index-listp nil (effective-fat fat32-in-memory))
    (fat32-filename-list-p path)
    (fat32-filename-p name)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (not-intersectp-list
     nil
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (lofat-file-p file)
    (not (lofat-file->contents file))
    (<= 1
        (count-free-clusters (effective-fat fat32-in-memory)))
    (consp path)
    (<= 2
        (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
    (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
       (+ 2 (count-of-clusters fat32-in-memory)))
    (integerp entry-limit)
    (< (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       entry-limit)
    (useful-d-e-list-p d-e-list))
   (and
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       d-e-list entry-limit))
     (put-assoc-equal
      name
      (m1-file
       (mv-nth 0 (find-d-e d-e-list name))
       (mv-nth
        0
        (hifat-place-file
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0 (find-d-e d-e-list name)))))
           entry-limit))
         path (m1-file d-e nil))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       d-e-list entry-limit))
     0)))
  :hints (("goal" :in-theory (disable lofat-place-file-correctness-lemma-143)
           :use (:instance lofat-place-file-correctness-lemma-143
                           (x nil)))))

(skip-proofs
 (defthm
   lofat-place-file-correctness-lemma-94
   (implies
    (and
     (equal
      (mv-nth 1
              (lofat-place-file fat32-in-memory
                                (mv-nth 0 (find-d-e d-e-list name))
                                path file))
      0)
     (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
     (equal
      (mv-nth
       3
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     (mv-nth 0 (find-d-e d-e-list name))
                                     path file))
           (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))
      0)
     (not-intersectp-list
      x
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     (mv-nth 0 (find-d-e d-e-list name))
                                     path file))
           (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit)))
     (not
      (member-intersectp-equal
       (set-difference-equal
        (mv-nth 2
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit))
        (mv-nth
         2
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0 (find-d-e d-e-list name)))))
          entry-limit)))
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth 0
                 (lofat-place-file fat32-in-memory
                                   (mv-nth 0 (find-d-e d-e-list name))
                                   path file))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
            (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit))))
     (hifat-equiv
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth 0
                   (lofat-place-file fat32-in-memory
                                     (mv-nth 0 (find-d-e d-e-list name))
                                     path file))
           (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))
      (mv-nth
       0
       (hifat-place-file
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory
                    (mv-nth 0 (find-d-e d-e-list name)))))
          entry-limit))
        path
        (m1-file d-e (lofat-file->contents file)))))
     (good-root-d-e-p root-d-e fat32-in-memory)
     (non-free-index-listp x (effective-fat fat32-in-memory))
     (equal (mv-nth 3
                    (lofat-to-hifat-helper fat32-in-memory
                                           d-e-list entry-limit))
            0)
     (not-intersectp-list
      (mv-nth 0
              (d-e-clusterchain fat32-in-memory root-d-e))
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit)))
     (not-intersectp-list
      x
      (mv-nth 2
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit)))
     (lofat-file-p file)
     (lofat-regular-file-p file)
     (<= (len (make-clusters (lofat-file->contents file)
                             (cluster-size fat32-in-memory)))
         (count-free-clusters (effective-fat fat32-in-memory)))
     (consp path)
     (<= 2
         (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name))))
     (< (d-e-first-cluster (mv-nth 0 (find-d-e d-e-list name)))
        (+ 2 (count-of-clusters fat32-in-memory)))
     (integerp entry-limit)
     (< (hifat-entry-count
         (mv-nth 0
                 (lofat-to-hifat-helper fat32-in-memory
                                        d-e-list entry-limit)))
        entry-limit)
     (useful-d-e-list-p d-e-list)
     (fat32-filename-list-p path)
     (fat32-filename-p name))
    (and
     (hifat-equiv
      (mv-nth
       0
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        d-e-list entry-limit))
      (put-assoc-equal
       name
       (m1-file
        (mv-nth 0 (find-d-e d-e-list name))
        (mv-nth
         0
         (hifat-place-file
          (mv-nth
           0
           (lofat-to-hifat-helper
            fat32-in-memory
            (make-d-e-list
             (mv-nth 0
                     (d-e-clusterchain-contents
                      fat32-in-memory
                      (mv-nth 0 (find-d-e d-e-list name)))))
            entry-limit))
          path
          (m1-file d-e (lofat-file->contents file)))))
       (mv-nth 0
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))))
     (equal
      (mv-nth
       3
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        d-e-list entry-limit))
      0)
     (not-intersectp-list
      x
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        d-e-list entry-limit)))))))

(defthm
  lofat-place-file-correctness-lemma-147
  (implies
   (and
    (equal
     (mv-nth 1
             (lofat-place-file fat32-in-memory
                               (mv-nth 0 (find-d-e d-e-list name))
                               path file))
     0)
    (d-e-directory-p (mv-nth 0 (find-d-e d-e-list name)))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))
                             path file))
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit))
     0)
    (not
     (member-intersectp-equal
      (set-difference-equal
       (mv-nth 2
               (lofat-to-hifat-helper fat32-in-memory
                                      d-e-list entry-limit))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit)))
      (mv-nth
       2
       (lofat-to-hifat-helper
        (mv-nth 0
                (lofat-place-file fat32-in-memory
                                  (mv-nth 0 (find-d-e d-e-list name))
                                  path file))
        (make-d-e-list
         (mv-nth
          0
          (d-e-clusterchain-contents
           (mv-nth
            0
            (lofat-place-file fat32-in-memory
                              (mv-nth 0 (find-d-e d-e-list name))
                              path file))
           (mv-nth 0 (find-d-e d-e-list name)))))
        entry-limit))))
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       (make-d-e-list
        (mv-nth
         0
         (d-e-clusterchain-contents
          (mv-nth
           0
           (lofat-place-file fat32-in-memory
                             (mv-nth 0 (find-d-e d-e-list name))
                             path file))
          (mv-nth 0 (find-d-e d-e-list name)))))
       entry-limit))
     (mv-nth
      0
      (hifat-place-file
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0 (find-d-e d-e-list name)))))
         entry-limit))
       path
       (m1-file d-e (lofat-file->contents file)))))
    (good-root-d-e-p root-d-e fat32-in-memory)
    (equal (mv-nth 3
                   (lofat-to-hifat-helper fat32-in-memory
                                          d-e-list entry-limit))
           0)
    (not-intersectp-list
     (mv-nth 0
             (d-e-clusterchain fat32-in-memory root-d-e))
     (mv-nth 2
             (lofat-to-hifat-helper fat32-in-memory
                                    d-e-list entry-limit)))
    (lofat-file-p file)
    (lofat-regular-file-p file)
    (<= (len (make-clusters (lofat-file->contents file)
                            (cluster-size fat32-in-memory)))
        (count-free-clusters (effective-fat fat32-in-memory)))
    (consp path)
    (integerp entry-limit)
    (< (hifat-entry-count
        (mv-nth 0
                (lofat-to-hifat-helper fat32-in-memory
                                       d-e-list entry-limit)))
       entry-limit)
    (useful-d-e-list-p d-e-list)
    (fat32-filename-list-p path)
    (fat32-filename-p name))
   (and
    (hifat-equiv
     (mv-nth
      0
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       d-e-list entry-limit))
     (put-assoc-equal
      name
      (m1-file
       (mv-nth 0 (find-d-e d-e-list name))
       (mv-nth
        0
        (hifat-place-file
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory
                     (mv-nth 0 (find-d-e d-e-list name)))))
           entry-limit))
         path
         (m1-file d-e (lofat-file->contents file)))))
      (mv-nth 0
              (lofat-to-hifat-helper fat32-in-memory
                                     d-e-list entry-limit))))
    (equal
     (mv-nth
      3
      (lofat-to-hifat-helper
       (mv-nth 0
               (lofat-place-file fat32-in-memory
                                 (mv-nth 0 (find-d-e d-e-list name))
                                 path file))
       d-e-list entry-limit))
     0)))
  :hints
  (("goal"
    :in-theory
    (disable
     lofat-place-file-correctness-lemma-94
     lofat-place-file
     (:rewrite
      d-e-clusterchain-contents-of-lofat-place-file-coincident-1))
    :use (:instance lofat-place-file-correctness-lemma-94
                    (x nil))
    :do-not-induct t)))

(encapsulate
  ()

  (local
   (defun-nx
     induction-scheme
     (entry-limit fat32-in-memory
                  file path root-d-e x)
     (cond
      ((and
        (consp path)
        (consp
         (assoc-equal
          (fat32-filename-fix (car path))
          (hifat-file-alist-fix
           (mv-nth
            0
            (lofat-to-hifat-helper
             fat32-in-memory
             (make-d-e-list
              (mv-nth 0
                      (d-e-clusterchain-contents
                       fat32-in-memory root-d-e)))
             entry-limit)))))
        (m1-directory-file-p
         (cdr
          (assoc-equal
           (fat32-filename-fix (car path))
           (hifat-file-alist-fix
            (mv-nth
             0
             (lofat-to-hifat-helper
              fat32-in-memory
              (make-d-e-list
               (mv-nth 0
                       (d-e-clusterchain-contents
                        fat32-in-memory root-d-e)))
              entry-limit)))))))
       (induction-scheme
        entry-limit
        fat32-in-memory file (cdr path)
        (mv-nth
         0
         (find-d-e
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory root-d-e)))
          (car path)))
        (append
         x
         (flatten
          (set-difference-equal
           (mv-nth 2
                   (lofat-to-hifat-helper
                    fat32-in-memory
                    (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory root-d-e)))
                    entry-limit))
           (mv-nth 2
                   (lofat-to-hifat-helper
                    fat32-in-memory
                    (make-d-e-list
                     (mv-nth 0
                             (d-e-clusterchain-contents
                              fat32-in-memory (mv-nth
                                               0
                                               (find-d-e
                                                (make-d-e-list
                                                 (mv-nth 0
                                                         (d-e-clusterchain-contents
                                                          fat32-in-memory root-d-e)))
                                                (car path))))))
                    entry-limit)))))))
      (t (mv entry-limit fat32-in-memory
             file path root-d-e x)))))

  (local (in-theory (disable
                     (:DEFINITION BUTLAST)
                     (:DEFINITION NFIX)
                     (:DEFINITION LENGTH)
                     (:DEFINITION MIN))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-45
     (implies
      (and
       (m1-directory-file-p
        (m1-file
         (d-e-set-first-cluster-file-size
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (nth 0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     1))
          (len (explode (lofat-file->contents file))))
         (lofat-file->contents file)))
       (lofat-regular-file-p file))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))))
     :hints (("goal" :in-theory
              (e/d
               ((:definition butlast)
                (:definition nfix)
                (:definition length)
                (:definition min))
               (m1-directory-file-p-of-m1-file))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-46
     (implies
      (and
       (m1-directory-file-p
        (m1-file
         (d-e-set-first-cluster-file-size
          (mv-nth
           0
           (find-d-e
            (make-d-e-list
             (mv-nth
              0
              (d-e-clusterchain-contents fat32-in-memory root-d-e)))
            (car path)))
          (nth 0
               (find-n-free-clusters (effective-fat fat32-in-memory)
                                     1))
          (len (explode (lofat-file->contents file))))
         (lofat-file->contents file)))
       (lofat-regular-file-p file))
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))
       (mv-nth
        0
        (hifat-place-file
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           entry-limit))
         path
         (m1-file
          (d-e-set-first-cluster-file-size
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))
           (nth 0
                (find-n-free-clusters (effective-fat fat32-in-memory)
                                      1))
           (len (explode (lofat-file->contents file))))
          (lofat-file->contents file))))))
     :hints (("goal" :in-theory (e/d
                                 ((:definition butlast)
                                  (:definition nfix)
                                  (:definition length)
                                  (:definition min))
                                 (m1-directory-file-p-of-m1-file))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-51
     (implies
      (and
       (not
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))
       (lofat-fs-p fat32-in-memory)
       (<=
        4294967296
        (length
         (m1-file-contents-fix
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))))))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-52
     (implies
      (and
       (m1-directory-file-p
        (m1-file
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))
       (lofat-fs-p fat32-in-memory)
       (not
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-53
     (implies
      (and
       (m1-directory-file-p
        (m1-file
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))
       (lofat-fs-p fat32-in-memory)
       (not
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))
       0))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-55
     (implies
      (and
       (m1-directory-file-p
        (m1-file
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))
         (mv-nth
          0
          (d-e-clusterchain-contents
           fat32-in-memory
           (mv-nth
            0
            (find-d-e
             (make-d-e-list
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (car path)))))))
       (lofat-fs-p fat32-in-memory)
       (not
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path))))))
      (equal
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (d-e-first-cluster root-d-e)
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents fat32-in-memory root-d-e)))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path))))
                     (d-e-file-size
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))
                   (d-e-file-size
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path)))))))
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))))
              (d-e-first-cluster root-d-e)
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (set-indices-in-fa-table
                       (effective-fat fat32-in-memory)
                       (mv-nth
                        0
                        (d-e-clusterchain
                         fat32-in-memory
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                       (make-list-ac
                        (len
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path))))))
                        0 nil))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (set-indices-in-fa-table
                         (effective-fat fat32-in-memory)
                         (mv-nth
                          0
                          (d-e-clusterchain
                           fat32-in-memory
                           (mv-nth
                            0
                            (find-d-e
                             (make-d-e-list
                              (mv-nth 0
                                      (d-e-clusterchain-contents
                                       fat32-in-memory root-d-e)))
                             (car path)))))
                         (make-list-ac
                          (len
                           (mv-nth
                            0
                            (d-e-clusterchain
                             fat32-in-memory
                             (mv-nth
                              0
                              (find-d-e
                               (make-d-e-list
                                (mv-nth 0
                                        (d-e-clusterchain-contents
                                         fat32-in-memory root-d-e)))
                               (car path))))))
                          0 nil))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))
                        (d-e-file-size
                         (mv-nth
                          0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))
                      (d-e-file-size
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path)))))))
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (set-indices-in-fa-table
                      (effective-fat fat32-in-memory)
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path)))))
                      (make-list-ac
                       (len
                        (mv-nth
                         0
                         (d-e-clusterchain
                          fat32-in-memory
                          (mv-nth
                           0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                       0 nil))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (set-indices-in-fa-table
                    (effective-fat fat32-in-memory)
                    (mv-nth
                     0
                     (d-e-clusterchain
                      fat32-in-memory
                      (mv-nth
                       0
                       (find-d-e
                        (make-d-e-list
                         (mv-nth 0
                                 (d-e-clusterchain-contents
                                  fat32-in-memory root-d-e)))
                        (car path)))))
                    (make-list-ac
                     (len
                      (mv-nth
                       0
                       (d-e-clusterchain
                        fat32-in-memory
                        (mv-nth
                         0
                         (find-d-e
                          (make-d-e-list
                           (mv-nth 0
                                   (d-e-clusterchain-contents
                                    fat32-in-memory root-d-e)))
                          (car path))))))
                     0 nil))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))
       (mv-nth
        0
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents fat32-in-memory root-d-e)))
         entry-limit))))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-58
     (implies
      (and
       (not
        (d-e-directory-p
         (mv-nth
          0
          (find-d-e
           (make-d-e-list
            (mv-nth
             0
             (d-e-clusterchain-contents fat32-in-memory root-d-e)))
           (car path)))))
       (lofat-fs-p fat32-in-memory)
       (<=
        4294967296
        (length
         (m1-file-contents-fix
          (mv-nth
           0
           (d-e-clusterchain-contents
            fat32-in-memory
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path)))))))))
      (<
       2097152
       (length
        (nats=>string
         (insert-d-e
          (string=>nats
           (mv-nth 0
                   (d-e-clusterchain-contents fat32-in-memory root-d-e)))
          (d-e-set-first-cluster-file-size
           (mv-nth
            1
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (set-indices-in-fa-table
                 (effective-fat fat32-in-memory)
                 (mv-nth
                  0
                  (d-e-clusterchain
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))
                 (make-list-ac
                  (len
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path))))))
                  0 nil))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (set-indices-in-fa-table
                   (effective-fat fat32-in-memory)
                   (mv-nth
                    0
                    (d-e-clusterchain
                     fat32-in-memory
                     (mv-nth
                      0
                      (find-d-e
                       (make-d-e-list
                        (mv-nth 0
                                (d-e-clusterchain-contents
                                 fat32-in-memory root-d-e)))
                       (car path)))))
                   (make-list-ac
                    (len
                     (mv-nth
                      0
                      (d-e-clusterchain
                       fat32-in-memory
                       (mv-nth
                        0
                        (find-d-e
                         (make-d-e-list
                          (mv-nth 0
                                  (d-e-clusterchain-contents
                                   fat32-in-memory root-d-e)))
                         (car path))))))
                    0 nil))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))
                  (d-e-file-size
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path)))))))
               268435455)
              (mv-nth
               0
               (clear-clusterchain
                fat32-in-memory
                (d-e-first-cluster
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path))))
                (d-e-file-size
                 (mv-nth
                  0
                  (find-d-e (make-d-e-list
                                 (mv-nth 0
                                         (d-e-clusterchain-contents
                                          fat32-in-memory root-d-e)))
                                (car path)))))))
             (mv-nth
              0
              (find-d-e
               (make-d-e-list
                (mv-nth
                 0
                 (d-e-clusterchain-contents fat32-in-memory root-d-e)))
               (car path)))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (set-indices-in-fa-table
                (effective-fat fat32-in-memory)
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path)))))
                (make-list-ac
                 (len
                  (mv-nth
                   0
                   (d-e-clusterchain
                    fat32-in-memory
                    (mv-nth
                     0
                     (find-d-e
                      (make-d-e-list
                       (mv-nth 0
                               (d-e-clusterchain-contents
                                fat32-in-memory root-d-e)))
                      (car path))))))
                 0 nil))
               1))))
           (nth
            0
            (find-n-free-clusters
             (set-indices-in-fa-table
              (effective-fat fat32-in-memory)
              (mv-nth
               0
               (d-e-clusterchain
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path)))))
              (make-list-ac
               (len
                (mv-nth
                 0
                 (d-e-clusterchain
                  fat32-in-memory
                  (mv-nth 0
                          (find-d-e
                           (make-d-e-list
                            (mv-nth 0
                                    (d-e-clusterchain-contents
                                     fat32-in-memory root-d-e)))
                           (car path))))))
               0 nil))
             1))
           (length (lofat-file->contents file))))))))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-62
     (implies
      (and
       (fat32-filename-list-p path)
       (<=
        2
        (d-e-first-cluster
         (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                               (cadr path)))))
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (effective-fat
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path)))
                  0)))
               268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (d-e-set-filename
                         '(0 0 0 0 0 0 0 0 0 0 0 0
                             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                         (cadr path)))
                       0)))
             (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                   (cadr path))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (effective-fat
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path)))
                  0)))
               1))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path))))))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                (d-e-set-filename
                 '(0 0 0 0 0 0 0 0 0 0 0 0
                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                 (cadr path))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (effective-fat
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                (d-e-set-filename
                 '(0 0 0 0 0 0 0 0 0 0 0 0
                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                 (cadr path))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))))
              (d-e-first-cluster
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   0
                   (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                 (car path))))
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (effective-fat
                       (mv-nth
                        0
                        (clear-clusterchain
                         fat32-in-memory
                         (d-e-first-cluster
                          (d-e-set-filename
                           '(0 0 0 0 0 0 0 0 0 0 0 0
                               0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                           (cadr path)))
                         0)))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (effective-fat
                         (mv-nth
                          0
                          (clear-clusterchain
                           fat32-in-memory
                           (d-e-first-cluster
                            (d-e-set-filename
                             '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (cadr path)))
                           0)))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))
       0))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min)))
             ("[1]goal" :in-theory (enable (:definition butlast)
                                           (:definition nfix)
                                           (:definition length)
                                           (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-63
     (implies
      (and
       (fat32-filename-list-p path)
       (<=
        2
        (d-e-first-cluster
         (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                   0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                               (cadr path)))))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (update-dir-contents
           (mv-nth
            0
            (place-contents
             (update-fati
              (nth
               0
               (find-n-free-clusters
                (effective-fat
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                1))
              (fat32-update-lower-28
               (fati
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path)))
                  0)))
               268435455)
              (mv-nth 0
                      (clear-clusterchain
                       fat32-in-memory
                       (d-e-first-cluster
                        (d-e-set-filename
                         '(0 0 0 0 0 0 0 0 0 0 0 0
                             0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                         (cadr path)))
                       0)))
             (d-e-set-filename '(0 0 0 0 0 0 0 0 0 0 0 0
                                       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                                   (cadr path))
             (lofat-file->contents file)
             (length (lofat-file->contents file))
             (nth
              0
              (find-n-free-clusters
               (effective-fat
                (mv-nth
                 0
                 (clear-clusterchain
                  fat32-in-memory
                  (d-e-first-cluster
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path)))
                  0)))
               1))))
           (d-e-first-cluster
            (mv-nth
             0
             (find-d-e
              (make-d-e-list
               (mv-nth
                0
                (d-e-clusterchain-contents fat32-in-memory root-d-e)))
              (car path))))
           (nats=>string
            (insert-d-e
             (string=>nats
              (mv-nth
               0
               (d-e-clusterchain-contents
                fat32-in-memory
                (mv-nth
                 0
                 (find-d-e
                  (make-d-e-list (mv-nth 0
                                             (d-e-clusterchain-contents
                                              fat32-in-memory root-d-e)))
                  (car path))))))
             (d-e-set-first-cluster-file-size
              (mv-nth
               1
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                (d-e-set-filename
                 '(0 0 0 0 0 0 0 0 0 0 0 0
                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                 (cadr path))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))))
              (nth
               0
               (find-n-free-clusters
                (effective-fat
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                1))
              (length (lofat-file->contents file)))))))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth
             0
             (update-dir-contents
              (mv-nth
               0
               (place-contents
                (update-fati
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (fat32-update-lower-28
                  (fati
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  268435455)
                 (mv-nth
                  0
                  (clear-clusterchain
                   fat32-in-memory
                   (d-e-first-cluster
                    (d-e-set-filename
                     '(0 0 0 0 0 0 0 0 0 0 0 0
                         0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                     (cadr path)))
                   0)))
                (d-e-set-filename
                 '(0 0 0 0 0 0 0 0 0 0 0 0
                     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                 (cadr path))
                (lofat-file->contents file)
                (length (lofat-file->contents file))
                (nth
                 0
                 (find-n-free-clusters
                  (effective-fat
                   (mv-nth
                    0
                    (clear-clusterchain
                     fat32-in-memory
                     (d-e-first-cluster
                      (d-e-set-filename
                       '(0 0 0 0 0 0 0 0 0 0 0 0
                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                       (cadr path)))
                     0)))
                  1))))
              (d-e-first-cluster
               (mv-nth
                0
                (find-d-e
                 (make-d-e-list
                  (mv-nth
                   0
                   (d-e-clusterchain-contents fat32-in-memory root-d-e)))
                 (car path))))
              (nats=>string
               (insert-d-e
                (string=>nats
                 (mv-nth
                  0
                  (d-e-clusterchain-contents
                   fat32-in-memory
                   (mv-nth 0
                           (find-d-e
                            (make-d-e-list
                             (mv-nth 0
                                     (d-e-clusterchain-contents
                                      fat32-in-memory root-d-e)))
                            (car path))))))
                (d-e-set-first-cluster-file-size
                 (mv-nth
                  1
                  (place-contents
                   (update-fati
                    (nth
                     0
                     (find-n-free-clusters
                      (effective-fat
                       (mv-nth
                        0
                        (clear-clusterchain
                         fat32-in-memory
                         (d-e-first-cluster
                          (d-e-set-filename
                           '(0 0 0 0 0 0 0 0 0 0 0 0
                               0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                           (cadr path)))
                         0)))
                      1))
                    (fat32-update-lower-28
                     (fati
                      (nth
                       0
                       (find-n-free-clusters
                        (effective-fat
                         (mv-nth
                          0
                          (clear-clusterchain
                           fat32-in-memory
                           (d-e-first-cluster
                            (d-e-set-filename
                             '(0 0 0 0 0 0 0 0 0 0 0 0
                                 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                             (cadr path)))
                           0)))
                        1))
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     268435455)
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   (d-e-set-filename
                    '(0 0 0 0 0 0 0 0 0 0 0 0
                        0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                    (cadr path))
                   (lofat-file->contents file)
                   (length (lofat-file->contents file))
                   (nth
                    0
                    (find-n-free-clusters
                     (effective-fat
                      (mv-nth
                       0
                       (clear-clusterchain
                        fat32-in-memory
                        (d-e-first-cluster
                         (d-e-set-filename
                          '(0 0 0 0 0 0 0 0 0 0 0 0
                              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                          (cadr path)))
                        0)))
                     1))))
                 (nth
                  0
                  (find-n-free-clusters
                   (effective-fat
                    (mv-nth
                     0
                     (clear-clusterchain
                      fat32-in-memory
                      (d-e-first-cluster
                       (d-e-set-filename
                        '(0 0 0 0 0 0 0 0 0 0 0 0
                            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
                        (cadr path)))
                      0)))
                   1))
                 (length (lofat-file->contents file)))))))
            root-d-e)))
         entry-limit))))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min)))
             ("[1]goal" :in-theory (enable (:definition butlast)
                                           (:definition nfix)
                                           (:definition length)
                                           (:definition min))))))

  (local
   (defthm
     lofat-place-file-correctness-1-lemma-67
     (implies (lofat-regular-file-p file)
              (< (length (m1-file-contents-fix (lofat-file->contents file)))
                 4294967296))
     :hints (("goal" :in-theory (enable (:definition butlast)
                                        (:definition nfix)
                                        (:definition length)
                                        (:definition min))))
     :rule-classes (:linear :rewrite)))

  (defthm
    lofat-place-file-correctness-1-lemma-44
    (implies (and (< (d-e-first-cluster root-d-e)
                     (+ 2 (count-of-clusters fat32-in-memory)))
                  (<= 1
                      (min (count-free-clusters (effective-fat fat32-in-memory))
                           1)))
             (< (nth '0
                     (find-n-free-clusters (effective-fat fat32-in-memory)
                                           '1))
                (binary-+ '2
                          (count-of-clusters fat32-in-memory))))
    :hints (("goal" :in-theory (enable (:definition butlast)
                                       (:definition nfix)
                                       (:definition length)
                                       (:definition min))))
    :rule-classes (:linear :rewrite))

  (local (include-book "std/lists/intersectp" :dir :system))

  ;; Interesting. This now goes through with only two skipped proofs.
  (defthm
    lofat-place-file-correctness-1-lemma-1
    (implies
     (and
      (good-root-d-e-p root-d-e fat32-in-memory)
      (non-free-index-listp x (effective-fat fat32-in-memory))
      (fat32-filename-list-p path)
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory root-d-e)))
         entry-limit))
       0)
      (not-intersectp-list
       (mv-nth 0
               (d-e-clusterchain fat32-in-memory root-d-e))
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory root-d-e)))
         entry-limit)))
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         fat32-in-memory
         (make-d-e-list
          (mv-nth 0
                  (d-e-clusterchain-contents
                   fat32-in-memory root-d-e)))
         entry-limit)))
      (lofat-file-p file)
      (or
       (and
        (lofat-regular-file-p file)
        (<= (len (make-clusters (lofat-file->contents file)
                                (cluster-size fat32-in-memory)))
            (count-free-clusters (effective-fat fat32-in-memory))))
       (and
        (equal (lofat-file->contents file) nil)
        (<= 1
            (count-free-clusters (effective-fat fat32-in-memory)))))
      (zp (mv-nth 1
                  (lofat-place-file fat32-in-memory
                                    root-d-e path file)))
      (integerp entry-limit)
      (<
       (hifat-entry-count
        (mv-nth
         0
         (lofat-to-hifat-helper
          fat32-in-memory
          (make-d-e-list
           (mv-nth 0
                   (d-e-clusterchain-contents
                    fat32-in-memory root-d-e)))
          entry-limit)))
       entry-limit)
      t)
     (and
      (equal
       (mv-nth
        3
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-place-file fat32-in-memory root-d-e path file))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth 0
                    (lofat-place-file
                     fat32-in-memory root-d-e path file))
            root-d-e)))
         entry-limit))
       0)
      (not-intersectp-list
       x
       (mv-nth
        2
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-place-file fat32-in-memory root-d-e path file))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth 0
                    (lofat-place-file
                     fat32-in-memory root-d-e path file))
            root-d-e)))
         entry-limit)))
      (hifat-equiv
       (mv-nth
        0
        (lofat-to-hifat-helper
         (mv-nth
          0
          (lofat-place-file fat32-in-memory root-d-e path file))
         (make-d-e-list
          (mv-nth
           0
           (d-e-clusterchain-contents
            (mv-nth 0
                    (lofat-place-file
                     fat32-in-memory root-d-e path file))
            root-d-e)))
         entry-limit))
       (mv-nth
        0
        (hifat-place-file
         (mv-nth
          0
          (lofat-to-hifat-helper
           fat32-in-memory
           (make-d-e-list
            (mv-nth 0
                    (d-e-clusterchain-contents
                     fat32-in-memory root-d-e)))
           entry-limit))
         path
         (m1-file d-e (lofat-file->contents file)))))))
   :hints
   (("goal"
     :induct
     (induction-scheme
      entry-limit fat32-in-memory file path root-d-e x)
     :expand
     (lofat-place-file fat32-in-memory root-d-e path file)
     :in-theory
     (e/d (hifat-place-file
           (:rewrite lofat-to-hifat-inversion-lemma-4)
           hifat-find-file)
          ((:definition find-d-e)
           (:definition place-d-e)
           (:rewrite
            d-e-p-when-member-equal-of-d-e-list-p)
           (:rewrite
            lofat-fs-p-of-lofat-place-file-lemma-1)
           (:rewrite
            clear-clusterchain-reversibility-lemma-1)
           ;; This lemma leads to specious simplifications.
           (:rewrite
            d-e-clusterchain-contents-of-lofat-remove-file-disjoint-lemma-7
            . 5)))
     ;; we can add more of these restrict bindings if needed... but right now
     ;; we want to save space.
     :restrict
     ((put-assoc-under-hifat-equiv-3
       ((file2
         (m1-file d-e "")))
       ((file2 (m1-file d-e
                        (lofat-file->contents$inline file))))))))))
